Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 23:31:14,167 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 23:31:14,174 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 23:31:14,175 main:382 - The compliance of the JVM is:  7
[INFO] 23:31:14,177 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-40  -failing  org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_40/target/classes/:/script/jGenProg_Defects4J_Math_40/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 23:31:14,184 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_40/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_40/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 610
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_40/./output_astor/AstorMain-Math-40//bin//default from 610 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_40/./output_astor/AstorMain-Math-40//bin//default, /script/jGenProg_Defects4J_Math_40/target/classes/, /script/jGenProg_Defects4J_Math_40/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math.util.FastMathTest#checkMissingFastMathClasses
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest#testIssue716
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:3199, fails: 2, GZoltar suspicious 24496, with positive susp 233
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 3199
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 91 with susp > 0.1, we consider: 91
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 2327470 milliseconds (2327 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_40/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_40/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_40/target/classes/, /script/jGenProg_Defects4J_Math_40/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 578
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 91
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 91,  89
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 89
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 89, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_40/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 2327470
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-40
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_40/target/classes/:/script/jGenProg_Defects4J_Math_40/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
23:58:25.293 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
23:58:26.767 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
23:58:27.548 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
23:58:27.554 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
23:58:27.555 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
23:58:27.555 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
23:58:28.105 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:30.836 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:30.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:30.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return functionDerivative.value(point),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:33.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:33.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:33.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: functionDerivative = f.derivative(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return functionDerivative.value(point),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:35.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:35.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:35.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: polynomialFunction = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: functionDerivative = f.derivative(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:38.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:38.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:38.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return polynomialFunction.getCoefficients(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: polynomialFunction = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:40.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:40.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:40.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this(org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_RELATIVE_ACCURACY, 
absoluteAccuracy, 
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_FUNCTION_VALUE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return polynomialFunction.getCoefficients(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:42.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:42.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:42.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this(relativeAccuracy, 
absoluteAccuracy, 
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_FUNCTION_VALUE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_RELATIVE_ACCURACY, 
absoluteAccuracy, 
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_FUNCTION_VALUE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:44.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:44.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:44.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this.absoluteAccuracy = absoluteAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(relativeAccuracy, 
absoluteAccuracy, 
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_FUNCTION_VALUE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:47.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:47.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:47.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this.relativeAccuracy = relativeAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.absoluteAccuracy = absoluteAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:50.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:50.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:50.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this.functionValueAccuracy = functionValueAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.relativeAccuracy = relativeAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:52.415 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:52.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:52.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return evaluations.getMaximalCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.functionValueAccuracy = functionValueAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:55.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:55.119 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:55.120 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return evaluations.getCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return evaluations.getMaximalCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:57.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:57.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:57.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return searchMin,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return evaluations.getCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:58:59.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:58:59.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:58:59.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return searchMax,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return searchMin,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:02.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:02.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:02.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return searchStart,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return searchMax,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:04.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:04.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:04.896 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return absoluteAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return searchStart,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:07.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:07.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:07.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return relativeAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return absoluteAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:10.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:10.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:10.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return functionValueAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return relativeAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:12.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:12.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:12.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return function.value(point),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return functionValueAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use checkNotNull
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:15.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:15.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:15.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return function.value(point),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: use checkNotNull

23:59:18.033 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:18.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:18.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:20.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:20.578 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:20.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMax = max,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:23.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:23.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:23.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchStart = startValue,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchMax = max,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:25.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:25.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:25.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: function = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchStart = startValue,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:28.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:28.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:28.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: function = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

23:59:31.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:31.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:31.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.resetCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:33.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:33.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:33.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.resetCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchStart = startValue,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

23:59:36.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:36.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:36.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.resetCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:38.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:38.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:38.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.resetCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: function = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:41.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:41.233 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:41.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: function = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

23:59:43.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:43.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:43.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:45.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:45.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:45.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return doSolve(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: function = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

23:59:48.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:48.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:48.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return doSolve(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:50.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:50.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:50.550 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return doSolve(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.resetCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

23:59:53.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:53.148 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:53.149 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min))),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.resetCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

23:59:55.726 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:55.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:55.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min))),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

23:59:58.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
23:59:58.018 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
23:59:58.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min))),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:00.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:00.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:00.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.resetCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:03.049 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:03.049 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:03.050 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:05.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:05.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:05.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min))),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:08.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:08.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:08.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return doSolve(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:10.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:10.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:10.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min))),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:12.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:12.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:12.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:15.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:15.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:15.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:18.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:18.041 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:18.042 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return doSolve(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:20.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:20.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:20.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:23.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:23.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:23.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:25.909 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:25.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:25.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:28.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:28.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:28.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:30.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:30.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:30.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:32.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:32.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:32.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:34.301 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:34.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:34.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:36.895 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:36.895 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:36.896 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(lower, initial, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:39.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:39.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:39.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(lower, initial, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:41.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:41.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:41.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(lower, initial, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:43.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:43.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:43.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(lower, initial, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:45.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:45.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:45.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:48.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:48.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:48.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:50.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:50.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:50.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(lower, initial, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:53.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:53.176 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:53.177 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:55.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:55.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:55.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.incrementCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:00:57.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:57.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:57.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.incrementCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:00:59.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:00:59.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:00:59.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.incrementCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(lower, initial, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:01:01.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:01.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:01.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: evaluations.incrementCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:01:03.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:03.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:03.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:01:05.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:05.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:05.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:01:07.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:07.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:07.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:01:10.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:10.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:10.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.incrementCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:13.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:13.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:13.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:01:15.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:15.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:15.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min)), allowedSolution),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:17.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:17.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:17.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min)), allowedSolution),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:20.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:20.276 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:20.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this.allowed = allowedSolution,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:22.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:22.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:22.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this.allowed = allowedSolution,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min)), allowedSolution),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:24.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:24.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:24.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min)), allowedSolution),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:27.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:27.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:27.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:01:29.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:29.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:29.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:32.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:32.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:32.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, startValue, org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:34.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:34.517 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:34.518 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, startValue, org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = allowedSolution,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:36.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:36.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:36.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double x0 = getMin(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min)), allowedSolution),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:01:39.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:39.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:39.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double x0 = getMin(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:41.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:41.813 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:41.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double x0 = getMin(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:44.226 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:44.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:44.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:01:46.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:46.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:46.637 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:01:48.790 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:48.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:48.791 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x0 = getMin(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:50.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:50.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:50.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:01:52.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:52.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:52.787 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x0 = getMin(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:01:55.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:55.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:55.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:01:57.614 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:57.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:57.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:01:59.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:01:59.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:01:59.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = allowedSolution,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:02:01.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:01.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:01.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min)), allowedSolution),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:02:03.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:03.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:03.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:05.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:05.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:05.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x0,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:07.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:07.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:07.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x0,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x0 = getMin(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:09.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:09.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:09.985 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x0,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:02:12.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:12.090 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:12.091 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x0,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:14.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:14.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:14.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f0 == 0.0) {
	return x0;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:17.062 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:17.062 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:17.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f0 == 0.0) {
	return x0;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:02:19.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:19.479 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:19.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f0 == 0.0) {
	return x0;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:02:21.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:21.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:21.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f0 == 0.0) {
	return x0;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return x0,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:24.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:24.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:24.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x1,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:26.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:26.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:26.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x1,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:02:29.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:29.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:29.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x1,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (f0 == 0.0) {
	return x0;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:02:31.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:31.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:31.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x1,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:34.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:34.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:34.207 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f1 == 0.0) {
	return x1;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:02:36.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:36.246 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:36.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f1 == 0.0) {
	return x1;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:02:38.226 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:38.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:38.227 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f1 == 0.0) {
	return x1;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (f0 == 0.0) {
	return x0;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:02:40.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:40.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:40.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f1 == 0.0) {
	return x1;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return x1,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:42.598 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:42.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:42.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: verifyBracketing(x0, x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:02:45.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:45.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:45.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: verifyBracketing(x0, x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min)), allowedSolution),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:47.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:47.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:47.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: verifyBracketing(x0, x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:02:50.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:50.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:50.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: verifyBracketing(x0, x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:52.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:52.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:52.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double ftol = getFunctionValueAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:02:55.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:55.106 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:55.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double ftol = getFunctionValueAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:02:57.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:02:57.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:02:57.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double ftol = getFunctionValueAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:03:00.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:00.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:00.186 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double ftol = getFunctionValueAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyBracketing(x0, x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:03:02.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:02.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:02.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:03:05.305 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:05.306 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:05.307 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:03:07.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:07.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:07.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyBracketing(x0, x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:03:10.291 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:10.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:10.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double ftol = getFunctionValueAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:12.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:12.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:12.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x0,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:03:14.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:14.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:14.624 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, startValue, org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:03:17.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:17.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:17.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = allowedSolution,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:03:19.667 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:19.667 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:19.668 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:03:22.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:22.218 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:22.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:03:24.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:24.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:24.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double ftol = getFunctionValueAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:03:27.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:27.018 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:27.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:03:29.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:29.491 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:29.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min))),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:03:31.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:31.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:31.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:03:34.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:34.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:34.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:36.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:36.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:36.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:39.021 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:39.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:39.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.incrementCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:41.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:41.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:41.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:44.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:44.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:44.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(lower, initial, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:46.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:46.511 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:46.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:48.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:48.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:48.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:50.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:50.821 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:50.822 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return doSolve(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:53.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:53.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:53.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchMax = max,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:55.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:55.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:55.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:03:57.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:57.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:57.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x0,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use checkNotNull
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:03:59.821 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:03:59.821 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:03:59.822 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, startValue, org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use checkNotNull
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:04:01.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:01.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:01.830 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = allowedSolution,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use checkNotNull
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:04:03.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:03.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:03.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use checkNotNull
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:04:06.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:06.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:06.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use checkNotNull
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:04:08.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:08.866 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:08.867 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min))),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: use checkNotNull
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:04:10.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:10.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:10.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:12.804 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:12.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:12.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f0 == 0.0) {
	return x0;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:14.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:14.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:14.799 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x1,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:17.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:17.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:17.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (f1 == 0.0) {
	return x1;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:19.814 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:19.815 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:19.816 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:21.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:21.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:21.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:23.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:23.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:23.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double x0 = getMin(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:25.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:25.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:25.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:28.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:28.276 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:28.277 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:04:30.849 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:30.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:30.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f1 = computeObjectiveValue(x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:04:33.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:33.431 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:33.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyBracketing(x0, x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:04:35.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:35.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:35.953 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:37.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:37.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:37.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: function = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:40.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:40.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:40.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchMax = max,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:43.214 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:43.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:43.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:45.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:45.700 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:45.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return functionDerivative.value(point),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:47.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:47.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:47.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: functionDerivative = f.derivative(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:49.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:49.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:49.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: polynomialFunction = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:52.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:52.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:52.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return polynomialFunction.getCoefficients(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:54.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:54.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:54.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_RELATIVE_ACCURACY, 
absoluteAccuracy, 
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_FUNCTION_VALUE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:56.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:56.935 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:56.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(relativeAccuracy, 
absoluteAccuracy, 
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_FUNCTION_VALUE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:04:58.990 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:04:58.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:04:58.991 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.absoluteAccuracy = absoluteAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:05:01.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:01.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:01.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.relativeAccuracy = relativeAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:05:03.533 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:03.534 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:03.535 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.functionValueAccuracy = functionValueAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:05:05.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:05.935 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:05.936 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return evaluations.getMaximalCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:05:08.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:08.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:08.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return searchMin,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:05:10.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:10.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:10.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return relativeAccuracy,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:05:13.616 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:13.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:13.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return function.value(point),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: use checkNotNull

00:05:16.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:16.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:16.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: searchMin = min,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:18.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:18.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:18.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: boolean inverted = false,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double rtol = getRelativeAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:21.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:21.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:21.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: boolean inverted = false,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:05:23.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:23.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:23.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:05:26.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:26.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:26.033 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:05:28.402 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:28.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:28.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:30.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:30.885 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:30.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: boolean inverted = false,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:33.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:33.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:33.445 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double rtol = getRelativeAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:35.952 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:35.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:35.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (fx == 0.0) {
	return x;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: boolean inverted = false,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:38.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:38.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:38.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (fx == 0.0) {
	return x;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double rtol = getRelativeAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:05:41.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:41.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:41.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (fx == 0.0) {
	return x;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:43.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:43.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:43.480 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: boolean inverted = false,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:05:45.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:45.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:45.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:05:48.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:48.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:48.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:50.803 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:50.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:50.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f0 = f1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: boolean inverted = false,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:05:53.212 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:53.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:53.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f0 = f1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:55.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:55.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:55.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f0 = f1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:05:58.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:05:58.295 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:05:58.296 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: inverted = !inverted,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:06:00.804 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:00.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:00.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: inverted = !inverted,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:03.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:03.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:03.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: inverted = !inverted,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f0 = f1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:05.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:05.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:05.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.ConvergenceException(),commit: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
}, sim: 0.172964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:07.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:07.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:07.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.ConvergenceException(),commit: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
}, sim: 0.172964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double rtol = getRelativeAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:06:09.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:09.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:09.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.ConvergenceException(),commit: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
}, sim: 0.172964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (fx == 0.0) {
	return x;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:12.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:12.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:12.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:06:14.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:14.759 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:14.760 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:06:17.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:17.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:17.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:19.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:19.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:19.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).

00:06:22.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:22.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:22.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.ConvergenceException(),commit: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
}, sim: 0.172964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:24.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:24.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:24.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: boolean inverted = false,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:27.229 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:27.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:27.231 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double rtol = getRelativeAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:29.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:29.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:29.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: x1 = x,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:06:32.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:32.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:32.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: x1 = x,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-631 Work around infinite loop.

00:06:34.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:34.640 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:34.641 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: x1 = x,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:37.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:37.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:37.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x0 = x1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:06:39.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:39.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:39.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-631 Work around infinite loop.

00:06:42.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:42.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:42.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x1 = x,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:44.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:44.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:44.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		if (inverted) {
			return x1;
		}
		break;
	case RIGHT_SIDE :
		if (!inverted) {
			return x1;
		}
		break;
	case BELOW_SIDE :
		if (f1 <= 0) {
			return x1;
		}
		break;
	case ABOVE_SIDE :
		if (f1 >= 0) {
			return x1;
		}
		break;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f0 = f1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-631 Work around infinite loop.

00:06:47.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:47.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:47.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		if (inverted) {
			return x1;
		}
		break;
	case RIGHT_SIDE :
		if (!inverted) {
			return x1;
		}
		break;
	case BELOW_SIDE :
		if (f1 <= 0) {
			return x1;
		}
		break;
	case ABOVE_SIDE :
		if (f1 >= 0) {
			return x1;
		}
		break;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-631 Work around infinite loop.

00:06:49.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:49.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:49.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		if (inverted) {
			return x1;
		}
		break;
	case RIGHT_SIDE :
		if (!inverted) {
			return x1;
		}
		break;
	case BELOW_SIDE :
		if (f1 <= 0) {
			return x1;
		}
		break;
	case ABOVE_SIDE :
		if (f1 >= 0) {
			return x1;
		}
		break;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:51.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:51.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:51.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			if (inverted) {
				return x1;
			}
			break;
		case RIGHT_SIDE :
			if (!inverted) {
				return x1;
			}
			break;
		case BELOW_SIDE :
			if (f1 <= 0) {
				return x1;
			}
			break;
		case ABOVE_SIDE :
			if (f1 >= 0) {
				return x1;
			}
			break;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f0 = f1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-631 Work around infinite loop.

00:06:54.350 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:54.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:54.353 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			if (inverted) {
				return x1;
			}
			break;
		case RIGHT_SIDE :
			if (!inverted) {
				return x1;
			}
			break;
		case BELOW_SIDE :
			if (f1 <= 0) {
				return x1;
			}
			break;
		case ABOVE_SIDE :
			if (f1 >= 0) {
				return x1;
			}
			break;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:06:56.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:56.813 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:56.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			if (inverted) {
				return x1;
			}
			break;
		case RIGHT_SIDE :
			if (!inverted) {
				return x1;
			}
			break;
		case BELOW_SIDE :
			if (f1 <= 0) {
				return x1;
			}
			break;
		case ABOVE_SIDE :
			if (f1 >= 0) {
				return x1;
			}
			break;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:06:59.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:06:59.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:06:59.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			if (inverted) {
				return x1;
			}
			break;
		case RIGHT_SIDE :
			if (!inverted) {
				return x1;
			}
			break;
		case BELOW_SIDE :
			if (f1 <= 0) {
				return x1;
			}
			break;
		case ABOVE_SIDE :
			if (f1 >= 0) {
				return x1;
			}
			break;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: inverted = !inverted,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:07:01.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:01.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:01.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: inverted = !inverted,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-631 Work around infinite loop.

00:07:03.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:03.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:03.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-631 Work around infinite loop.

00:07:05.965 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:05.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:05.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: fixed checkstyle warnings

00:07:07.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:07.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:07.930 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		if (inverted) {
			return x1;
		}
		break;
	case RIGHT_SIDE :
		if (!inverted) {
			return x1;
		}
		break;
	case BELOW_SIDE :
		if (f1 <= 0) {
			return x1;
		}
		break;
	case ABOVE_SIDE :
		if (f1 >= 0) {
			return x1;
		}
		break;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:07:09.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:09.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:09.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {

	final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
	final double fx = computeObjectiveValue(x);




	if (fx == 0.0) {
		return x;
	}


	if ((f1 * fx) < 0) {


		x0 = x1;
		f0 = f1;
		inverted = !inverted;
	} else {
		switch (method) {
			case ILLINOIS :
				f0 *= 0.5;
				break;
			case PEGASUS :
				f0 *= f1 / (f1 + fx);
				break;
			case REGULA_FALSI :


				if (x == x1) {
					throw new org.apache.commons.math.exception.ConvergenceException();
				}
				break;
			default :

				throw new org.apache.commons.math.exception.MathInternalError();}

	}

	x1 = x;
	f1 = fx;




	if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				if (inverted) {
					return x1;
				}
				break;
			case RIGHT_SIDE :
				if (!inverted) {
					return x1;
				}
				break;
			case BELOW_SIDE :
				if (f1 <= 0) {
					return x1;
				}
				break;
			case ABOVE_SIDE :
				if (f1 >= 0) {
					return x1;
				}
				break;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}



	if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
	atol)) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				return inverted ? x1 : x0;
			case RIGHT_SIDE :
				return inverted ? x0 : x1;
			case BELOW_SIDE :
				return f1 <= 0 ? x1 : x0;
			case ABOVE_SIDE :
				return f1 >= 0 ? x1 : x0;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}
} ,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:07:12.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:12.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:12.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: while (true) {

	final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
	final double fx = computeObjectiveValue(x);




	if (fx == 0.0) {
		return x;
	}


	if ((f1 * fx) < 0) {


		x0 = x1;
		f0 = f1;
		inverted = !inverted;
	} else {
		switch (method) {
			case ILLINOIS :
				f0 *= 0.5;
				break;
			case PEGASUS :
				f0 *= f1 / (f1 + fx);
				break;
			case REGULA_FALSI :


				if (x == x1) {
					throw new org.apache.commons.math.exception.ConvergenceException();
				}
				break;
			default :

				throw new org.apache.commons.math.exception.MathInternalError();}

	}

	x1 = x;
	f1 = fx;




	if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				if (inverted) {
					return x1;
				}
				break;
			case RIGHT_SIDE :
				if (!inverted) {
					return x1;
				}
				break;
			case BELOW_SIDE :
				if (f1 <= 0) {
					return x1;
				}
				break;
			case ABOVE_SIDE :
				if (f1 >= 0) {
					return x1;
				}
				break;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}



	if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
	atol)) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				return inverted ? x1 : x0;
			case RIGHT_SIDE :
				return inverted ? x0 : x1;
			case BELOW_SIDE :
				return f1 <= 0 ? x1 : x0;
			case ABOVE_SIDE :
				return f1 >= 0 ? x1 : x0;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}
} ,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:14.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:14.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:14.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double min = getMin(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:17.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:17.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:17.091 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double max = getMax(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double min = getMin(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:19.139 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:19.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:19.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: verifyInterval(min, max),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double max = getMax(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:21.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:21.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:21.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double absoluteAccuracy = getAbsoluteAccuracy(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyInterval(min, max),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:23.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:23.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:23.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double absoluteAccuracy = getAbsoluteAccuracy(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:26.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:26.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:26.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double min = getMin(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:07:28.662 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:28.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:28.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: while (true) {

	final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
	final double fx = computeObjectiveValue(x);




	if (fx == 0.0) {
		return x;
	}


	if ((f1 * fx) < 0) {


		x0 = x1;
		f0 = f1;
		inverted = !inverted;
	} else {
		switch (method) {
			case ILLINOIS :
				f0 *= 0.5;
				break;
			case PEGASUS :
				f0 *= f1 / (f1 + fx);
				break;
			case REGULA_FALSI :


				if (x == x1) {
					throw new org.apache.commons.math.exception.ConvergenceException();
				}
				break;
			default :

				throw new org.apache.commons.math.exception.MathInternalError();}

	}

	x1 = x;
	f1 = fx;




	if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				if (inverted) {
					return x1;
				}
				break;
			case RIGHT_SIDE :
				if (!inverted) {
					return x1;
				}
				break;
			case BELOW_SIDE :
				if (f1 <= 0) {
					return x1;
				}
				break;
			case ABOVE_SIDE :
				if (f1 >= 0) {
					return x1;
				}
				break;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}



	if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
	atol)) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				return inverted ? x1 : x0;
			case RIGHT_SIDE :
				return inverted ? x0 : x1;
			case BELOW_SIDE :
				return f1 <= 0 ? x1 : x0;
			case ABOVE_SIDE :
				return f1 >= 0 ? x1 : x0;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}
} ,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:30.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:30.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:30.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:33.416 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:33.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:33.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double fm,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double min = getMin(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:07:36.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:36.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:36.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double fm,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:38.049 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:38.049 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:38.050 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double fm,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:40.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:40.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:40.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double fmin,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:07:42.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:42.640 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:42.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double fmin,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:07:44.607 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:44.607 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:44.608 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double fmin,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double fm,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:46.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:46.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:46.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max),commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:07:49.323 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:49.323 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:49.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max),commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:07:51.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:51.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:51.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max),commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double fmin,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:07:54.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:54.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:54.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: fmin = computeObjectiveValue(min),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max),commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:56.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:56.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:56.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: fmin = computeObjectiveValue(min),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double max = getMax(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:07:59.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:07:59.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:07:59.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: fmin = computeObjectiveValue(min),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double absoluteAccuracy = getAbsoluteAccuracy(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:01.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:01.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:01.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: fm = computeObjectiveValue(m),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:04.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:04.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:04.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: fm = computeObjectiveValue(m),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyInterval(min, max),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:06.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:06.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:06.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: fm = computeObjectiveValue(m),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: fmin = computeObjectiveValue(min),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:09.351 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:09.351 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:09.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: min = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:11.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:11.887 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:11.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: min = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double fm,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:14.350 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:14.350 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:14.351 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: min = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max),commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:16.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:16.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:16.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:19.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:19.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:19.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double fm,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:21.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:21.572 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:21.573 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max),commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:24.042 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:24.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:24.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: min = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:26.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:26.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:26.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:29.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:29.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:29.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyInterval(min, max),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:31.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:31.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:31.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: fmin = computeObjectiveValue(min),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:34.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:34.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:34.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: fm = computeObjectiveValue(m),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:08:37.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:37.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:37.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:39.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:39.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:39.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double fmin,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:42.317 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:42.317 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:42.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: min = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:08:44.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:44.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:44.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:08:47.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:47.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:47.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:08:49.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:49.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:49.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (fx == 0.0) {
	return x;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:08:52.172 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:52.172 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:52.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:08:54.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:54.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:54.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f0 = f1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: fixed checkstyle warnings

00:08:57.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:57.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:57.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		if (inverted) {
			return x1;
		}
		break;
	case RIGHT_SIDE :
		if (!inverted) {
			return x1;
		}
		break;
	case BELOW_SIDE :
		if (f1 <= 0) {
			return x1;
		}
		break;
	case ABOVE_SIDE :
		if (f1 >= 0) {
			return x1;
		}
		break;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:08:59.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:08:59.407 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:08:59.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:09:01.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:01.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:01.730 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			if (inverted) {
				return x1;
			}
			break;
		case RIGHT_SIDE :
			if (!inverted) {
				return x1;
			}
			break;
		case BELOW_SIDE :
			if (f1 <= 0) {
				return x1;
			}
			break;
		case ABOVE_SIDE :
			if (f1 >= 0) {
				return x1;
			}
			break;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:09:04.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:04.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:04.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
atol)) {
	switch (allowed) {
		case ANY_SIDE :
			return x1;
		case LEFT_SIDE :
			return inverted ? x1 : x0;
		case RIGHT_SIDE :
			return inverted ? x0 : x1;
		case BELOW_SIDE :
			return f1 <= 0 ? x1 : x0;
		case ABOVE_SIDE :
			return f1 >= 0 ? x1 : x0;
		default :
			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:09:06.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:06.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:06.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:09:08.622 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:08.622 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:08.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {

	final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
	final double fx = computeObjectiveValue(x);




	if (fx == 0.0) {
		return x;
	}


	if ((f1 * fx) < 0) {


		x0 = x1;
		f0 = f1;
		inverted = !inverted;
	} else {
		switch (method) {
			case ILLINOIS :
				f0 *= 0.5;
				break;
			case PEGASUS :
				f0 *= f1 / (f1 + fx);
				break;
			case REGULA_FALSI :


				if (x == x1) {
					throw new org.apache.commons.math.exception.ConvergenceException();
				}
				break;
			default :

				throw new org.apache.commons.math.exception.MathInternalError();}

	}

	x1 = x;
	f1 = fx;




	if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				if (inverted) {
					return x1;
				}
				break;
			case RIGHT_SIDE :
				if (!inverted) {
					return x1;
				}
				break;
			case BELOW_SIDE :
				if (f1 <= 0) {
					return x1;
				}
				break;
			case ABOVE_SIDE :
				if (f1 >= 0) {
					return x1;
				}
				break;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}



	if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
	atol)) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				return inverted ? x1 : x0;
			case RIGHT_SIDE :
				return inverted ? x0 : x1;
			case BELOW_SIDE :
				return f1 <= 0 ? x1 : x0;
			case ABOVE_SIDE :
				return f1 >= 0 ? x1 : x0;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}
} ,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:09:10.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:10.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:10.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:09:12.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:12.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:12.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-631 Work around infinite loop.

00:09:15.241 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:15.241 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:15.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-631 Work around infinite loop.

00:09:17.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:17.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:17.787 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double fm,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-631 Work around infinite loop.

00:09:20.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:20.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:20.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double fmin,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-631 Work around infinite loop.

00:09:22.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:22.511 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:22.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max),commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-631 Work around infinite loop.

00:09:24.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:24.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:24.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: min = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-631 Work around infinite loop.

00:09:27.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:27.364 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:27.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-631 Work around infinite loop.

00:09:29.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:29.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:29.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-631 Work around infinite loop.

00:09:32.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:32.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:32.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-631 Work around infinite loop.

00:09:34.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:34.885 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:34.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: double min = getMin(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:09:37.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:37.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:37.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double max = getMax(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:09:39.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:39.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:39.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyInterval(min, max),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:09:42.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:42.096 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:42.097 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: fmin = computeObjectiveValue(min),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:09:44.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:44.557 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:44.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

00:09:46.967 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:46.967 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:46.968 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:09:49.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:49.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:49.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

00:09:51.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:51.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:51.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.

00:09:53.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:53.912 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:53.913 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[2], 0.0, 1)) {

	return x[2];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.Precision.equals(y[0], 0.0, 1)) {

	return x[0];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.

00:09:55.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:55.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:55.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[0], 0.0, 1)) {

	return x[0];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

00:09:57.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:57.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:57.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[0], 0.0, 1)) {

	return x[0];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:09:59.809 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:09:59.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:09:59.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[2], 0.0, 1)) {

	return x[2];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375

00:10:02.095 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:02.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:02.097 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[2], 0.0, 1)) {

	return x[2];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:10:04.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:04.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:04.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:10:06.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:06.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:06.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (fx == 0.0) {
	return x;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:10:09.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:09.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:09.189 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:10:11.630 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:11.630 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:11.631 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f0 = f1,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:10:14.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:14.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:14.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double fm,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:10:16.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:16.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:16.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: while (true) {

	final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
	final double fx = computeObjectiveValue(x);




	if (fx == 0.0) {
		return x;
	}


	if ((f1 * fx) < 0) {


		x0 = x1;
		f0 = f1;
		inverted = !inverted;
	} else {
		switch (method) {
			case ILLINOIS :
				f0 *= 0.5;
				break;
			case PEGASUS :
				f0 *= f1 / (f1 + fx);
				break;
			case REGULA_FALSI :


				if (x == x1) {
					throw new org.apache.commons.math.exception.ConvergenceException();
				}
				break;
			default :

				throw new org.apache.commons.math.exception.MathInternalError();}

	}

	x1 = x;
	f1 = fx;




	if (org.apache.commons.math.util.FastMath.abs(f1) <= ftol) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				if (inverted) {
					return x1;
				}
				break;
			case RIGHT_SIDE :
				if (!inverted) {
					return x1;
				}
				break;
			case BELOW_SIDE :
				if (f1 <= 0) {
					return x1;
				}
				break;
			case ABOVE_SIDE :
				if (f1 >= 0) {
					return x1;
				}
				break;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}



	if (org.apache.commons.math.util.FastMath.abs(x1 - x0) < org.apache.commons.math.util.FastMath.max(rtol * org.apache.commons.math.util.FastMath.abs(x1), 
	atol)) {
		switch (allowed) {
			case ANY_SIDE :
				return x1;
			case LEFT_SIDE :
				return inverted ? x1 : x0;
			case RIGHT_SIDE :
				return inverted ? x0 : x1;
			case BELOW_SIDE :
				return f1 <= 0 ? x1 : x0;
			case ABOVE_SIDE :
				return f1 >= 0 ? x1 : x0;
			default :
				throw new org.apache.commons.math.exception.MathInternalError();}

	}
} ,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:10:18.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:18.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:18.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:10:21.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:21.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:21.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.Precision.equals(y[1], 0.0, 1)) {

	return x[1];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.

00:10:23.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:23.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:23.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (org.apache.commons.math.util.Precision.equals(y[2], 0.0, 1)) {

	return x[2];
},commit: MATH-689 Moved "equals..." and "compareTo" methods from "MathUtils" over to a new "Precision" class.
}, sim: 0.094184
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:25.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:25.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:25.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: fixed checkstyle warnings

00:10:28.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:28.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:28.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		if (inverted) {
			return x1;
		}
		break;
	case RIGHT_SIDE :
		if (!inverted) {
			return x1;
		}
		break;
	case BELOW_SIDE :
		if (f1 <= 0) {
			return x1;
		}
		break;
	case ABOVE_SIDE :
		if (f1 >= 0) {
			return x1;
		}
		break;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-631 Work around infinite loop.

00:10:31.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:31.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:31.065 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-631 Work around infinite loop.

00:10:33.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:33.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:33.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: x1 = x,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-631 Work around infinite loop.

00:10:35.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:35.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:35.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:38.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:38.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:38.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:40.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:40.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:40.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:42.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:42.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:42.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: fm = computeObjectiveValue(m),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:45.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:45.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:45.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: fmin = computeObjectiveValue(min),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:47.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:47.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:47.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double absoluteAccuracy = getAbsoluteAccuracy(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:50.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:50.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:50.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyInterval(min, max),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:52.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:52.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:52.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double max = getMax(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:54.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:54.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:54.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double min = getMin(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:10:57.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:57.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:57.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:10:59.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:10:59.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:10:59.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:11:02.119 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:02.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:02.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:11:04.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:04.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:04.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max),commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:11:06.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:06.973 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:06.974 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double fx = computeObjectiveValue(x),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:11:09.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:09.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:09.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	return m;
},commit: added FastMath and used it everywhere in replacement of java.util.Math the unit tests have not been added yet (waiting for dfp library addition) JIRA: MATH-375
}, sim: 0.076201
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:11:11.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:11.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:11.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return x0,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:11:14.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:14.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:14.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (f0 == 0.0) {
	return x0;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Added brackets around single-statement conditional branches.

00:11:16.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:16.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:16.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if (f1 == 0.0) {
	return x1;
},commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:11:18.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:18.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:18.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x1 = getMax(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:11:20.900 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:20.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:20.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Added brackets around single-statement conditional branches.
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:11:23.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:23.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:23.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return x,commit: MATH-599 Added brackets around single-statement conditional branches.
}, sim: 0.208056
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
, ingredientB: MATH-631 Work around infinite loop.

00:11:25.545 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:25.545 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:25.546 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, startValue, org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
, ingredientB: fixed checkstyle warnings

00:11:27.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:27.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:27.627 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return solve(maxEval, f, min, max, startValue, org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:11:30.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:30.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:30.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = allowedSolution,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:11:32.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:32.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:32.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min)), allowedSolution),commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".

00:11:34.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:34.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:34.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.allowed = org.apache.commons.math.analysis.solvers.AllowedSolution.ANY_SIDE,commit: MATH-599 Renamed "AllowedSolutions" to "AllowedSolution".
}, sim: -0.252702
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: use checkNotNull

00:11:36.973 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:36.974 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:36.975 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		return inverted ? x1 : x0;
	case RIGHT_SIDE :
		return inverted ? x0 : x1;
	case BELOW_SIDE :
		return f1 <= 0 ? x1 : x0;
	case ABOVE_SIDE :
		return f1 >= 0 ? x1 : x0;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: fixed checkstyle warnings
, ingredientB: use checkNotNull

00:11:39.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:39.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:39.164 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (allowed) {
	case ANY_SIDE :
		return x1;
	case LEFT_SIDE :
		if (inverted) {
			return x1;
		}
		break;
	case RIGHT_SIDE :
		if (!inverted) {
			return x1;
		}
		break;
	case BELOW_SIDE :
		if (f1 <= 0) {
			return x1;
		}
		break;
	case ABOVE_SIDE :
		if (f1 >= 0) {
			return x1;
		}
		break;
	default :
		throw new org.apache.commons.math.exception.MathInternalError();},commit: fixed checkstyle warnings
}, sim: -0.241811
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: use checkNotNull

00:11:41.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:41.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:41.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.util.MathUtils.checkNotNull(f),commit: use checkNotNull
}, sim: -0.071577
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:11:43.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:43.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:43.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, java.lang.Double.NaN, java.lang.Double.NaN, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:11:46.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:46.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:46.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return solve(maxEval, f, min, max, min + (0.5 * (max - min))),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:11:48.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:48.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:48.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: setup(maxEval, f, min, max, startValue),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.

00:11:50.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:50.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:50.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.setMaximalCount(maxEval),commit: MATH-451 In solvers, the maximum number of evaluations is passed as a parameter to the method "solve". The "setMaxEvaluations" accessor is removed.
}, sim: -0.057939
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:11:52.062 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:52.062 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:52.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: f1 = fx,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:11:54.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:54.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:54.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: x1 = x,commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-631 Work around infinite loop.
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:11:56.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:56.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:56.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: switch (method) {
	case ILLINOIS :
		f0 *= 0.5;
		break;
	case PEGASUS :
		f0 *= f1 / (f1 + fx);
		break;
	case REGULA_FALSI :


		if (x == x1) {
			throw new org.apache.commons.math.exception.ConvergenceException();
		}
		break;
	default :

		throw new org.apache.commons.math.exception.MathInternalError();},commit: MATH-631 Work around infinite loop.
}, sim: -0.030619
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:11:58.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:11:58.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:11:58.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: while (true) {
	m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
	fmin = computeObjectiveValue(min);
	fm = computeObjectiveValue(m);

	if ((fm * fmin) > 0) {

		min = m;
	} else {

		max = m;
	}

	if (org.apache.commons.math.util.FastMath.abs(max - min) <= absoluteAccuracy) {
		m = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.midpoint(min, max);
		return m;
	}
} ,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:00.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:00.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:00.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((fm * fmin) > 0) {

	min = m;
} else {

	max = m;
},commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:03.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:03.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:03.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: fm = computeObjectiveValue(m),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:05.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:05.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:05.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: fmin = computeObjectiveValue(min),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:08.287 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:08.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:08.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double absoluteAccuracy = getAbsoluteAccuracy(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:10.913 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:10.914 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:10.914 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: verifyInterval(min, max),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:13.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:13.102 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:13.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double max = getMax(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:15.740 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:15.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:15.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double min = getMin(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:12:18.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:18.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:18.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:20.473 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:20.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:20.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: throw new org.apache.commons.math.exception.TooManyEvaluationsException(e.getMax()),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(org.apache.commons.math.analysis.solvers.BisectionSolver.DEFAULT_ABSOLUTE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:22.992 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:22.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:22.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.incrementCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:25.413 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:25.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:25.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:27.570 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:27.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:27.571 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifySequence(lower, initial, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:30.169 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:30.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:30.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.verifyInterval(lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:32.525 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:32.525 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:32.526 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isSequence(start, mid, end),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:34.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:34.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:34.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.isBracketing(function, lower, upper),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:37.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:37.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:37.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return doSolve(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:39.707 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:39.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:39.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: evaluations.resetCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:42.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:42.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:42.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: function = f,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:44.411 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:44.411 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:44.412 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchStart = startValue,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:46.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:46.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:46.605 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: searchMax = max,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:49.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:49.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:49.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return function.value(point),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:51.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:51.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:51.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return searchStart,commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:54.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:54.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:54.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this(relativeAccuracy, 
absoluteAccuracy, 
org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver.DEFAULT_FUNCTION_VALUE_ACCURACY),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:12:56.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:56.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:56.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double ftol = getFunctionValueAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:12:58.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:12:58.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:12:58.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: functionDerivative = f.derivative(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).

00:13:00.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:00.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:00.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: incrementEvaluationCount(),commit: MATH-439 Refactored the "solvers" package. Implementations refer to number of evaluation of the objective function (instead of the number of iterations). New interfaces and base classes. "NewtonSolver" fits in the design without resorting to a cast. Created class "MullerSolver2" to contain the code of the method named "solve2" in class "MullerSolver". Removed "UnivariateRealSolverFactory" and "UnivariateRealSolverFactoryImpl". Default solver in "UnivariateRealSolverUtils" is explicitely instantiated. "AbstractContinuousDistribution": Type of exception thrown changed in "UnivariateRealSolverUtils". Factored out duplicate code (in "GaussNewtonOptimizerTest" and "LevenbergMarquardtOptimizerTest"): class "Circle" is now called "CircleVectorial". Also factored out the "Circle" class from "NonLinearConjugateGradientOptimizerTest": class is named "CircleScalar". Created "SecantSolverTest", moving there all the tests for the class "SecantSolver" that were located in class "BrentSolverTest". Created new interface and base class for polynomial functions solvers ("LaguerreSolver") so that the function type is now checked at compile time. Removed deprecated exceptions (MATH-441). Javadoc clean-up. Lowered tolerance values in some unit tests. Tests upgraded to Junit 4 (MATH-423).
}, sim: 0.055864
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: moved main java directory for compliance with maven standard directory layout
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:13:03.029 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:03.029 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:03.030 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:13:05.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:05.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:05.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: max = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:13:07.570 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:07.571 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:07.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: min = m,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: moved main java directory for compliance with maven standard directory layout

00:13:09.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:09.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:09.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double fmin,commit: moved main java directory for compliance with maven standard directory layout
}, sim: 0.067520
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.

00:13:12.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:12.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:12.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)),commit: Added BELOW_SIDE and ABOVE_SIDE in the possible allowed solutions for bracketing solvers.
}, sim: 0.069153
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:13:14.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:14.347 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:14.348 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: inverted = !inverted,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:13:16.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:16.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:16.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double rtol = getRelativeAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).

00:13:18.990 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:18.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:18.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.ConvergenceException(),commit: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
}, sim: 0.172964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:13:21.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:21.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:21.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: final double atol = getAbsoluteAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:13:23.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:23.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:23.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: final double ftol = getFunctionValueAccuracy(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:13:25.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:25.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:25.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: verifyBracketing(x0, x1),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:13:28.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:28.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:28.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double f0 = computeObjectiveValue(x0),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: Separate implementation of secant solver from bracketing solvers.

00:13:30.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:30.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:30.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:13:32.409 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:32.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:32.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: double x0 = getMin(),commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".

00:13:34.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:34.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:34.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: if ((f1 * fx) < 0) {


	x0 = x1;
	f0 = f1;
	inverted = !inverted;
} else {
	switch (method) {
		case ILLINOIS :
			f0 *= 0.5;
			break;
		case PEGASUS :
			f0 *= f1 / (f1 + fx);
			break;
		case REGULA_FALSI :


			if (x == x1) {
				throw new org.apache.commons.math.exception.ConvergenceException();
			}
			break;
		default :

			throw new org.apache.commons.math.exception.MathInternalError();}

},commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: this.method = method,commit: MATH-599 Inserted "BaseBracketedSecantSolver" into the secant-based solvers hierarchy. Renamed "SecantBase" to "BaseSecantSolver".
}, sim: 0.096210
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Separate implementation of secant solver from bracketing solvers.
, ingredientB: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).

00:13:36.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:13:36.789 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:13:36.790 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingA: {code: return super.solve(maxEval, f, min, max, startValue),commit: Separate implementation of secant solver from bracketing solvers.
}, sim: 0.129904
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double xTol = getAbsoluteAccuracy() + 
(getRelativeAccuracy() * org.apache.commons.math.util.FastMath.max(org.apache.commons.math.util.FastMath.abs(xA), org.apache.commons.math.util.FastMath.abs(xB))), commit: Added a Brent-like solver that has higher (user specified) order and does bracket selection on the result: BracketingNthOrderBrentSolver.
}, ingB: {code: throw new org.apache.commons.math.exception.ConvergenceException(),commit: MATH-631 Early detection of "Regula Falsi" algorithm being stuck due to finite precision. Javadoc makes it clear that either the Pegasus or the Illinois solver should be preferred over the Regula Falsi one (due to D. Hendriks).
}, sim: 0.172964
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: D4J_Math_40_BUGGY_VERSION
, ingredientB: D4J_Math_40_BUGGY_VERSION

[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 1
org.nd4j.linalg.exception.ND4JIllegalStateException: Text passed for inference has no matches in model vocabulary.
org.nd4j.linalg.exception.ND4JIllegalStateException: Text passed for inference has no matches in model vocabulary.
	at org.deeplearning4j.models.paragraphvectors.ParagraphVectors.inferVector(ParagraphVectors.java:212)
	at org.deeplearning4j.models.paragraphvectors.ParagraphVectors.inferVector(ParagraphVectors.java:293)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:72)
	at java.util.TimSort.binarySort(TimSort.java:296)
	at java.util.TimSort.sort(TimSort.java:239)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 967.014
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 2544.975


Node: fd1f509292f7



Date: Tue Nov 26 00:13:39 EST 2019

cd /script/jGenProg_Defects4J_Math_40;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-40 \
	-failing org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_40/target/classes/:/script/jGenProg_Defects4J_Math_40/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

