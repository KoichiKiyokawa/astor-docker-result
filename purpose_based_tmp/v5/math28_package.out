Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 23:31:13,280 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 23:31:13,284 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 23:31:13,284 main:382 - The compliance of the JVM is:  7
[INFO] 23:31:13,286 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-28  -failing  org.apache.commons.math3.optimization.linear.SimplexSolverTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_28/target/classes/:/script/jGenProg_Defects4J_Math_28/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 23:31:13,292 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_28/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_28/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 652
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_28/./output_astor/AstorMain-Math-28//bin//default from 652 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_28/./output_astor/AstorMain-Math-28//bin//default, /script/jGenProg_Defects4J_Math_28/target/classes/, /script/jGenProg_Defects4J_Math_28/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.JacobianMatricesTest#testParameterizable
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testWikipedia
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testOnePointParabola
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSine
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testQuadratic
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testEmptySample
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testMixedDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSquareRoot
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsFirstDerivative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testDerivativeShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorOnePair
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRank
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMath226
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.LogitTest#testDerivativeLargeArguments
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:3994, fails: 106, GZoltar suspicious 27998, with positive susp 4389
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 3994
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 854 with susp > 0.1, we consider: 854
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 4725580 milliseconds (4725 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_28/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_28/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_28/target/classes/, /script/jGenProg_Defects4J_Math_28/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 587
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 854
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.14569287935358963]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.14569287935358963]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.14569287935358963]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.14569287935358963]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem$Model, methodName=value(D)D, lineNumber=161, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=82, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=83, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=84, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=86, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=95, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=96, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=97, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=99, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=56, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=57, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=76, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=77, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=78, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=79, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=82, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=target()[D, lineNumber=86, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=90, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=91, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=92, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=93, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=96, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=100, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=102, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=103, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=104, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=105, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=108, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=124, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=125, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=126, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=127, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=129, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=130, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=318, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=321, susp=0.13736056394868904]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.1142908976639189]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.1142908976639189]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=77, susp=0.11215443081840887]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.10126355123567275]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 854,  273
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 273
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 273, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_28/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 4725580
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.optimization.linear.SimplexSolverTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-28
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_28/target/classes/:/script/jGenProg_Defects4J_Math_28/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
00:14:40.290 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
00:14:41.768 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
00:14:42.556 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
00:14:42.563 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
00:14:42.563 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
00:14:42.564 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
00:14:43.156 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:14:45.796 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:14:45.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:14:45.805 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:14:48.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:14:48.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:14:48.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] uB = getUpperBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:14:50.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:14:50.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:14:50.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] uB = getUpperBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:14:53.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:14:53.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:14:53.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean hasInfiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:14:55.732 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:14:55.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:14:55.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:14:57.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:14:57.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:14:57.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:14:59.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:14:59.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:14:59.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:15:01.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:15:01.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:15:01.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: int[] idxReverse = org.apache.commons.math3.optimization.direct.CMAESOptimizer.reverse(idxnorms), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasInfiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:17:48.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:17:48.369 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:17:48.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:17:50.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:17:50.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:17:50.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:17:53.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:17:53.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:17:53.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:17:55.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:17:55.188 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:17:55.189 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q2 = quat[2],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:17:57.415 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:17:57.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:17:57.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q3 = quat[3],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:17:59.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:17:59.750 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:17:59.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:18:01.895 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:01.895 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:01.896 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u2 = u3.crossProduct(u1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:18:04.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:04.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:04.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: u1 = u1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:18:06.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:06.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:06.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:18:08.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:08.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:08.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v2 = v3.crossProduct(v1).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:18:10.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:10.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:10.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:18:12.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:12.319 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:12.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:14.256 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:14.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:14.257 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:16.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:16.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:16.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:18.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:18.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:18.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:20.462 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:20.462 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:20.463 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:22.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:22.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:22.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:24.990 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:24.990 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:24.991 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:27.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:27.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:27.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:29.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:29.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:29.223 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[0][0] - ort[1][1]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:31.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:31.287 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:31.288 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:33.365 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:33.365 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:33.366 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:35.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:35.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:35.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[1][2] - ort[2][1]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:37.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:37.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:37.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:39.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:39.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:39.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:41.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:41.817 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:41.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[1][1] - ort[0][0]) - ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:43.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:43.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:43.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:45.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:45.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:45.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:47.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:47.511 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:47.512 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[2][0] - ort[0][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:49.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:49.633 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:49.634 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[0][1] + ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:51.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:51.710 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:51.711 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: s = (ort[2][2] - ort[0][0]) - ort[1][1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:53.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:53.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:53.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: s = (ort[2][2] - ort[0][0]) - ort[1][1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:55.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:55.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:55.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:18:58.150 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:18:58.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:18:58.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[0] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:19:00.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:00.235 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:00.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[1] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[0] = inv * (ort[0][1] - ort[1][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:19:02.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:02.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:02.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[1] = inv * (ort[0][2] + ort[2][0]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:19:04.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:04.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:04.559 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: quat[2] = inv * (ort[2][1] + ort[1][2]),commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:19:06.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:06.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:06.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[1];
	quat[0] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[0][2] + ort[2][0]);
} else {
	s = (ort[1][1] - ort[0][0]) - ort[2][2];
	if (s > (-0.19)) {

		quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[2];
		quat[0] = inv * (ort[2][0] - ort[0][2]);
		quat[1] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[2][1] + ort[1][2]);
	} else {

		s = (ort[2][2] - ort[0][0]) - ort[1][1];
		quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[3];
		quat[0] = inv * (ort[0][1] - ort[1][0]);
		quat[1] = inv * (ort[0][2] + ort[2][0]);
		quat[2] = inv * (ort[2][1] + ort[1][2]);
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[2];
	quat[0] = inv * (ort[2][0] - ort[0][2]);
	quat[1] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[2][1] + ort[1][2]);
} else {

	s = (ort[2][2] - ort[0][0]) - ort[1][1];
	quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[3];
	quat[0] = inv * (ort[0][1] - ort[1][0]);
	quat[1] = inv * (ort[0][2] + ort[2][0]);
	quat[2] = inv * (ort[2][1] + ort[1][2]);
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:19:09.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:09.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:09.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[1];
	quat[0] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[0][1] + ort[1][0]);
	quat[3] = inv * (ort[0][2] + ort[2][0]);
} else {
	s = (ort[1][1] - ort[0][0]) - ort[2][2];
	if (s > (-0.19)) {

		quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[2];
		quat[0] = inv * (ort[2][0] - ort[0][2]);
		quat[1] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[2][1] + ort[1][2]);
	} else {

		s = (ort[2][2] - ort[0][0]) - ort[1][1];
		quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[3];
		quat[0] = inv * (ort[0][1] - ort[1][0]);
		quat[1] = inv * (ort[0][2] + ort[2][0]);
		quat[2] = inv * (ort[2][1] + ort[1][2]);
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

00:19:11.074 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:11.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:11.075 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (s > (-0.19)) {

	quat[0] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
	double inv = 0.25 / quat[0];
	quat[1] = inv * (ort[1][2] - ort[2][1]);
	quat[2] = inv * (ort[2][0] - ort[0][2]);
	quat[3] = inv * (ort[0][1] - ort[1][0]);
} else {
	s = (ort[0][0] - ort[1][1]) - ort[2][2];
	if (s > (-0.19)) {

		quat[1] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
		double inv = 0.25 / quat[1];
		quat[0] = inv * (ort[1][2] - ort[2][1]);
		quat[2] = inv * (ort[0][1] + ort[1][0]);
		quat[3] = inv * (ort[0][2] + ort[2][0]);
	} else {
		s = (ort[1][1] - ort[0][0]) - ort[2][2];
		if (s > (-0.19)) {

			quat[2] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[2];
			quat[0] = inv * (ort[2][0] - ort[0][2]);
			quat[1] = inv * (ort[0][1] + ort[1][0]);
			quat[3] = inv * (ort[2][1] + ort[1][2]);
		} else {

			s = (ort[2][2] - ort[0][0]) - ort[1][1];
			quat[3] = 0.5 * org.apache.commons.math3.util.FastMath.sqrt(s + 1.0);
			double inv = 0.25 / quat[3];
			quat[0] = inv * (ort[0][1] - ort[1][0]);
			quat[1] = inv * (ort[0][2] + ort[2][0]);
			quat[2] = inv * (ort[2][1] + ort[1][2]);
		}
	}
},commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:19:13.337 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:13.338 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:13.339 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:19:15.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:15.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:15.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: v1 = v1.normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:19:17.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:17.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:17.799 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:19:19.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:19.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:19.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q1 = quat[1],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:19:21.902 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:21.903 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:21.904 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: q0 = quat[0],commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

00:19:23.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:19:23.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:19:23.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return quat,commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: double threshold = 0.6 * getNorm(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:37.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:37.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:37.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.a = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:39.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:39.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:39.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:42.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:42.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:42.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:44.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:44.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:44.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(x, 0, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:46.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:46.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:46.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((x < 0) || (x > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(x, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(x, 0, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:48.722 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:48.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:48.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(y, 0, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((x < 0) || (x > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(x, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:50.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:50.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:50.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((y < 0) || (y > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(y, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(y, 0, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:53.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:53.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:53.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double x2 = x * x,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((y < 0) || (y > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(y, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:55.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:55.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:55.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double x3 = x2 * x,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double x2 = x * x,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:57.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:57.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:57.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] pX = new double[]{ 1, x, x2, x3 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double x3 = x2 * x,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:20:59.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:20:59.142 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:20:59.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double y2 = y * y,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] pX = new double[]{ 1, x, x2, x3 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:01.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:01.126 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:01.127 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double y3 = y2 * y,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double y2 = y * y,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:03.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:03.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:03.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] pY = new double[]{ 1, y, y2, y3 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double y3 = y2 * y,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:05.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:05.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:05.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return apply(pX, pY, a),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] pY = new double[]{ 1, y, y2, y3 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:07.456 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:07.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:07.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double result = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return apply(pX, pY, a),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:09.573 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:09.574 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:09.575 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: result += (coeff[i][j] * pX[i]) * pY[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double result = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:11.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:11.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:11.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	result += (coeff[i][j] * pX[i]) * pY[j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: result += (coeff[i][j] * pX[i]) * pY[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:14.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:14.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:14.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		result += (coeff[i][j] * pX[i]) * pY[j];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	result += (coeff[i][j] * pX[i]) * pY[j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:15.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:15.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:15.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return result,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		result += (coeff[i][j] * pX[i]) * pY[j];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:18.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:18.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:18.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: computePartialDerivatives(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return result,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:20.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:20.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:20.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (partialDerivativeX == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: computePartialDerivatives(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:22.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:22.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:22.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivativeX,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (partialDerivativeX == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:24.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:24.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:24.647 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (partialDerivativeY == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivativeX,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:26.976 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:26.977 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:26.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivativeY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (partialDerivativeY == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:29.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:29.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:29.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (partialDerivativeXX == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivativeY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:31.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:31.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:31.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivativeXX,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (partialDerivativeXX == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:33.639 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:33.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:33.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (partialDerivativeYY == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivativeXX,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:35.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:35.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:35.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivativeYY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (partialDerivativeYY == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:37.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:37.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:37.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (partialDerivativeXY == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivativeYY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:40.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:40.178 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:40.179 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivativeXY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (partialDerivativeXY == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:42.578 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:42.579 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:42.580 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] aX = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivativeXY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:45.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:45.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:45.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] aY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] aX = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:47.412 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:47.412 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:47.413 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] aXX = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] aY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:49.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:49.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:49.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] aYY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] aXX = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:52.033 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:52.033 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:52.034 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] aXY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] aYY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:53.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:53.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:53.959 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double c = a[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] aXY = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:55.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:55.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:55.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: aX[i][j] = i * c,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double c = a[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:57.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:57.750 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:57.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: aY[i][j] = j * c,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: aX[i][j] = i * c,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:21:59.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:21:59.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:21:59.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: aXX[i][j] = (i - 1) * aX[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: aY[i][j] = j * c,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:02.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:02.133 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:02.134 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: aYY[i][j] = (j - 1) * aY[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: aXX[i][j] = (i - 1) * aX[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:04.452 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:04.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:04.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: aXY[i][j] = j * aX[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: aYY[i][j] = (j - 1) * aY[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:06.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:06.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:06.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	final double c = a[i][j];
	aX[i][j] = i * c;
	aY[i][j] = j * c;
	aXX[i][j] = (i - 1) * aX[i][j];
	aYY[i][j] = (j - 1) * aY[i][j];
	aXY[i][j] = j * aX[i][j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: aXY[i][j] = j * aX[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:08.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:08.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:08.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		final double c = a[i][j];
		aX[i][j] = i * c;
		aY[i][j] = j * c;
		aXX[i][j] = (i - 1) * aX[i][j];
		aYY[i][j] = (j - 1) * aY[i][j];
		aXY[i][j] = j * aX[i][j];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	final double c = a[i][j];
	aX[i][j] = i * c;
	aY[i][j] = j * c;
	aXX[i][j] = (i - 1) * aX[i][j];
	aYY[i][j] = (j - 1) * aY[i][j];
	aXY[i][j] = j * aX[i][j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:10.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:10.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:10.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] pX = new double[]{ 0, 1, x, x2 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		final double c = a[i][j];
		aX[i][j] = i * c;
		aY[i][j] = j * c;
		aXX[i][j] = (i - 1) * aX[i][j];
		aYY[i][j] = (j - 1) * aY[i][j];
		aXY[i][j] = j * aX[i][j];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:12.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:12.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:12.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return apply(pX, pY, aX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] pX = new double[]{ 0, 1, x, x2 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:14.763 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:14.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:14.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivativeX = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double x2 = x * x;
		final double[] pX = new double[]{ 0, 1, x, x2 };

		final double y2 = y * y;
		final double y3 = y2 * y;
		final double[] pY = new double[]{ 1, y, y2, y3 };

		return apply(pX, pY, aX);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return apply(pX, pY, aX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:17.144 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:17.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:17.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] pY = new double[]{ 0, 1, y, y2 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivativeX = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double x2 = x * x;
		final double[] pX = new double[]{ 0, 1, x, x2 };

		final double y2 = y * y;
		final double y3 = y2 * y;
		final double[] pY = new double[]{ 1, y, y2, y3 };

		return apply(pX, pY, aX);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:19.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:19.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:19.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return apply(pX, pY, aY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] pY = new double[]{ 0, 1, y, y2 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:21.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:21.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:21.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivativeY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double x2 = x * x;
		final double x3 = x2 * x;
		final double[] pX = new double[]{ 1, x, x2, x3 };

		final double y2 = y * y;
		final double[] pY = new double[]{ 0, 1, y, y2 };

		return apply(pX, pY, aY);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return apply(pX, pY, aY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:24.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:24.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:24.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] pX = new double[]{ 0, 0, 1, x },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivativeY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double x2 = x * x;
		final double x3 = x2 * x;
		final double[] pX = new double[]{ 1, x, x2, x3 };

		final double y2 = y * y;
		final double[] pY = new double[]{ 0, 1, y, y2 };

		return apply(pX, pY, aY);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:26.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:26.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:26.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return apply(pX, pY, aXX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] pX = new double[]{ 0, 0, 1, x },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:28.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:28.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:28.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivativeXX = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double[] pX = new double[]{ 0, 0, 1, x };

		final double y2 = y * y;
		final double y3 = y2 * y;
		final double[] pY = new double[]{ 1, y, y2, y3 };

		return apply(pX, pY, aXX);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return apply(pX, pY, aXX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:30.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:30.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:30.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] pY = new double[]{ 0, 0, 1, y },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivativeXX = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double[] pX = new double[]{ 0, 0, 1, x };

		final double y2 = y * y;
		final double y3 = y2 * y;
		final double[] pY = new double[]{ 1, y, y2, y3 };

		return apply(pX, pY, aXX);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:32.913 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:32.913 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:32.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return apply(pX, pY, aYY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] pY = new double[]{ 0, 0, 1, y },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:35.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:35.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:35.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivativeYY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double x2 = x * x;
		final double x3 = x2 * x;
		final double[] pX = new double[]{ 1, x, x2, x3 };

		final double[] pY = new double[]{ 0, 0, 1, y };

		return apply(pX, pY, aYY);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return apply(pX, pY, aYY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:37.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:37.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:37.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return apply(pX, pY, aXY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivativeYY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double x2 = x * x;
		final double x3 = x2 * x;
		final double[] pX = new double[]{ 1, x, x2, x3 };

		final double[] pY = new double[]{ 0, 0, 1, y };

		return apply(pX, pY, aYY);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:39.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:39.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:39.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivativeXY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double x2 = x * x;
		final double[] pX = new double[]{ 0, 1, x, x2 };

		final double y2 = y * y;
		final double[] pY = new double[]{ 0, 1, y, y2 };

		return apply(pX, pY, aXY);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return apply(pX, pY, aXY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:41.627 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:41.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:41.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int xLen = x.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivativeXY = new org.apache.commons.math3.analysis.BivariateFunction() {
	public double value(double x, double y) {
		final double x2 = x * x;
		final double[] pX = new double[]{ 0, 1, x, x2 };

		final double y2 = y * y;
		final double[] pY = new double[]{ 0, 1, y, y2 };

		return apply(pX, pY, aXY);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:43.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:43.836 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:43.837 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int yLen = y.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int xLen = x.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:46.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:46.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:46.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NoDataException(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int yLen = y.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:48.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:48.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:48.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((((xLen == 0) || (yLen == 0)) || (f.length == 0)) || (f[0].length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NoDataException(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:50.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:50.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:50.251 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, f.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((((xLen == 0) || (yLen == 0)) || (f.length == 0)) || (f[0].length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:52.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:52.408 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:52.409 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xLen != f.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, f.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, f.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:54.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:54.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:54.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdX.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != f.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, f.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:56.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:56.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:56.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xLen != dFdX.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdX.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdX.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:22:58.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:22:58.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:22:58.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdY.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != dFdX.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdX.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:00.231 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:00.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:00.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xLen != dFdY.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdY.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdY.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:02.210 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:02.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:02.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdY.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != dFdY.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdY.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:04.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:04.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:04.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xLen != d2FdXdY.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdY.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdY.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:06.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:06.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:06.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.util.MathArrays.checkOrder(x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != d2FdXdY.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdY.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:08.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:08.067 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:08.068 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.util.MathArrays.checkOrder(y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.util.MathArrays.checkOrder(x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:09.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:09.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:09.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: xval = x.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.util.MathArrays.checkOrder(y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:11.846 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:11.846 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:11.847 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: yval = y.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: xval = x.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:13.828 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:13.828 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:13.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int lastI = xLen - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: yval = y.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:15.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:15.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:15.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int lastJ = yLen - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int lastI = xLen - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:17.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:17.921 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:17.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: splines = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction[lastI][lastJ],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int lastJ = yLen - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:20.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:20.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:20.033 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: splines = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction[lastI][lastJ],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:22.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:22.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:22.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (f[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:24.100 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:24.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:24.101 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (f[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:26.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:26.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:26.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (dFdX[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:28.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:28.049 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:28.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (dFdX[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:30.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:30.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:30.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (dFdY[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:31.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:31.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:31.984 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (dFdY[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:33.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:33.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:33.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (d2FdXdY[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:35.952 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:35.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:35.953 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int ip1 = i + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (d2FdXdY[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:37.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:37.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:37.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int jp1 = j + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int ip1 = i + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:39.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:39.858 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:39.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] beta = new double[]{ 
f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int jp1 = j + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:41.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:41.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:41.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] beta = new double[]{ 
f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:43.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:43.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:43.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < lastJ; j++) {
	final int jp1 = j + 1;
	final double[] beta = new double[]{ 
	f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
	dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
	dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
	d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] };


	splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:45.683 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:45.683 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:45.684 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < lastI; i++) {
	if (f[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
	}
	if (dFdX[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
	}
	if (dFdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
	}
	if (d2FdXdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
	}
	final int ip1 = i + 1;
	for (int j = 0; j < lastJ; j++) {
		final int jp1 = j + 1;
		final double[] beta = new double[]{ 
		f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
		dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
		dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
		d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] };


		splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < lastJ; j++) {
	final int jp1 = j + 1;
	final double[] beta = new double[]{ 
	f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
	dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
	dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
	d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] };


	splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:47.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:47.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:47.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int i = searchIndex(x, xval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < lastI; i++) {
	if (f[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
	}
	if (dFdX[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
	}
	if (dFdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
	}
	if (d2FdXdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
	}
	final int ip1 = i + 1;
	for (int j = 0; j < lastJ; j++) {
		final int jp1 = j + 1;
		final double[] beta = new double[]{ 
		f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
		dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
		dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
		d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] };


		splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:49.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:49.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:49.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(x, xval[0], xval[xval.length - 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int i = searchIndex(x, xval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:51.470 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:51.470 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:51.471 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (i == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(x, xval[0], xval[xval.length - 1]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(x, xval[0], xval[xval.length - 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:53.348 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:53.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:53.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int j = searchIndex(y, yval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (i == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(x, xval[0], xval[xval.length - 1]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:55.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:55.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:55.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(y, yval[0], yval[yval.length - 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int j = searchIndex(y, yval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:57.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:57.144 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:57.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (j == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(y, yval[0], yval[yval.length - 1]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(y, yval[0], yval[yval.length - 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:23:59.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:23:59.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:23:59.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double xN = (x - xval[i]) / (xval[i + 1] - xval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (j == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(y, yval[0], yval[yval.length - 1]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:00.955 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:00.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:00.956 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double xN = (x - xval[i]) / (xval[i + 1] - xval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:02.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:02.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:02.863 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return splines[i][j].value(xN, yN),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double yN = (y - yval[j]) / (yval[j + 1] - yval[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:04.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:04.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:04.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivative(0, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return splines[i][j].value(xN, yN),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:06.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:06.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:06.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivative(1, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivative(0, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:08.566 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:08.566 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:08.567 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivative(2, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivative(1, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:10.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:10.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:10.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivative(3, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivative(2, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:12.332 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:12.332 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:12.333 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivative(4, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivative(3, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:14.232 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:14.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:14.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (partialDerivatives == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivative(4, x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:16.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:16.453 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:16.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return partialDerivatives[which][i][j].value(xN, yN),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (partialDerivatives == null) {
	computePartialDerivatives();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:18.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:18.633 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:18.634 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int lastI = xval.length - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return partialDerivatives[which][i][j].value(xN, yN),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:20.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:20.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:20.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int lastJ = yval.length - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int lastI = xval.length - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:22.755 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:22.755 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:22.756 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivatives = new org.apache.commons.math3.analysis.BivariateFunction[5][lastI][lastJ],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int lastJ = yval.length - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:24.901 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:24.901 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:24.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivatives = new org.apache.commons.math3.analysis.BivariateFunction[5][lastI][lastJ],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:27.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:27.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:27.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivatives[0][i][j] = f.partialDerivativeX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:29.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:29.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:29.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivatives[1][i][j] = f.partialDerivativeY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivatives[0][i][j] = f.partialDerivativeX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:31.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:31.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:31.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivatives[2][i][j] = f.partialDerivativeXX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivatives[1][i][j] = f.partialDerivativeY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:33.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:33.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:33.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivatives[3][i][j] = f.partialDerivativeYY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivatives[2][i][j] = f.partialDerivativeXX(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:35.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:35.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:35.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: partialDerivatives[4][i][j] = f.partialDerivativeXY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivatives[3][i][j] = f.partialDerivativeYY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:37.123 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:37.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:37.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < lastJ; j++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j];
	partialDerivatives[0][i][j] = f.partialDerivativeX();
	partialDerivatives[1][i][j] = f.partialDerivativeY();
	partialDerivatives[2][i][j] = f.partialDerivativeXX();
	partialDerivatives[3][i][j] = f.partialDerivativeYY();
	partialDerivatives[4][i][j] = f.partialDerivativeXY();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: partialDerivatives[4][i][j] = f.partialDerivativeXY(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:39.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:39.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:39.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < lastI; i++) {
	for (int j = 0; j < lastJ; j++) {
		final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j];
		partialDerivatives[0][i][j] = f.partialDerivativeX();
		partialDerivatives[1][i][j] = f.partialDerivativeY();
		partialDerivatives[2][i][j] = f.partialDerivativeXX();
		partialDerivatives[3][i][j] = f.partialDerivativeYY();
		partialDerivatives[4][i][j] = f.partialDerivativeXY();
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < lastJ; j++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j];
	partialDerivatives[0][i][j] = f.partialDerivativeX();
	partialDerivatives[1][i][j] = f.partialDerivativeY();
	partialDerivatives[2][i][j] = f.partialDerivativeXX();
	partialDerivatives[3][i][j] = f.partialDerivativeYY();
	partialDerivatives[4][i][j] = f.partialDerivativeXY();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:41.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:41.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:41.165 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return -1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < lastI; i++) {
	for (int j = 0; j < lastJ; j++) {
		final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j];
		partialDerivatives[0][i][j] = f.partialDerivativeX();
		partialDerivatives[1][i][j] = f.partialDerivativeY();
		partialDerivatives[2][i][j] = f.partialDerivativeXX();
		partialDerivatives[3][i][j] = f.partialDerivativeYY();
		partialDerivatives[4][i][j] = f.partialDerivativeXY();
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:43.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:43.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:43.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (c < val[0]) {
	return -1;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return -1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:44.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:44.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:44.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int max = val.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (c < val[0]) {
	return -1;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:46.932 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:46.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:46.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return i - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int max = val.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:48.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:48.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:48.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (c <= val[i]) {
	return i - 1;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return i - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:50.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:50.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:50.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 1; i < max; i++) {
	if (c <= val[i]) {
		return i - 1;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (c <= val[i]) {
	return i - 1;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:52.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:52.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:52.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] a = new double[16],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 1; i < max; i++) {
	if (c <= val[i]) {
		return i - 1;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:54.564 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:54.564 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:54.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] row = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] a = new double[16],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:56.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:56.418 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:56.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: result += row[j] * beta[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] row = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:24:58.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:24:58.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:24:58.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < 16; j++) {
	result += row[j] * beta[j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: result += row[j] * beta[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:00.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:00.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:00.298 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: a[i] = result,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < 16; j++) {
	result += row[j] * beta[j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:02.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:02.182 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:02.183 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < 16; i++) {
	double result = 0;
	final double[] row = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[i];
	for (int j = 0; j < 16; j++) {
		result += row[j] * beta[j];
	}
	a[i] = result;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: a[i] = result,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:04.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:04.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:04.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return a,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < 16; i++) {
	double result = 0;
	final double[] row = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[i];
	for (int j = 0; j < 16; j++) {
		result += row[j] * beta[j];
	}
	a[i] = result;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:06.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:06.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:06.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (((xval.length == 0) || (yval.length == 0)) || (fval.length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return a,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:07.923 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:07.923 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:07.924 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, fval.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (((xval.length == 0) || (yval.length == 0)) || (fval.length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:09.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:09.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:09.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xval.length != fval.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, fval.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, fval.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:11.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:11.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:11.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.util.MathArrays.checkOrder(xval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xval.length != fval.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, fval.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:13.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:13.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:13.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.util.MathArrays.checkOrder(yval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.util.MathArrays.checkOrder(xval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:15.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:15.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:15.448 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int xLen = xval.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.util.MathArrays.checkOrder(yval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:17.395 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:17.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:17.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int yLen = yval.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int xLen = xval.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:19.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:19.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:19.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] fX = new double[yLen][xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int yLen = yval.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:21.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:21.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:21.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] fX = new double[yLen][xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:23.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:23.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:23.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (fval[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:25.113 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:25.113 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:25.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: fX[j][i] = fval[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (fval[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:26.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:26.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:26.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	fX[j][i] = fval[i][j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: fX[j][i] = fval[i][j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:28.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:28.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:28.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}

	for (int j = 0; j < yLen; j++) {
		fX[j][i] = fval[i][j];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	fX[j][i] = fval[i][j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:30.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:30.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:30.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.SplineInterpolator spInterpolator = new org.apache.commons.math3.analysis.interpolation.SplineInterpolator(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}

	for (int j = 0; j < yLen; j++) {
		fX[j][i] = fval[i][j];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:32.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:32.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:32.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] ySplineX = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.SplineInterpolator spInterpolator = new org.apache.commons.math3.analysis.interpolation.SplineInterpolator(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:34.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:34.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:34.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: ySplineX[j] = spInterpolator.interpolate(xval, fX[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] ySplineX = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:36.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:36.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:36.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	ySplineX[j] = spInterpolator.interpolate(xval, fX[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: ySplineX[j] = spInterpolator.interpolate(xval, fX[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:38.211 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:38.211 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:38.212 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] xSplineY = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	ySplineX[j] = spInterpolator.interpolate(xval, fX[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:40.274 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:40.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:40.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: xSplineY[i] = spInterpolator.interpolate(yval, fval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[] xSplineY = new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction[xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:42.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:42.525 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:42.526 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	xSplineY[i] = spInterpolator.interpolate(yval, fval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: xSplineY[i] = spInterpolator.interpolate(yval, fval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:44.634 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:44.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:44.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] dFdX = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	xSplineY[i] = spInterpolator.interpolate(yval, fval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:46.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:46.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:46.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[j].derivative(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] dFdX = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:49.082 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:49.083 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:49.084 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: dFdX[i][j] = f.value(xval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[j].derivative(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:51.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:51.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:51.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	dFdX[i][j] = f.value(xval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: dFdX[i][j] = f.value(xval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:53.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:53.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:53.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[j].derivative();
	for (int i = 0; i < xLen; i++) {
		dFdX[i][j] = f.value(xval[i]);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	dFdX[i][j] = f.value(xval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:55.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:55.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:55.624 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] dFdY = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[j].derivative();
	for (int i = 0; i < xLen; i++) {
		dFdX[i][j] = f.value(xval[i]);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:57.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:57.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:57.766 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[i].derivative(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] dFdY = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:25:59.912 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:25:59.912 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:25:59.914 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: dFdY[i][j] = f.value(yval[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[i].derivative(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:02.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:02.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:02.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	dFdY[i][j] = f.value(yval[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: dFdY[i][j] = f.value(yval[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:04.331 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:04.331 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:04.332 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[i].derivative();
	for (int j = 0; j < yLen; j++) {
		dFdY[i][j] = f.value(yval[j]);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	dFdY[i][j] = f.value(yval[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:06.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:06.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:06.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] d2FdXdY = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[i].derivative();
	for (int j = 0; j < yLen; j++) {
		dFdY[i][j] = f.value(yval[j]);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:08.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:08.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:08.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int nI = nextIndex(i, xLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] d2FdXdY = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:10.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:10.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:10.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int pI = previousIndex(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int nI = nextIndex(i, xLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:12.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:12.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:12.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int nJ = nextIndex(j, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int pI = previousIndex(i),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:14.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:14.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:14.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int pJ = previousIndex(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int nJ = nextIndex(j, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:16.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:16.474 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:16.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
fval[pI][nJ]) + fval[pI][pJ]) / 
((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int pJ = previousIndex(j),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:18.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:18.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:18.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	final int nJ = nextIndex(j, yLen);
	final int pJ = previousIndex(j);
	d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
	fval[pI][nJ]) + fval[pI][pJ]) / 
	((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
fval[pI][nJ]) + fval[pI][pJ]) / 
((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:20.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:20.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:20.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	final int nI = nextIndex(i, xLen);
	final int pI = previousIndex(i);
	for (int j = 0; j < yLen; j++) {
		final int nJ = nextIndex(j, yLen);
		final int pJ = previousIndex(j);
		d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
		fval[pI][nJ]) + fval[pI][pJ]) / 
		((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	final int nJ = nextIndex(j, yLen);
	final int pJ = previousIndex(j);
	d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
	fval[pI][nJ]) + fval[pI][pJ]) / 
	((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:22.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:22.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:22.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction(xval, yval, fval, 
dFdX, dFdY, d2FdXdY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	final int nI = nextIndex(i, xLen);
	final int pI = previousIndex(i);
	for (int j = 0; j < yLen; j++) {
		final int nJ = nextIndex(j, yLen);
		final int pJ = previousIndex(j);
		d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
		fval[pI][nJ]) + fval[pI][pJ]) / 
		((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:24.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:24.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:24.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int index = i + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction(xval, yval, fval, 
dFdX, dFdY, d2FdXdY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:26.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:26.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:26.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return index < max ? index : index - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int index = i + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:28.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:28.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:28.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int index = i - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return index < max ? index : index - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:30.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:30.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:30.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return index >= 0 ? index : 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int index = i - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:31.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:31.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:31.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return index >= 0 ? index : 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:33.876 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:33.876 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:33.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] c = new double[x.length - 1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm.verifyInterpolationArray(x, y, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:35.744 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:35.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:35.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: java.lang.System.arraycopy(x, 0, c, 0, c.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] c = new double[x.length - 1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:37.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:37.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:37.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] a = org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: java.lang.System.arraycopy(x, 0, c, 0, c.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:39.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:39.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:39.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm(a, c),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] a = org.apache.commons.math3.analysis.interpolation.DividedDifferenceInterpolator.computeDividedDifference(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:41.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:41.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:41.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] divdiff = y.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm(a, c),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:43.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:43.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:43.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int n = x.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] divdiff = y.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:45.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:45.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:45.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] a = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int n = x.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:47.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:47.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:47.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: a[0] = divdiff[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] a = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:49.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:49.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:49.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double denominator = x[j + i] - x[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: a[0] = divdiff[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:51.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:51.745 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:51.746 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double denominator = x[j + i] - x[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:53.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:53.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:53.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < (n - i); j++) {
	final double denominator = x[j + i] - x[j];
	divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:55.595 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:55.595 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:55.596 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: a[i] = divdiff[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < (n - i); j++) {
	final double denominator = x[j + i] - x[j];
	divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:26:57.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:26:57.866 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:26:57.867 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 1; i < n; i++) {
	for (int j = 0; j < (n - i); j++) {
		final double denominator = x[j + i] - x[j];
		divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
	}
	a[i] = divdiff[0];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: a[i] = divdiff[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:00.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:00.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:00.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (x.length != y.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:02.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:02.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:02.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
x.length, 2, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (x.length != y.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:04.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:04.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:04.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (x.length < 2) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
	x.length, 2, true);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
x.length, 2, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:06.544 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:06.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:06.545 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: int n = x.length - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (x.length < 2) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
	x.length, 2, true);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:08.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:08.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:08.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] m = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: int n = x.length - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:10.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:10.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:10.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] m = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:12.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:12.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:12.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < n; i++) {
	m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:15.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:15.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:15.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < n; i++) {
	m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:17.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:17.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:17.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] coefficients = new double[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] polynomials = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:19.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:19.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:19.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: coefficients[0] = y[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] coefficients = new double[2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:21.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:21.551 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:21.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: coefficients[1] = m[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: coefficients[0] = y[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:23.614 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:23.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:23.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: coefficients[1] = m[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:25.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:25.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:25.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < n; i++) {
	coefficients[0] = y[i];
	coefficients[1] = m[i];
	polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:27.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:27.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:27.591 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction(x, polynomials),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < n; i++) {
	coefficients[0] = y[i];
	coefficients[1] = m[i];
	polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:29.622 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:29.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:29.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.bandwidth = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_BANDWIDTH,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialSplineFunction(x, polynomials),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:31.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:31.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:31.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.robustnessIters = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.bandwidth = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_BANDWIDTH,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:33.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:33.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:33.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.accuracy = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ACCURACY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.robustnessIters = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ROBUSTNESS_ITERS,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:35.492 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:35.492 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:35.493 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this(bandwidth, robustnessIters, org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ACCURACY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.accuracy = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ACCURACY,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:37.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:37.756 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:37.757 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, bandwidth, 0, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this(bandwidth, robustnessIters, org.apache.commons.math3.analysis.interpolation.LoessInterpolator.DEFAULT_ACCURACY),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:39.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:39.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:39.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((bandwidth < 0) || 
(bandwidth > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, bandwidth, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, bandwidth, 0, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:41.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:41.903 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:41.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.bandwidth = bandwidth,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((bandwidth < 0) || 
(bandwidth > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, bandwidth, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:43.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:43.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:43.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS, robustnessIters),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.bandwidth = bandwidth,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:45.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:45.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:45.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (robustnessIters < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS, robustnessIters);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS, robustnessIters),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:48.004 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:48.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:48.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.robustnessIters = robustnessIters,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (robustnessIters < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(org.apache.commons.math3.exception.util.LocalizedFormats.ROBUSTNESS_ITERATIONS, robustnessIters);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:49.946 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:49.946 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:49.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.accuracy = accuracy,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.robustnessIters = robustnessIters,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:51.876 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:51.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:51.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new org.apache.commons.math3.analysis.interpolation.SplineInterpolator().interpolate(xval, smooth(xval, yval)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.accuracy = accuracy,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:53.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:53.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:53.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, yval.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new org.apache.commons.math3.analysis.interpolation.SplineInterpolator().interpolate(xval, smooth(xval, yval)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:55.929 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:55.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:55.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xval.length != yval.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, yval.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, yval.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:57.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:57.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:57.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int n = xval.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xval.length != yval.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xval.length, yval.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:27:59.827 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:27:59.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:27:59.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (n == 0) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int n = xval.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:01.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:01.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:01.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(xval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (n == 0) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:03.769 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:03.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:03.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(yval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(xval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:05.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:05.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:05.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(weights),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(yval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:07.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:07.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:07.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new double[]{ yval[0] },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.checkAllFiniteReal(weights),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:09.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:09.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:09.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (n == 1) {
	return new double[]{ yval[0] };
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new double[]{ yval[0] },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:11.439 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:11.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:11.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new double[]{ yval[0], yval[1] },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (n == 1) {
	return new double[]{ yval[0] };
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:13.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:13.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:13.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (n == 2) {
	return new double[]{ yval[0], yval[1] };
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new double[]{ yval[0], yval[1] },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:15.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:15.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:15.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: int bandwidthInPoints = ((int) (bandwidth * n)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (n == 2) {
	return new double[]{ yval[0], yval[1] };
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:17.096 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:17.096 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:17.097 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, 
bandwidthInPoints, 2, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: int bandwidthInPoints = ((int) (bandwidth * n)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:19.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:19.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:19.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (bandwidthInPoints < 2) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, 
	bandwidthInPoints, 2, true);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, 
bandwidthInPoints, 2, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:20.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:20.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:20.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] res = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (bandwidthInPoints < 2) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.BANDWIDTH, 
	bandwidthInPoints, 2, true);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:22.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:22.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:22.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] residuals = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] res = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:24.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:24.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:24.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] sortedResiduals = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] residuals = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:26.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:26.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:26.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] robustnessWeights = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] sortedResiduals = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:28.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:28.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:28.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: java.util.Arrays.fill(robustnessWeights, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] robustnessWeights = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:30.732 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:30.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:30.733 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int[] bandwidthInterval = new int[]{ 0, bandwidthInPoints - 1 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: java.util.Arrays.fill(robustnessWeights, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:32.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:32.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:32.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double x = xval[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int[] bandwidthInterval = new int[]{ 0, bandwidthInPoints - 1 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:34.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:34.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:34.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double x = xval[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:36.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:36.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:36.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (i > 0) {
	org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:38.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:38.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:38.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int ileft = bandwidthInterval[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (i > 0) {
	org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:40.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:40.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:40.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int iright = bandwidthInterval[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int ileft = bandwidthInterval[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:42.564 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:42.565 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:42.566 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int edge,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int iright = bandwidthInterval[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:44.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:44.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:44.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: edge = ileft,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int edge,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:46.740 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:46.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:46.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: edge = iright,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: edge = ileft,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:48.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:48.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:48.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
	edge = ileft;
} else {
	edge = iright;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: edge = iright,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:50.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:50.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:50.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double sumWeights = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
	edge = ileft;
} else {
	edge = iright;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:52.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:52.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:52.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double sumX = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double sumWeights = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:54.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:54.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:54.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double sumXSquared = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double sumX = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:56.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:56.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:56.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double sumY = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double sumXSquared = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:28:58.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:28:58.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:28:58.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double sumXY = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double sumY = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:01.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:01.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:01.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double sumXY = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:03.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:03.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:03.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double xk = xval[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:05.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:05.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:05.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double yk = yval[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double xk = xval[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:07.403 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:07.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:07.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double dist = (k < i) ? x - xk : xk - x,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double yk = yval[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:09.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:09.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:09.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double dist = (k < i) ? x - xk : xk - x,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:11.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:11.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:11.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double xkw = xk * w,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:13.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:13.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:13.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: sumWeights += w,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double xkw = xk * w,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:15.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:15.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:15.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: sumX += xkw,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: sumWeights += w,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:17.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:17.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:17.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: sumXSquared += xk * xkw,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: sumX += xkw,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:19.679 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:19.679 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:19.680 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: sumY += yk * w,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: sumXSquared += xk * xkw,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:21.910 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:21.910 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:21.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: sumXY += yk * xkw,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: sumY += yk * w,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:24.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:24.106 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:24.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = ileft; k <= iright; ++k) {
	final double xk = xval[k];
	final double yk = yval[k];
	final double dist = (k < i) ? x - xk : xk - x;
	final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
	final double xkw = xk * w;
	sumWeights += w;
	sumX += xkw;
	sumXSquared += xk * xkw;
	sumY += yk * w;
	sumXY += yk * xkw;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: sumXY += yk * xkw,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:26.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:26.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:26.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double meanX = sumX / sumWeights,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = ileft; k <= iright; ++k) {
	final double xk = xval[k];
	final double yk = yval[k];
	final double dist = (k < i) ? x - xk : xk - x;
	final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
	final double xkw = xk * w;
	sumWeights += w;
	sumX += xkw;
	sumXSquared += xk * xkw;
	sumY += yk * w;
	sumXY += yk * xkw;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:28.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:28.375 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:28.376 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double meanY = sumY / sumWeights,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double meanX = sumX / sumWeights,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:30.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:30.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:30.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double meanXY = sumXY / sumWeights,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double meanY = sumY / sumWeights,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:32.514 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:32.514 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:32.515 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double meanXSquared = sumXSquared / sumWeights,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double meanXY = sumXY / sumWeights,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:34.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:34.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:34.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double beta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double meanXSquared = sumXSquared / sumWeights,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:36.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:36.350 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:36.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: beta = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double beta,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:38.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:38.319 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:38.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: beta = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:40.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:40.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:40.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
	beta = 0;
} else {
	beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:42.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:42.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:42.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double alpha = meanY - (beta * meanX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
	beta = 0;
} else {
	beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:44.274 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:44.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:44.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: res[i] = (beta * x) + alpha,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double alpha = meanY - (beta * meanX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:46.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:46.168 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:46.169 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: res[i] = (beta * x) + alpha,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:48.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:48.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:48.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < n; ++i) {
	final double x = xval[i];



	if (i > 0) {
		org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
	}

	final int ileft = bandwidthInterval[0];
	final int iright = bandwidthInterval[1];



	final int edge;
	if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
		edge = ileft;
	} else {
		edge = iright;
	}








	double sumWeights = 0;
	double sumX = 0;
	double sumXSquared = 0;
	double sumY = 0;
	double sumXY = 0;
	double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x));
	for (int k = ileft; k <= iright; ++k) {
		final double xk = xval[k];
		final double yk = yval[k];
		final double dist = (k < i) ? x - xk : xk - x;
		final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
		final double xkw = xk * w;
		sumWeights += w;
		sumX += xkw;
		sumXSquared += xk * xkw;
		sumY += yk * w;
		sumXY += yk * xkw;
	}

	final double meanX = sumX / sumWeights;
	final double meanY = sumY / sumWeights;
	final double meanXY = sumXY / sumWeights;
	final double meanXSquared = sumXSquared / sumWeights;

	final double beta;
	if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
		beta = 0;
	} else {
		beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
	}

	final double alpha = meanY - (beta * meanX);

	res[i] = (beta * x) + alpha;
	residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:50.412 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:50.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:50.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: break,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < n; ++i) {
	final double x = xval[i];



	if (i > 0) {
		org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
	}

	final int ileft = bandwidthInterval[0];
	final int iright = bandwidthInterval[1];



	final int edge;
	if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
		edge = ileft;
	} else {
		edge = iright;
	}








	double sumWeights = 0;
	double sumX = 0;
	double sumXSquared = 0;
	double sumY = 0;
	double sumXY = 0;
	double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x));
	for (int k = ileft; k <= iright; ++k) {
		final double xk = xval[k];
		final double yk = yval[k];
		final double dist = (k < i) ? x - xk : xk - x;
		final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
		final double xkw = xk * w;
		sumWeights += w;
		sumX += xkw;
		sumXSquared += xk * xkw;
		sumY += yk * w;
		sumXY += yk * xkw;
	}

	final double meanX = sumX / sumWeights;
	final double meanY = sumY / sumWeights;
	final double meanXY = sumXY / sumWeights;
	final double meanXSquared = sumXSquared / sumWeights;

	final double beta;
	if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
		beta = 0;
	} else {
		beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
	}

	final double alpha = meanY - (beta * meanX);

	res[i] = (beta * x) + alpha;
	residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:52.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:52.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:52.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (iter == robustnessIters) {
	break;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: break,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:54.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:54.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:54.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (iter == robustnessIters) {
	break;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:57.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:57.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:57.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: java.util.Arrays.sort(sortedResiduals),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:29:59.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:29:59.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:29:59.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double medianResidual = sortedResiduals[n / 2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: java.util.Arrays.sort(sortedResiduals),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:01.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:01.458 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:01.459 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(medianResidual) < accuracy) {
	break;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double medianResidual = sortedResiduals[n / 2],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:03.686 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:03.686 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:03.687 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double arg = residuals[i] / (6 * medianResidual),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(medianResidual) < accuracy) {
	break;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:05.940 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:05.940 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:05.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: robustnessWeights[i] = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double arg = residuals[i] / (6 * medianResidual),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:08.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:08.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:08.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double w = 1 - (arg * arg),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: robustnessWeights[i] = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:10.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:10.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:10.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: robustnessWeights[i] = w * w,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double w = 1 - (arg * arg),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:12.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:12.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:12.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (arg >= 1) {
	robustnessWeights[i] = 0;
} else {
	final double w = 1 - (arg * arg);
	robustnessWeights[i] = w * w;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: robustnessWeights[i] = w * w,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:14.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:14.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:14.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < n; ++i) {
	final double arg = residuals[i] / (6 * medianResidual);
	if (arg >= 1) {
		robustnessWeights[i] = 0;
	} else {
		final double w = 1 - (arg * arg);
		robustnessWeights[i] = w * w;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (arg >= 1) {
	robustnessWeights[i] = 0;
} else {
	final double w = 1 - (arg * arg);
	robustnessWeights[i] = w * w;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:16.420 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:16.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:16.421 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int iter = 0; iter <= robustnessIters; ++iter) {
	final int[] bandwidthInterval = new int[]{ 0, bandwidthInPoints - 1 };

	for (int i = 0; i < n; ++i) {
		final double x = xval[i];



		if (i > 0) {
			org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
		}

		final int ileft = bandwidthInterval[0];
		final int iright = bandwidthInterval[1];



		final int edge;
		if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
			edge = ileft;
		} else {
			edge = iright;
		}








		double sumWeights = 0;
		double sumX = 0;
		double sumXSquared = 0;
		double sumY = 0;
		double sumXY = 0;
		double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x));
		for (int k = ileft; k <= iright; ++k) {
			final double xk = xval[k];
			final double yk = yval[k];
			final double dist = (k < i) ? x - xk : xk - x;
			final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
			final double xkw = xk * w;
			sumWeights += w;
			sumX += xkw;
			sumXSquared += xk * xkw;
			sumY += yk * w;
			sumXY += yk * xkw;
		}

		final double meanX = sumX / sumWeights;
		final double meanY = sumY / sumWeights;
		final double meanXY = sumXY / sumWeights;
		final double meanXSquared = sumXSquared / sumWeights;

		final double beta;
		if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
			beta = 0;
		} else {
			beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
		}

		final double alpha = meanY - (beta * meanX);

		res[i] = (beta * x) + alpha;
		residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]);
	}



	if (iter == robustnessIters) {
		break;
	}






	java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n);
	java.util.Arrays.sort(sortedResiduals);
	final double medianResidual = sortedResiduals[n / 2];

	if (org.apache.commons.math3.util.FastMath.abs(medianResidual) < accuracy) {
		break;
	}

	for (int i = 0; i < n; ++i) {
		final double arg = residuals[i] / (6 * medianResidual);
		if (arg >= 1) {
			robustnessWeights[i] = 0;
		} else {
			final double w = 1 - (arg * arg);
			robustnessWeights[i] = w * w;
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < n; ++i) {
	final double arg = residuals[i] / (6 * medianResidual);
	if (arg >= 1) {
		robustnessWeights[i] = 0;
	} else {
		final double w = 1 - (arg * arg);
		robustnessWeights[i] = w * w;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:18.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:18.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:18.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return res,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int iter = 0; iter <= robustnessIters; ++iter) {
	final int[] bandwidthInterval = new int[]{ 0, bandwidthInPoints - 1 };

	for (int i = 0; i < n; ++i) {
		final double x = xval[i];



		if (i > 0) {
			org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
		}

		final int ileft = bandwidthInterval[0];
		final int iright = bandwidthInterval[1];



		final int edge;
		if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
			edge = ileft;
		} else {
			edge = iright;
		}








		double sumWeights = 0;
		double sumX = 0;
		double sumXSquared = 0;
		double sumY = 0;
		double sumXY = 0;
		double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x));
		for (int k = ileft; k <= iright; ++k) {
			final double xk = xval[k];
			final double yk = yval[k];
			final double dist = (k < i) ? x - xk : xk - x;
			final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
			final double xkw = xk * w;
			sumWeights += w;
			sumX += xkw;
			sumXSquared += xk * xkw;
			sumY += yk * w;
			sumXY += yk * xkw;
		}

		final double meanX = sumX / sumWeights;
		final double meanY = sumY / sumWeights;
		final double meanXY = sumXY / sumWeights;
		final double meanXSquared = sumXSquared / sumWeights;

		final double beta;
		if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
			beta = 0;
		} else {
			beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
		}

		final double alpha = meanY - (beta * meanX);

		res[i] = (beta * x) + alpha;
		residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]);
	}



	if (iter == robustnessIters) {
		break;
	}






	java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n);
	java.util.Arrays.sort(sortedResiduals);
	final double medianResidual = sortedResiduals[n / 2];

	if (org.apache.commons.math3.util.FastMath.abs(medianResidual) < accuracy) {
		break;
	}

	for (int i = 0; i < n; ++i) {
		final double arg = residuals[i] / (6 * medianResidual);
		if (arg >= 1) {
			robustnessWeights[i] = 0;
		} else {
			final double w = 1 - (arg * arg);
			robustnessWeights[i] = w * w;
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:20.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:20.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:20.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] unitWeights = new double[xval.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return res,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:22.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:22.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:22.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: java.util.Arrays.fill(unitWeights, 1.0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] unitWeights = new double[xval.length],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:24.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:24.839 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:24.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return smooth(xval, yval, unitWeights),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: java.util.Arrays.fill(unitWeights, 1.0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:27.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:27.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:27.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int left = bandwidthInterval[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return smooth(xval, yval, unitWeights),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:29.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:29.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:29.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int right = bandwidthInterval[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int left = bandwidthInterval[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:31.286 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:31.286 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:31.287 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: int nextRight = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, right),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int right = bandwidthInterval[1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:33.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:33.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:33.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: int nextLeft = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, bandwidthInterval[0]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: int nextRight = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, right),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:35.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:35.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:35.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: bandwidthInterval[0] = nextLeft,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: int nextLeft = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, bandwidthInterval[0]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:37.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:37.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:37.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: bandwidthInterval[1] = nextRight,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: bandwidthInterval[0] = nextLeft,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:39.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:39.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:39.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((nextRight < xval.length) && ((xval[nextRight] - xval[i]) < (xval[i] - xval[left]))) {
	int nextLeft = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, bandwidthInterval[0]);
	bandwidthInterval[0] = nextLeft;
	bandwidthInterval[1] = nextRight;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: bandwidthInterval[1] = nextRight,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:41.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:41.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:41.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: int j = i + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((nextRight < xval.length) && ((xval[nextRight] - xval[i]) < (xval[i] - xval[left]))) {
	int nextLeft = org.apache.commons.math3.analysis.interpolation.LoessInterpolator.nextNonzero(weights, bandwidthInterval[0]);
	bandwidthInterval[0] = nextLeft;
	bandwidthInterval[1] = nextRight;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:43.871 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:43.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:43.872 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: ++j,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: int j = i + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:45.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:45.890 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:45.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: while ((j < weights.length) && (weights[j] == 0)) {
	++j;
} ,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: ++j,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:47.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:47.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:47.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return j,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: while ((j < weights.length) && (weights[j] == 0)) {
	++j;
} ,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:49.649 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:49.649 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:49.650 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double absX = org.apache.commons.math3.util.FastMath.abs(x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return j,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:51.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:51.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:51.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double absX = org.apache.commons.math3.util.FastMath.abs(x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:53.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:53.551 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:53.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (absX >= 1.0) {
	return 0.0;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:55.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:55.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:55.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double tmp = 1 - ((absX * absX) * absX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (absX >= 1.0) {
	return 0.0;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:57.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:57.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:57.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return (tmp * tmp) * tmp,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double tmp = 1 - ((absX * absX) * absX),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:30:59.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:30:59.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:30:59.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.util.MathUtils.checkFinite(values[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return (tmp * tmp) * tmp,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:01.809 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:01.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:01.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < values.length; i++) {
	org.apache.commons.math3.util.MathUtils.checkFinite(values[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.util.MathUtils.checkFinite(values[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:04.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:04.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:04.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: normal = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < values.length; i++) {
	org.apache.commons.math3.util.MathUtils.checkFinite(values[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:06.030 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:06.030 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:06.031 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return normal,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: normal = new org.apache.commons.math3.linear.ArrayRealVector(n),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:08.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:08.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:08.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: brightestIllumination = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return normal,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:10.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:10.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:10.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: brightestSample = null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: brightestIllumination = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:12.361 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:12.361 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:12.362 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.brightestIllumination = illuminationFromSample,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: brightestSample = null,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:14.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:14.540 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:14.541 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.brightestSample = sample,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.brightestIllumination = illuminationFromSample,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:16.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:16.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:16.435 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (illuminationFromSample > this.brightestIllumination) {
	this.brightestIllumination = illuminationFromSample;
	this.brightestSample = sample;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.brightestSample = sample,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:18.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:18.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:18.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return brightestIllumination,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (illuminationFromSample > this.brightestIllumination) {
	this.brightestIllumination = illuminationFromSample;
	this.brightestSample = sample;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:20.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:20.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:20.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return brightestSample,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return brightestIllumination,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:22.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:22.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:22.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NullArgumentException(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return brightestSample,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:24.628 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:24.629 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:24.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((xval == null) || 
(yval == null)) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NullArgumentException(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:26.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:26.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:26.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xval.length == 0) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((xval == null) || 
(yval == null)) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:28.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:28.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:28.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xval[0] == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xval.length == 0) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:30.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:30.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:30.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: dimension = xval[0].length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xval[0] == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:32.619 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:32.619 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:32.620 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.brightnessExponent = brightnessExponent,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: dimension = xval[0].length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:34.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:34.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:34.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: samples = new java.util.HashMap<org.apache.commons.math3.linear.RealVector, java.lang.Double>(yval.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.brightnessExponent = brightnessExponent,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:36.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:36.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:36.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] xvalI = xval[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: samples = new java.util.HashMap<org.apache.commons.math3.linear.RealVector, java.lang.Double>(yval.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:38.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:38.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:38.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xvalI == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] xvalI = xval[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:40.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:40.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:40.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xvalI == null) {
	throw new org.apache.commons.math3.exception.NullArgumentException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:42.354 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:42.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:42.355 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xvalI.length != dimension) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:44.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:44.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:44.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: samples.put(new org.apache.commons.math3.linear.ArrayRealVector(xvalI), yval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xvalI.length != dimension) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:46.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:46.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:46.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xval.length; ++i) {
	final double[] xvalI = xval[i];
	if (xvalI == null) {
		throw new org.apache.commons.math3.exception.NullArgumentException();
	}
	if (xvalI.length != dimension) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension);
	}

	samples.put(new org.apache.commons.math3.linear.ArrayRealVector(xvalI), yval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: samples.put(new org.apache.commons.math3.linear.ArrayRealVector(xvalI), yval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:48.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:48.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:48.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: microsphere = new java.util.ArrayList<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement>(microsphereElements),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xval.length; ++i) {
	final double[] xvalI = xval[i];
	if (xvalI == null) {
		throw new org.apache.commons.math3.exception.NullArgumentException();
	}
	if (xvalI.length != dimension) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension);
	}

	samples.put(new org.apache.commons.math3.linear.ArrayRealVector(xvalI), yval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:49.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:49.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:49.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: microsphere = new java.util.ArrayList<org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement>(microsphereElements),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:51.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:51.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:51.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < microsphereElements; i++) {
	microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector()));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector())),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:53.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:53.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:53.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.linear.RealVector p = new org.apache.commons.math3.linear.ArrayRealVector(point),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < microsphereElements; i++) {
	microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector()));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:55.770 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:55.770 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:55.771 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: md.reset(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.linear.RealVector p = new org.apache.commons.math3.linear.ArrayRealVector(point),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:57.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:57.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:57.726 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md : microsphere) {
	md.reset();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: md.reset(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:31:59.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:31:59.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:31:59.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.linear.RealVector diff = sd.getKey().subtract(p),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md : microsphere) {
	md.reset();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:01.525 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:01.525 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:01.526 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double diffNorm = diff.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.linear.RealVector diff = sd.getKey().subtract(p),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:03.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:03.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:03.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return sd.getValue(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double diffNorm = diff.getNorm(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:05.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:05.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:05.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(diffNorm) < org.apache.commons.math3.util.FastMath.ulp(1.0)) {


	return sd.getValue();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return sd.getValue(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:07.230 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:07.230 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:07.231 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double w = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(diffNorm) < org.apache.commons.math3.util.FastMath.ulp(1.0)) {


	return sd.getValue();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:09.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:09.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:09.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: md.store(cosAngle(diff, md.normal()) * w, sd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double w = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:11.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:11.090 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:11.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md : microsphere) {
	final double w = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent);
	md.store(cosAngle(diff, md.normal()) * w, sd);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: md.store(cosAngle(diff, md.normal()) * w, sd),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:13.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:13.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:13.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd : samples.entrySet()) {


	final org.apache.commons.math3.linear.RealVector diff = sd.getKey().subtract(p);
	final double diffNorm = diff.getNorm();

	if (org.apache.commons.math3.util.FastMath.abs(diffNorm) < org.apache.commons.math3.util.FastMath.ulp(1.0)) {


		return sd.getValue();
	}

	for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md : microsphere) {
		final double w = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent);
		md.store(cosAngle(diff, md.normal()) * w, sd);
	}

},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md : microsphere) {
	final double w = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent);
	md.store(cosAngle(diff, md.normal()) * w, sd);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:15.161 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:15.161 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:15.162 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double value = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd : samples.entrySet()) {


	final org.apache.commons.math3.linear.RealVector diff = sd.getKey().subtract(p);
	final double diffNorm = diff.getNorm();

	if (org.apache.commons.math3.util.FastMath.abs(diffNorm) < org.apache.commons.math3.util.FastMath.ulp(1.0)) {


		return sd.getValue();
	}

	for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md : microsphere) {
		final double w = org.apache.commons.math3.util.FastMath.pow(diffNorm, -brightnessExponent);
		md.store(cosAngle(diff, md.normal()) * w, sd);
	}

},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:17.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:17.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:17.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double totalWeight = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double value = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:19.501 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:19.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:19.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double iV = md.illumination(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double totalWeight = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:21.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:21.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:21.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd = md.sample(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double iV = md.illumination(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:23.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:23.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:23.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: value += iV * sd.getValue(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd = md.sample(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:25.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:25.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:25.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: totalWeight += iV,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: value += iV * sd.getValue(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:27.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:27.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:27.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (sd != null) {
	value += iV * sd.getValue();
	totalWeight += iV;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: totalWeight += iV,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:29.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:29.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:29.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md : microsphere) {
	final double iV = md.illumination();
	final java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd = md.sample();
	if (sd != null) {
		value += iV * sd.getValue();
		totalWeight += iV;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (sd != null) {
	value += iV * sd.getValue();
	totalWeight += iV;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:31.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:31.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:31.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return value / totalWeight,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement md : microsphere) {
	final double iV = md.illumination();
	final java.util.Map.Entry<org.apache.commons.math3.linear.RealVector, java.lang.Double> sd = md.sample();
	if (sd != null) {
		value += iV * sd.getValue();
		totalWeight += iV;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:33.590 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:33.590 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:33.591 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return v.dotProduct(w) / (v.getNorm() * w.getNorm()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return value / totalWeight,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:35.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:35.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:35.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this(org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator.DEFAULT_MICROSPHERE_ELEMENTS, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return v.dotProduct(w) / (v.getNorm() * w.getNorm()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:37.544 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:37.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:37.545 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NotPositiveException(exponent),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this(org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator.DEFAULT_MICROSPHERE_ELEMENTS, org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolator.DEFAULT_BRIGHTNESS_EXPONENT),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:39.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:39.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:39.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (exponent < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(exponent);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NotPositiveException(exponent),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:41.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:41.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:41.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(elements),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (exponent < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(exponent);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:43.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:43.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:43.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (elements <= 0) {
	throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(elements);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(elements),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:45.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:45.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:45.485 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: microsphereElements = elements,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (elements <= 0) {
	throw new org.apache.commons.math3.exception.NotStrictlyPositiveException(elements);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:47.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:47.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:47.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: brightnessExponent = exponent,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: microsphereElements = elements,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:49.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:49.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:49.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.random.UnitSphereRandomVectorGenerator rand = 
new org.apache.commons.math3.random.UnitSphereRandomVectorGenerator(xval[0].length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: brightnessExponent = exponent,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:52.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:52.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:52.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction(xval, yval, 
brightnessExponent, 
microsphereElements, 
rand),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.random.UnitSphereRandomVectorGenerator rand = 
new org.apache.commons.math3.random.UnitSphereRandomVectorGenerator(xval[0].length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:54.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:54.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:54.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction(xval, yval, 
brightnessExponent, 
microsphereElements, 
rand),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:56.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:56.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:56.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this(3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:32:58.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:32:58.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:32:58.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this(degree, degree),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this(3),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:00.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:00.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:00.360 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: xFitter = new org.apache.commons.math3.optimization.fitting.PolynomialFitter(xDegree, new org.apache.commons.math3.optimization.general.GaussNewtonOptimizer(false)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this(degree, degree),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:02.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:02.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:02.454 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: yFitter = new org.apache.commons.math3.optimization.fitting.PolynomialFitter(yDegree, new org.apache.commons.math3.optimization.general.GaussNewtonOptimizer(false)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: xFitter = new org.apache.commons.math3.optimization.fitting.PolynomialFitter(xDegree, new org.apache.commons.math3.optimization.general.GaussNewtonOptimizer(false)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:04.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:04.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:04.340 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: yFitter = new org.apache.commons.math3.optimization.fitting.PolynomialFitter(yDegree, new org.apache.commons.math3.optimization.general.GaussNewtonOptimizer(false)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:06.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:06.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:06.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] yPolyX = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:08.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:08.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:08.234 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: xFitter.clearObservations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] yPolyX = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:10.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:10.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:10.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: xFitter.addObservedPoint(1, xval[i], fval[i][j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: xFitter.clearObservations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:12.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:12.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:12.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	xFitter.addObservedPoint(1, xval[i], fval[i][j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: xFitter.addObservedPoint(1, xval[i], fval[i][j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:14.518 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:14.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:14.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: yPolyX[j] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(xFitter.fit()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	xFitter.addObservedPoint(1, xval[i], fval[i][j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:16.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:16.769 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:16.770 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	xFitter.clearObservations();
	for (int i = 0; i < xLen; i++) {
		xFitter.addObservedPoint(1, xval[i], fval[i][j]);
	}

	yPolyX[j] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(xFitter.fit());
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: yPolyX[j] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(xFitter.fit()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:19.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:19.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:19.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] fval_1 = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	xFitter.clearObservations();
	for (int i = 0; i < xLen; i++) {
		xFitter.addObservedPoint(1, xval[i], fval[i][j]);
	}

	yPolyX[j] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(xFitter.fit());
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:21.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:21.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:21.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = yPolyX[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] fval_1 = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:23.224 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:23.224 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:23.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: fval_1[i][j] = f.value(xval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = yPolyX[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:25.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:25.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:25.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	fval_1[i][j] = f.value(xval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: fval_1[i][j] = f.value(xval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:27.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:27.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:27.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = yPolyX[j];
	for (int i = 0; i < xLen; i++) {
		fval_1[i][j] = f.value(xval[i]);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	fval_1[i][j] = f.value(xval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:29.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:29.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:29.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] xPolyY = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = yPolyX[j];
	for (int i = 0; i < xLen; i++) {
		fval_1[i][j] = f.value(xval[i]);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:31.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:31.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:31.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: yFitter.clearObservations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction[] xPolyY = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction[xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:33.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:33.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:33.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: yFitter.addObservedPoint(1, yval[j], fval_1[i][j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: yFitter.clearObservations(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:35.172 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:35.172 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:35.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: yFitter.addObservedPoint(1, yval[j], fval_1[i][j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:37.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:37.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:37.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: xPolyY[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(yFitter.fit()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:39.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:39.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:39.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	yFitter.clearObservations();
	for (int j = 0; j < yLen; j++) {
		yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);
	}

	xPolyY[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(yFitter.fit());
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: xPolyY[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(yFitter.fit()),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:41.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:41.517 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:41.518 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][] fval_2 = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	yFitter.clearObservations();
	for (int j = 0; j < yLen; j++) {
		yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);
	}

	xPolyY[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(yFitter.fit());
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:43.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:43.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:43.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = xPolyY[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] fval_2 = new double[xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:46.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:46.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:46.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: fval_2[i][j] = f.value(yval[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = xPolyY[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:48.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:48.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:48.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	fval_2[i][j] = f.value(yval[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: fval_2[i][j] = f.value(yval[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:50.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:50.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:50.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = xPolyY[i];
	for (int j = 0; j < yLen; j++) {
		fval_2[i][j] = f.value(yval[j]);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	fval_2[i][j] = f.value(yval[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:52.695 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:52.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:52.696 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return super.interpolate(xval, yval, fval_2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = xPolyY[i];
	for (int j = 0; j < yLen; j++) {
		fval_2[i][j] = f.value(yval[j]);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:54.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:54.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:54.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
x.length, 3, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return super.interpolate(xval, yval, fval_2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:56.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:56.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:56.820 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (x.length < 3) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
	x.length, 3, true);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
x.length, 3, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:33:58.915 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:33:58.915 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:33:58.916 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double[] h = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (x.length < 3) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(org.apache.commons.math3.exception.util.LocalizedFormats.NUMBER_OF_POINTS, 
	x.length, 3, true);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:00.923 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:00.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:00.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: h[i] = x[i + 1] - x[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double[] h = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:03.148 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:03.149 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:03.150 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < n; i++) {
	h[i] = x[i + 1] - x[i];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: h[i] = x[i + 1] - x[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:05.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:05.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:05.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double[] mu = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < n; i++) {
	h[i] = x[i + 1] - x[i];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:07.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:07.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:07.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double[] z = new double[n + 1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double[] mu = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:09.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:09.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:09.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: mu[0] = 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double[] z = new double[n + 1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:11.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:11.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:11.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: z[0] = 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: mu[0] = 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:13.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:13.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:13.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double g = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: z[0] = 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:15.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:15.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:15.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: g = (2.0 * (x[i + 1] - x[i - 1])) - (h[i - 1] * mu[i - 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double g = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:17.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:17.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:17.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: mu[i] = h[i] / g,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: g = (2.0 * (x[i + 1] - x[i - 1])) - (h[i - 1] * mu[i - 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:19.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:19.727 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:19.728 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: z[i] = (((3.0 * (((y[i + 1] * h[i - 1]) - (y[i] * (x[i + 1] - x[i - 1]))) + (y[i - 1] * h[i]))) / 
(h[i - 1] * h[i])) - (h[i - 1] * z[i - 1])) / g,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: mu[i] = h[i] / g,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:21.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:21.756 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:21.757 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 1; i < n; i++) {
	g = (2.0 * (x[i + 1] - x[i - 1])) - (h[i - 1] * mu[i - 1]);
	mu[i] = h[i] / g;
	z[i] = (((3.0 * (((y[i + 1] * h[i - 1]) - (y[i] * (x[i + 1] - x[i - 1]))) + (y[i - 1] * h[i]))) / 
	(h[i - 1] * h[i])) - (h[i - 1] * z[i - 1])) / g;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: z[i] = (((3.0 * (((y[i + 1] * h[i - 1]) - (y[i] * (x[i + 1] - x[i - 1]))) + (y[i - 1] * h[i]))) / 
(h[i - 1] * h[i])) - (h[i - 1] * z[i - 1])) / g,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:23.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:23.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:23.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double[] b = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 1; i < n; i++) {
	g = (2.0 * (x[i + 1] - x[i - 1])) - (h[i - 1] * mu[i - 1]);
	mu[i] = h[i] / g;
	z[i] = (((3.0 * (((y[i + 1] * h[i - 1]) - (y[i] * (x[i + 1] - x[i - 1]))) + (y[i - 1] * h[i]))) / 
	(h[i - 1] * h[i])) - (h[i - 1] * z[i - 1])) / g;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:25.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:25.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:25.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double[] c = new double[n + 1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double[] b = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:27.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:27.708 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:27.709 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double[] d = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double[] c = new double[n + 1],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:29.571 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:29.571 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:29.572 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: z[n] = 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double[] d = new double[n],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:31.644 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:31.645 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:31.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: c[n] = 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: z[n] = 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:33.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:33.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:33.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: c[j] = z[j] - (mu[j] * c[j + 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: c[n] = 0.0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:35.890 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:35.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:35.891 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: b[j] = ((y[j + 1] - y[j]) / h[j]) - ((h[j] * (c[j + 1] + (2.0 * c[j]))) / 3.0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: c[j] = z[j] - (mu[j] * c[j + 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:38.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:38.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:38.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: d[j] = (c[j + 1] - c[j]) / (3.0 * h[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: b[j] = ((y[j + 1] - y[j]) / h[j]) - ((h[j] * (c[j + 1] + (2.0 * c[j]))) / 3.0),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:40.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:40.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:40.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = n - 1; j >= 0; j--) {
	c[j] = z[j] - (mu[j] * c[j + 1]);
	b[j] = ((y[j + 1] - y[j]) / h[j]) - ((h[j] * (c[j + 1] + (2.0 * c[j]))) / 3.0);
	d[j] = (c[j + 1] - c[j]) / (3.0 * h[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: d[j] = (c[j + 1] - c[j]) / (3.0 * h[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:42.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:42.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:42.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: double[] coefficients = new double[4],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = n - 1; j >= 0; j--) {
	c[j] = z[j] - (mu[j] * c[j + 1]);
	b[j] = ((y[j + 1] - y[j]) / h[j]) - ((h[j] * (c[j + 1] + (2.0 * c[j]))) / 3.0);
	d[j] = (c[j + 1] - c[j]) / (3.0 * h[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:44.239 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:44.239 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:44.240 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: coefficients[1] = b[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double[] coefficients = new double[4],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:46.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:46.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:46.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: coefficients[2] = c[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: coefficients[1] = b[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:48.075 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:48.075 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:48.076 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: coefficients[3] = d[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: coefficients[2] = c[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:50.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:50.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:50.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < n; i++) {
	coefficients[0] = y[i];
	coefficients[1] = b[i];
	coefficients[2] = c[i];
	coefficients[3] = d[i];
	polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: coefficients[3] = d[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:52.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:52.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:52.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < n; i++) {
	coefficients[0] = y[i];
	coefficients[1] = b[i];
	coefficients[2] = c[i];
	coefficients[3] = d[i];
	polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:54.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:54.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:54.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
	a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:55.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:55.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:55.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
	for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
		a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
	a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:57.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:57.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:57.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
		for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
			a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
	for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
		a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:34:59.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:34:59.761 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:34:59.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(z, 0, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
		for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
			a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:01.679 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:01.679 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:01.680 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((z < 0) || (z > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(z, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(z, 0, 1),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:03.686 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:03.686 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:03.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double z2 = z * z,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((z < 0) || (z > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(z, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:05.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:05.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:05.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double z3 = z2 * z,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double z2 = z * z,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:07.454 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:07.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:07.455 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] pZ = new double[]{ 1, z, z2, z3 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double z3 = z2 * z,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:09.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:09.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:09.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] pZ = new double[]{ 1, z, z2, z3 },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:11.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:11.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:11.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
	result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:13.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:13.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:13.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
	for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
		result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
	result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:15.703 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:15.703 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:15.704 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
		for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
			result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
	for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
		result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:17.925 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:17.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:17.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int zLen = z.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
		for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
			result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:19.969 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:19.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:19.971 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (((((xLen == 0) || (yLen == 0)) || (z.length == 0)) || (f.length == 0)) || (f[0].length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int zLen = z.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:22.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:22.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:22.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdZ.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (((((xLen == 0) || (yLen == 0)) || (z.length == 0)) || (f.length == 0)) || (f[0].length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:24.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:24.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:24.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xLen != dFdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdZ.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdZ.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:26.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:26.176 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:26.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdZ.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != dFdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, dFdZ.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:28.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:28.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:28.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xLen != d2FdXdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdZ.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdZ.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:30.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:30.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:30.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdYdZ.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != d2FdXdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdXdZ.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:32.066 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:32.066 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:32.067 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xLen != d2FdYdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdYdZ.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdYdZ.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:34.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:34.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:34.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d3FdXdYdZ.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != d2FdYdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d2FdYdZ.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:36.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:36.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:36.198 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xLen != d3FdXdYdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d3FdXdYdZ.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d3FdXdYdZ.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:38.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:38.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:38.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.util.MathArrays.checkOrder(z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != d3FdXdYdZ.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, d3FdXdYdZ.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:39.980 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:39.980 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:39.981 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: zval = z.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.util.MathArrays.checkOrder(z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:41.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:41.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:41.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int lastK = zLen - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: zval = z.clone(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:43.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:43.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:43.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: splines = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction[lastI][lastJ][lastK],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int lastK = zLen - 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:45.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:45.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:45.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: splines = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction[lastI][lastJ][lastK],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:47.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:47.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:47.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (dFdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:49.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:49.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:49.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (dFdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:51.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:51.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:51.627 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (d2FdXdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:53.500 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:53.501 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:53.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (d2FdXdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:55.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:55.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:55.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (d2FdYdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:57.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:57.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:57.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (d2FdYdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:35:59.284 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:35:59.284 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:35:59.285 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (d3FdXdYdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:01.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:01.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:01.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (d3FdXdYdZ[i].length != yLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:03.064 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:03.064 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:03.065 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (f[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:05.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:05.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:05.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (f[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:07.017 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:07.017 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:07.018 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (dFdX[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:08.928 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:08.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:08.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (dFdX[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:10.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:10.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:10.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (dFdY[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:12.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:12.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:12.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (dFdY[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:14.583 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:14.583 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:14.584 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (dFdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:16.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:16.451 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:16.452 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (dFdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:18.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:18.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:18.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (d2FdXdY[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:20.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:20.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:20.186 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (d2FdXdY[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:22.100 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:22.100 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:22.101 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (d2FdXdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:24.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:24.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:24.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (d2FdXdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:25.994 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:25.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:25.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (d2FdYdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:27.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:27.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:27.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (d2FdYdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:30.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:30.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:30.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (d3FdXdYdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:32.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:32.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:32.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int kp1 = k + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (d3FdXdYdZ[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:34.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:34.251 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:34.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] beta = new double[]{ 
f[i][j][k], f[ip1][j][k], 
f[i][jp1][k], f[ip1][jp1][k], 
f[i][j][kp1], f[ip1][j][kp1], 
f[i][jp1][kp1], f[ip1][jp1][kp1], 

dFdX[i][j][k], dFdX[ip1][j][k], 
dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

dFdY[i][j][k], dFdY[ip1][j][k], 
dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

dFdZ[i][j][k], dFdZ[ip1][j][k], 
dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int kp1 = k + 1,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:36.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:36.349 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:36.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] beta = new double[]{ 
f[i][j][k], f[ip1][j][k], 
f[i][jp1][k], f[ip1][jp1][k], 
f[i][j][kp1], f[ip1][j][kp1], 
f[i][jp1][kp1], f[ip1][jp1][kp1], 

dFdX[i][j][k], dFdX[ip1][j][k], 
dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

dFdY[i][j][k], dFdY[ip1][j][k], 
dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

dFdZ[i][j][k], dFdZ[ip1][j][k], 
dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] },commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:38.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:38.339 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:38.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < lastK; k++) {
	final int kp1 = k + 1;

	final double[] beta = new double[]{ 
	f[i][j][k], f[ip1][j][k], 
	f[i][jp1][k], f[ip1][jp1][k], 
	f[i][j][kp1], f[ip1][j][kp1], 
	f[i][jp1][kp1], f[ip1][jp1][kp1], 

	dFdX[i][j][k], dFdX[ip1][j][k], 
	dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
	dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
	dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

	dFdY[i][j][k], dFdY[ip1][j][k], 
	dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
	dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
	dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

	dFdZ[i][j][k], dFdZ[ip1][j][k], 
	dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
	dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
	dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

	d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
	d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
	d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
	d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

	d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
	d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
	d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
	d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

	d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
	d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
	d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
	d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

	d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
	d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
	d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
	d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


	splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:40.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:40.428 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:40.429 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < lastJ; j++) {
	if (f[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
	}
	if (dFdX[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
	}
	if (dFdY[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
	}
	if (dFdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
	}
	if (d2FdXdY[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
	}
	if (d2FdXdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
	}
	if (d2FdYdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
	}
	if (d3FdXdYdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
	}

	final int jp1 = j + 1;
	for (int k = 0; k < lastK; k++) {
		final int kp1 = k + 1;

		final double[] beta = new double[]{ 
		f[i][j][k], f[ip1][j][k], 
		f[i][jp1][k], f[ip1][jp1][k], 
		f[i][j][kp1], f[ip1][j][kp1], 
		f[i][jp1][kp1], f[ip1][jp1][kp1], 

		dFdX[i][j][k], dFdX[ip1][j][k], 
		dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
		dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
		dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

		dFdY[i][j][k], dFdY[ip1][j][k], 
		dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
		dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
		dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

		dFdZ[i][j][k], dFdZ[ip1][j][k], 
		dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
		dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
		dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

		d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
		d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
		d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
		d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

		d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
		d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
		d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
		d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

		d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
		d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
		d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
		d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

		d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
		d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
		d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
		d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


		splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < lastK; k++) {
	final int kp1 = k + 1;

	final double[] beta = new double[]{ 
	f[i][j][k], f[ip1][j][k], 
	f[i][jp1][k], f[ip1][jp1][k], 
	f[i][j][kp1], f[ip1][j][kp1], 
	f[i][jp1][kp1], f[ip1][jp1][kp1], 

	dFdX[i][j][k], dFdX[ip1][j][k], 
	dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
	dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
	dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

	dFdY[i][j][k], dFdY[ip1][j][k], 
	dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
	dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
	dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

	dFdZ[i][j][k], dFdZ[ip1][j][k], 
	dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
	dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
	dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

	d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
	d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
	d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
	d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

	d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
	d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
	d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
	d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

	d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
	d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
	d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
	d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

	d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
	d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
	d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
	d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


	splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:42.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:42.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:42.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < lastI; i++) {
	if (f[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
	}
	if (dFdX[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
	}
	if (dFdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
	}
	if (dFdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen);
	}
	if (d2FdXdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
	}
	if (d2FdXdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen);
	}
	if (d2FdYdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen);
	}
	if (d3FdXdYdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
	}

	final int ip1 = i + 1;
	for (int j = 0; j < lastJ; j++) {
		if (f[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
		}
		if (dFdX[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
		}
		if (dFdY[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
		}
		if (dFdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
		}
		if (d2FdXdY[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
		}
		if (d2FdXdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
		}
		if (d2FdYdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
		}
		if (d3FdXdYdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
		}

		final int jp1 = j + 1;
		for (int k = 0; k < lastK; k++) {
			final int kp1 = k + 1;

			final double[] beta = new double[]{ 
			f[i][j][k], f[ip1][j][k], 
			f[i][jp1][k], f[ip1][jp1][k], 
			f[i][j][kp1], f[ip1][j][kp1], 
			f[i][jp1][kp1], f[ip1][jp1][kp1], 

			dFdX[i][j][k], dFdX[ip1][j][k], 
			dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
			dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
			dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

			dFdY[i][j][k], dFdY[ip1][j][k], 
			dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
			dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
			dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

			dFdZ[i][j][k], dFdZ[ip1][j][k], 
			dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
			dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
			dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

			d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
			d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
			d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
			d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

			d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
			d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
			d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
			d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

			d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
			d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
			d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
			d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

			d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
			d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
			d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
			d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


			splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < lastJ; j++) {
	if (f[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
	}
	if (dFdX[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
	}
	if (dFdY[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
	}
	if (dFdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
	}
	if (d2FdXdY[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
	}
	if (d2FdXdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
	}
	if (d2FdYdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
	}
	if (d3FdXdYdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
	}

	final int jp1 = j + 1;
	for (int k = 0; k < lastK; k++) {
		final int kp1 = k + 1;

		final double[] beta = new double[]{ 
		f[i][j][k], f[ip1][j][k], 
		f[i][jp1][k], f[ip1][jp1][k], 
		f[i][j][kp1], f[ip1][j][kp1], 
		f[i][jp1][kp1], f[ip1][jp1][kp1], 

		dFdX[i][j][k], dFdX[ip1][j][k], 
		dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
		dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
		dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

		dFdY[i][j][k], dFdY[ip1][j][k], 
		dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
		dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
		dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

		dFdZ[i][j][k], dFdZ[ip1][j][k], 
		dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
		dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
		dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

		d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
		d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
		d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
		d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

		d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
		d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
		d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
		d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

		d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
		d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
		d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
		d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

		d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
		d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
		d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
		d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


		splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:44.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:44.866 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:44.867 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int k = searchIndex(z, zval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < lastI; i++) {
	if (f[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
	}
	if (dFdX[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
	}
	if (dFdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
	}
	if (dFdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen);
	}
	if (d2FdXdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
	}
	if (d2FdXdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen);
	}
	if (d2FdYdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen);
	}
	if (d3FdXdYdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
	}

	final int ip1 = i + 1;
	for (int j = 0; j < lastJ; j++) {
		if (f[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
		}
		if (dFdX[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
		}
		if (dFdY[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
		}
		if (dFdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
		}
		if (d2FdXdY[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
		}
		if (d2FdXdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
		}
		if (d2FdYdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
		}
		if (d3FdXdYdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
		}

		final int jp1 = j + 1;
		for (int k = 0; k < lastK; k++) {
			final int kp1 = k + 1;

			final double[] beta = new double[]{ 
			f[i][j][k], f[ip1][j][k], 
			f[i][jp1][k], f[ip1][jp1][k], 
			f[i][j][kp1], f[ip1][j][kp1], 
			f[i][jp1][kp1], f[ip1][jp1][kp1], 

			dFdX[i][j][k], dFdX[ip1][j][k], 
			dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
			dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
			dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

			dFdY[i][j][k], dFdY[ip1][j][k], 
			dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
			dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
			dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

			dFdZ[i][j][k], dFdZ[ip1][j][k], 
			dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
			dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
			dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

			d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
			d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
			d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
			d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

			d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
			d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
			d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
			d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

			d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
			d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
			d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
			d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

			d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
			d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
			d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
			d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


			splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:47.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:47.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:47.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(z, zval[0], zval[zval.length - 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int k = searchIndex(z, zval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:49.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:49.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:49.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (k == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(z, zval[0], zval[zval.length - 1]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.OutOfRangeException(z, zval[0], zval[zval.length - 1]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:51.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:51.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:51.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double zN = (z - zval[k]) / (zval[k + 1] - zval[k]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (k == (-1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(z, zval[0], zval[zval.length - 1]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:53.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:53.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:53.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return splines[i][j][k].value(xN, yN, zN),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double zN = (z - zval[k]) / (zval[k + 1] - zval[k]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:55.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:55.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:55.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int sz = 64,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return splines[i][j][k].value(xN, yN, zN),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:57.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:57.629 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:57.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] a = new double[sz],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int sz = 64,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:36:59.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:36:59.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:36:59.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] row = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] a = new double[sz],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:01.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:01.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:01.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < sz; j++) {
	result += row[j] * beta[j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] row = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:03.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:03.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:03.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < sz; i++) {
	double result = 0;
	final double[] row = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[i];
	for (int j = 0; j < sz; j++) {
		result += row[j] * beta[j];
	}
	a[i] = result;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < sz; j++) {
	result += row[j] * beta[j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:05.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:05.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:05.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if ((((xval.length == 0) || (yval.length == 0)) || (zval.length == 0)) || (fval.length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < sz; i++) {
	double result = 0;
	final double[] row = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[i];
	for (int j = 0; j < sz; j++) {
		result += row[j] * beta[j];
	}
	a[i] = result;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:07.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:07.564 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:07.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.util.MathArrays.checkOrder(zval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((((xval.length == 0) || (yval.length == 0)) || (zval.length == 0)) || (fval.length == 0)) {
	throw new org.apache.commons.math3.exception.NoDataException();
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:09.449 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:09.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:09.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int zLen = zval.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.util.MathArrays.checkOrder(zval),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:11.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:11.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:11.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] fvalXY = new double[zLen][xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int zLen = zval.length,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:13.211 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:13.211 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:13.212 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] fvalZX = new double[yLen][zLen][xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] fvalXY = new double[zLen][xLen][yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:15.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:15.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:15.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] fvalZX = new double[yLen][zLen][xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:17.318 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:17.318 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:17.319 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (fval[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:19.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:19.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:19.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double v = fval[i][j][k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (fval[i][j].length != zLen) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:21.712 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:21.712 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:21.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: fvalXY[k][i][j] = v,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double v = fval[i][j][k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:23.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:23.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:23.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: fvalZX[j][k][i] = v,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: fvalXY[k][i][j] = v,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:25.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:25.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:25.856 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < zLen; k++) {
	final double v = fval[i][j][k];
	fvalXY[k][i][j] = v;
	fvalZX[j][k][i] = v;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: fvalZX[j][k][i] = v,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:27.987 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:27.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:27.988 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	if (fval[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
	}

	for (int k = 0; k < zLen; k++) {
		final double v = fval[i][j][k];
		fvalXY[k][i][j] = v;
		fvalZX[j][k][i] = v;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < zLen; k++) {
	final double v = fval[i][j][k];
	fvalXY[k][i][j] = v;
	fvalZX[j][k][i] = v;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:29.875 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:29.875 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:29.876 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}

	for (int j = 0; j < yLen; j++) {
		if (fval[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
		}

		for (int k = 0; k < zLen; k++) {
			final double v = fval[i][j][k];
			fvalXY[k][i][j] = v;
			fvalZX[j][k][i] = v;
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	if (fval[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
	}

	for (int k = 0; k < zLen; k++) {
		final double v = fval[i][j][k];
		fvalXY[k][i][j] = v;
		fvalZX[j][k][i] = v;
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:31.902 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:31.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:31.903 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator bsi = new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}

	for (int j = 0; j < yLen; j++) {
		if (fval[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
		}

		for (int k = 0; k < zLen; k++) {
			final double v = fval[i][j][k];
			fvalXY[k][i][j] = v;
			fvalZX[j][k][i] = v;
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:33.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:33.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:33.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] xSplineYZ = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator bsi = new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolator(),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:35.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:35.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:35.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] xSplineYZ = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[xLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:37.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:37.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:37.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:39.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:39.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:39.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] ySplineZX = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:41.654 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:41.654 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:41.655 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] ySplineZX = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[yLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:43.556 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:43.556 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:43.557 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:45.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:45.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:45.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] zSplineXY = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:47.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:47.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:47.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[] zSplineXY = 
new org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction[zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:49.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:49.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:49.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < zLen; k++) {
	zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k]),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:51.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:51.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:51.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] dFdX = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < zLen; k++) {
	zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k]);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:54.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:54.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:54.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] dFdY = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] dFdX = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:56.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:56.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:56.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] d2FdXdY = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] dFdY = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:37:58.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:37:58.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:37:58.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = zSplineXY[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] d2FdXdY = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:01.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:01.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:01.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double y = yval[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = zSplineXY[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:03.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:03.462 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:03.463 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: dFdX[i][j][k] = f.partialDerivativeX(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double y = yval[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:05.749 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:05.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:05.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: dFdX[i][j][k] = f.partialDerivativeX(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:08.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:08.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:08.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: dFdY[i][j][k] = f.partialDerivativeY(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:10.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:10.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:10.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	final double y = yval[j];
	dFdX[i][j][k] = f.partialDerivativeX(x, y);
	dFdY[i][j][k] = f.partialDerivativeY(x, y);
	d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:12.527 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:12.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:12.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	final double x = xval[i];
	for (int j = 0; j < yLen; j++) {
		final double y = yval[j];
		dFdX[i][j][k] = f.partialDerivativeX(x, y);
		dFdY[i][j][k] = f.partialDerivativeY(x, y);
		d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	final double y = yval[j];
	dFdX[i][j][k] = f.partialDerivativeX(x, y);
	dFdY[i][j][k] = f.partialDerivativeY(x, y);
	d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:14.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:14.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:14.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < zLen; k++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = zSplineXY[k];
	for (int i = 0; i < xLen; i++) {
		final double x = xval[i];
		for (int j = 0; j < yLen; j++) {
			final double y = yval[j];
			dFdX[i][j][k] = f.partialDerivativeX(x, y);
			dFdY[i][j][k] = f.partialDerivativeY(x, y);
			d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	final double x = xval[i];
	for (int j = 0; j < yLen; j++) {
		final double y = yval[j];
		dFdX[i][j][k] = f.partialDerivativeX(x, y);
		dFdY[i][j][k] = f.partialDerivativeY(x, y);
		d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:17.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:17.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:17.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] dFdZ = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < zLen; k++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = zSplineXY[k];
	for (int i = 0; i < xLen; i++) {
		final double x = xval[i];
		for (int j = 0; j < yLen; j++) {
			final double y = yval[j];
			dFdX[i][j][k] = f.partialDerivativeX(x, y);
			dFdY[i][j][k] = f.partialDerivativeY(x, y);
			d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:19.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:19.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:19.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] d2FdYdZ = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] dFdZ = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:21.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:21.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:21.601 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = xSplineYZ[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] d2FdYdZ = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:23.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:23.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:23.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double z = zval[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = xSplineYZ[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:26.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:26.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:26.262 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: dFdZ[i][j][k] = f.partialDerivativeY(y, z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double z = zval[k],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:28.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:28.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:28.605 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: dFdZ[i][j][k] = f.partialDerivativeY(y, z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:30.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:30.869 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:30.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < zLen; k++) {
	final double z = zval[k];
	dFdZ[i][j][k] = f.partialDerivativeY(y, z);
	d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:33.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:33.146 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:33.147 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	final double y = yval[j];
	for (int k = 0; k < zLen; k++) {
		final double z = zval[k];
		dFdZ[i][j][k] = f.partialDerivativeY(y, z);
		d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < zLen; k++) {
	final double z = zval[k];
	dFdZ[i][j][k] = f.partialDerivativeY(y, z);
	d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:35.456 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:35.456 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:35.457 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = xSplineYZ[i];
	for (int j = 0; j < yLen; j++) {
		final double y = yval[j];
		for (int k = 0; k < zLen; k++) {
			final double z = zval[k];
			dFdZ[i][j][k] = f.partialDerivativeY(y, z);
			d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	final double y = yval[j];
	for (int k = 0; k < zLen; k++) {
		final double z = zval[k];
		dFdZ[i][j][k] = f.partialDerivativeY(y, z);
		d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:37.737 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:37.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:37.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] d2FdZdX = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = xSplineYZ[i];
	for (int j = 0; j < yLen; j++) {
		final double y = yval[j];
		for (int k = 0; k < zLen; k++) {
			final double z = zval[k];
			dFdZ[i][j][k] = f.partialDerivativeY(y, z);
			d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:39.994 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:39.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:39.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = ySplineZX[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] d2FdZdX = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:42.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:42.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:42.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = ySplineZX[j],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:44.493 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:44.493 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:44.494 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	final double x = xval[i];
	d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:46.745 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:46.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:46.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < zLen; k++) {
	final double z = zval[k];
	for (int i = 0; i < xLen; i++) {
		final double x = xval[i];
		d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	final double x = xval[i];
	d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:49.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:49.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:49.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = ySplineZX[j];
	for (int k = 0; k < zLen; k++) {
		final double z = zval[k];
		for (int i = 0; i < xLen; i++) {
			final double x = xval[i];
			d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < zLen; k++) {
	final double z = zval[k];
	for (int i = 0; i < xLen; i++) {
		final double x = xval[i];
		d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:51.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:51.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:51.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[][][] d3FdXdYdZ = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = ySplineZX[j];
	for (int k = 0; k < zLen; k++) {
		final double z = zval[k];
		for (int i = 0; i < xLen; i++) {
			final double x = xval[i];
			d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:53.809 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:53.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:53.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int nK = nextIndex(k, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][][] d3FdXdYdZ = new double[xLen][yLen][zLen],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:56.064 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:56.064 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:56.065 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int pK = previousIndex(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int nK = nextIndex(k, zLen),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:38:58.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:38:58.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:38:58.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK])),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int pK = previousIndex(k),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:00.554 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:00.554 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:00.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int k = 0; k < zLen; k++) {
	final int nK = nextIndex(k, zLen);
	final int pK = previousIndex(k);


	d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
	fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
	fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
	fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
	(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK])),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:02.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:02.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:02.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int j = 0; j < yLen; j++) {
	final int nJ = nextIndex(j, yLen);
	final int pJ = previousIndex(j);
	for (int k = 0; k < zLen; k++) {
		final int nK = nextIndex(k, zLen);
		final int pK = previousIndex(k);


		d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
		fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
		fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
		fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
		(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int k = 0; k < zLen; k++) {
	final int nK = nextIndex(k, zLen);
	final int pK = previousIndex(k);


	d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
	fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
	fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
	fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
	(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:04.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:04.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:04.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xLen; i++) {
	final int nI = nextIndex(i, xLen);
	final int pI = previousIndex(i);
	for (int j = 0; j < yLen; j++) {
		final int nJ = nextIndex(j, yLen);
		final int pJ = previousIndex(j);
		for (int k = 0; k < zLen; k++) {
			final int nK = nextIndex(k, zLen);
			final int pK = previousIndex(k);


			d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
			fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
			fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
			fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
			(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < yLen; j++) {
	final int nJ = nextIndex(j, yLen);
	final int pJ = previousIndex(j);
	for (int k = 0; k < zLen; k++) {
		final int nK = nextIndex(k, zLen);
		final int pK = previousIndex(k);


		d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
		fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
		fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
		fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
		(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:06.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:06.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:06.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction(xval, yval, zval, fval, 
dFdX, dFdY, dFdZ, 
d2FdXdY, d2FdZdX, d2FdYdZ, 
d3FdXdYdZ),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xLen; i++) {
	final int nI = nextIndex(i, xLen);
	final int pI = previousIndex(i);
	for (int j = 0; j < yLen; j++) {
		final int nJ = nextIndex(j, yLen);
		final int pJ = previousIndex(j);
		for (int k = 0; k < zLen; k++) {
			final int nK = nextIndex(k, zLen);
			final int pK = previousIndex(k);


			d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
			fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
			fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
			fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
			(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
		}
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:08.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:08.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:08.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.interpolator = interpolator,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return new org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction(xval, yval, zval, fval, 
dFdX, dFdY, dFdZ, 
d2FdXdY, d2FdZdX, d2FdYdZ, 
d3FdXdYdZ),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:10.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:10.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:10.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.period = period,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.interpolator = interpolator,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:12.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:12.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:12.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this.extend = extend,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.period = period,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:14.565 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:14.565 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:14.566 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: this(interpolator, period, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator.DEFAULT_EXTEND),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.extend = extend,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:16.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:16.622 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:16.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(xval.length, extend, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this(interpolator, period, org.apache.commons.math3.analysis.interpolation.UnivariatePeriodicInterpolator.DEFAULT_EXTEND),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:18.904 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:18.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:18.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: if (xval.length < extend) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(xval.length, extend, true);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooSmallException(xval.length, extend, true),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:21.172 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:21.172 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:21.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double offset = xval[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xval.length < extend) {
	throw new org.apache.commons.math3.exception.NumberIsTooSmallException(xval.length, extend, true);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:23.359 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:23.359 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:23.360 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int len = xval.length + (extend * 2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double offset = xval[0],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:25.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:25.622 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:25.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] x = new double[len],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int len = xval.length + (extend * 2),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:27.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:27.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:27.940 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final double[] y = new double[len],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] x = new double[len],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:30.091 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:30.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:30.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final int index = i + extend,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[] y = new double[len],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:32.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:32.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:32.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final int index = i + extend,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:34.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:34.521 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:34.522 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: y[index] = yval[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:36.834 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:36.835 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:36.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < xval.length; i++) {
	final int index = i + extend;
	x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset);
	y[index] = yval[i];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: y[index] = yval[i],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:39.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:39.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:39.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: int index = (xval.length - extend) + i,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < xval.length; i++) {
	final int index = i + extend;
	x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset);
	y[index] = yval[i];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:41.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:41.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:41.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: x[i] = org.apache.commons.math3.util.MathUtils.reduce(xval[index], period, offset) - period,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: int index = (xval.length - extend) + i,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:43.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:43.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:43.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: y[i] = yval[index],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: x[i] = org.apache.commons.math3.util.MathUtils.reduce(xval[index], period, offset) - period,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:45.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:45.224 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:45.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: index = (len - extend) + i,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: y[i] = yval[index],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:47.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:47.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:47.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset) + period,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: index = (len - extend) + i,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:49.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:49.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:49.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: for (int i = 0; i < extend; i++) {
	int index = (xval.length - extend) + i;
	x[i] = org.apache.commons.math3.util.MathUtils.reduce(xval[index], period, offset) - period;
	y[i] = yval[index];

	index = (len - extend) + i;
	x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset) + period;
	y[index] = yval[i];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset) + period,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:51.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:51.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:51.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: org.apache.commons.math3.util.MathArrays.sortInPlace(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < extend; i++) {
	int index = (xval.length - extend) + i;
	x[i] = org.apache.commons.math3.util.MathUtils.reduce(xval[index], period, offset) - period;
	y[i] = yval[index];

	index = (len - extend) + i;
	x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset) + period;
	y[index] = yval[i];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:54.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:54.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:54.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction f = interpolator.interpolate(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: org.apache.commons.math3.util.MathArrays.sortInPlace(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:56.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:56.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:56.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return f.value(org.apache.commons.math3.util.MathUtils.reduce(x, period, offset)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final org.apache.commons.math3.analysis.UnivariateFunction f = interpolator.interpolate(x, y),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:39:58.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:39:58.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:39:58.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: return new org.apache.commons.math3.analysis.UnivariateFunction() {
	public double value(final double x) {
		return f.value(org.apache.commons.math3.util.MathUtils.reduce(x, period, offset));
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: return f.value(org.apache.commons.math3.util.MathUtils.reduce(x, period, offset)),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:00.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:00.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:00.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.a = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:02.674 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:02.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:02.675 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:04.948 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:04.948 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:04.949 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
	}
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:07.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:07.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:07.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if ((y < 0) || (y > 1)) {
	throw new org.apache.commons.math3.exception.OutOfRangeException(y, 0, 1);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:09.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:09.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:09.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: double result = 0,commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:10.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:10.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:10.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: final double[][] aX = new double[org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N][org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N],commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:12.887 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:12.887 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:12.888 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: if (xLen != f.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(xLen, f.length);
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:14.790 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:14.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:14.791 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < 16; j++) {
	result += row[j] * beta[j];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:16.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:16.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:16.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int j = 0; j < (n - i); j++) {
	final double denominator = x[j + i] - x[j];
	divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
, ingredientB: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"

00:40:18.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:40:18.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:40:18.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(x.length, y.length),commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final double[] bottom1 = bottomDiagonal.get(n - (j + 1)), commit: Added Hermite interpolator.
}, ingB: {code: for (int i = 1; i < n; i++) {
	for (int j = 0; j < (n - i); j++) {
		final double denominator = x[j + i] - x[j];
		divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
	}
	a[i] = divdiff[0];
},commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Fixed a wrong assumption on BSP tree attributes.

00:41:01.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:01.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:01.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: final boolean direct = org.apache.commons.math3.util.FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((tree.getCut() == null) && ((java.lang.Boolean) (tree.getAttribute()))) {

	setSize(java.lang.Double.POSITIVE_INFINITY);
	setBarycenter(org.apache.commons.math3.geometry.euclidean.twod.Vector2D.NaN);
} else {
	setSize(0);
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(0, 0));
},commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: final boolean direct = org.apache.commons.math3.util.FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

00:41:13.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:13.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:13.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: minus.chopOffMinus(hyperplane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterize(node.getMinus(), plusChar[0], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: minus.chopOffMinus(hyperplane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: tree.visit(new org.apache.commons.math3.geometry.partitioning.AbstractRegion.BoundaryBuilder<S>()),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

00:41:15.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:41:15.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:41:15.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: minus.chopOffMinus(hyperplane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterize(node.getMinus(), plusChar[1], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: minus.chopOffMinus(hyperplane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: characterize(node.getMinus(), plusChar[0], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:42:08.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:08.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:08.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] init = getStartPoint(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:42:10.708 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:10.708 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:10.709 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] uB = getUpperBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lB = getLowerBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:42:12.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:12.987 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:12.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] uB = getUpperBound(),commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:42:15.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:15.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:15.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean hasInfiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasFiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Use non-deprecated ctor.
, ingredientB: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.

00:42:17.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:17.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:17.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.linear.EigenDecomposition eig = new org.apache.commons.math3.linear.EigenDecomposition(C),commit: Use non-deprecated ctor.
}, sim: -0.087463
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int c = 0; c < m.getColumnDimension(); c++) {
	d[r][c] = m.getEntry(r, c) * n.getEntry(r, c);
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean hasInfiniteBounds = false,commit: MATH-698 Made "CMAESOptimizer" a subclass of "BaseAbstractMultivariateSimpleBoundsOptimizer". The original code does not support mixing finite and infinite bounds (no constraints) on the variables; a check for this incompatibility is thus performed, throwing a "MathUnsuppportedException" if failing.
}, sim: 0.049010
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: avoid division by zero when dealing with single-point intervals sets
, ingredientB: avoid division by zero when dealing with single-point intervals sets

00:42:40.764 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:40.764 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:40.765 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation()),commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: setBarycenter(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(sum / size)),commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: avoid division by zero when dealing with single-point intervals sets
, ingredientB: avoid division by zero when dealing with single-point intervals sets

00:42:43.046 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:43.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:43.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (size >= org.apache.commons.math3.util.Precision.SAFE_MIN) {
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(sum / size));
} else {
	setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation());
},commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation()),commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: avoid division by zero when dealing with single-point intervals sets
, ingredientB: avoid division by zero when dealing with single-point intervals sets

00:42:45.142 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:42:45.142 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:42:45.143 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(size)) {
	setBarycenter(org.apache.commons.math3.geometry.euclidean.oned.Vector1D.NaN);
} else if (size >= org.apache.commons.math3.util.Precision.SAFE_MIN) {
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(sum / size));
} else {
	setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation());
},commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: return x, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (size >= org.apache.commons.math3.util.Precision.SAFE_MIN) {
	setBarycenter(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(sum / size));
} else {
	setBarycenter(((org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint) (getTree(false).getCut().getHyperplane())).getLocation());
},commit: avoid division by zero when dealing with single-point intervals sets
}, sim: -0.045351
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

00:43:26.215 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:26.215 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:26.216 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: parentTree.minus = this, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterize(node.getMinus(), plusChar[0], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: parentTree.minus = this, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: tree.visit(new org.apache.commons.math3.geometry.partitioning.AbstractRegion.BoundaryBuilder<S>()),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: Replaced Characterization by an internal class in AbstractRegion.
, ingredientB: Replaced Characterization by an internal class in AbstractRegion.

00:43:28.337 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:43:28.337 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:43:28.338 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: parentTree.minus = this, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: characterize(node.getMinus(), plusChar[1], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: parentTree.minus = this, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: characterize(node.getMinus(), plusChar[0], minusChar),commit: Replaced Characterization by an internal class in AbstractRegion.
}, sim: 0.063816
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: "final", formatting.
, ingredientB: "final", formatting.

00:45:09.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:09.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:09.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] cov = getCovariances(),commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] sig = new double[cols],commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

00:45:11.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:11.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:11.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]),commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] cov = getCovariances(),commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

00:45:14.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:14.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:14.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]),commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] cov = getCovariances(),commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

00:45:16.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:16.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:16.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]),commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] sig = new double[cols],commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

00:45:18.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:18.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:18.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < sig.length; ++i) {
	sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]);
},commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] sig = new double[cols],commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.

00:45:20.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:20.613 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:20.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < sig.length; ++i) {
	sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]);
},commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]),commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: "final", formatting.

00:45:22.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:22.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:22.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return sig,commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] sig = new double[cols],commit: "final", formatting.
}, sim: -0.164148
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:121) - ingredientA: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
, ingredientB: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.

00:45:24.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
00:45:24.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
00:45:24.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:128) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return sig,commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:134) - modif: {code: for (int j = i; j < cols; ++j) {
	double sum = 0;
	for (int k = 0; k < rows; ++k) {
		sum += weightedResidualJacobian[k][i] * weightedResidualJacobian[k][j];
	}
	jTj[i][j] = sum;
	jTj[j][i] = sum;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < sig.length; ++i) {
	sig[i] = org.apache.commons.math3.util.FastMath.sqrt(cov[i][i]);
},commit: In o.a.c.m3.optimization.general.AbstractLeastSquaresOptimizer   - deprecated guessParametersErrors()   - created getSigma() which should be used instead (but is not strictly equivalent). Updated unit tests accordingly.
}, sim: -0.014399
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:106) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:98) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:92) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.belowMaxTime(AstorCoreEngine.java:278) - 
 No more time for operating
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 7201.085
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1054
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 9756.797


Node: 1c17d00d642d



Date: Tue Nov 26 02:13:50 EST 2019

cd /script/jGenProg_Defects4J_Math_28;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-28 \
	-failing org.apache.commons.math3.optimization.linear.SimplexSolverTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_28/target/classes/:/script/jGenProg_Defects4J_Math_28/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

