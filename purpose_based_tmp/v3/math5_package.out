Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
log4j:ERROR setFile(null,true) call failed.
java.io.FileNotFoundException:  (No such file or directory)
	at java.io.FileOutputStream.open0(Native Method)
	at java.io.FileOutputStream.open(FileOutputStream.java:270)
	at java.io.FileOutputStream.<init>(FileOutputStream.java:213)
	at java.io.FileOutputStream.<init>(FileOutputStream.java:133)
	at org.apache.log4j.FileAppender.setFile(FileAppender.java:294)
	at org.apache.log4j.RollingFileAppender.setFile(RollingFileAppender.java:207)
	at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:165)
	at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:307)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:172)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:104)
	at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:842)
	at org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:768)
	at org.apache.log4j.PropertyConfigurator.parseCatsAndRenderers(PropertyConfigurator.java:672)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:516)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:580)
	at org.apache.log4j.helpers.OptionConverter.selectAndConfigure(OptionConverter.java:526)
	at org.apache.log4j.LogManager.<clinit>(LogManager.java:127)
	at org.apache.log4j.Logger.getLogger(Logger.java:117)
	at fr.inria.astor.core.setup.ConfigurationProperties.<clinit>(ConfigurationProperties.java:16)
	at fr.inria.main.AbstractMain.<clinit>(AbstractMain.java:100)
2019-11-21 08:53:18,676 INFO fr.inria.astor.core.setup.ProjectConfiguration - Version of the JVM used: 1.7.0_181
2019-11-21 08:53:18,677 INFO main - Java version of the JDK used to run tests: 1.7.0_181
2019-11-21 08:53:18,677 INFO main - The compliance of the JVM is:  7
2019-11-21 08:53:18,679 INFO main - command line arguments: [-mode  jgenprog  -location  .  -id  Math-5  -failing  org.apache.commons.math3.complex.ComplexTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_5/target/classes/:/script/jGenProg_Defects4J_Math_5/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
2019-11-21 08:53:18,680 INFO fr.inria.main.evolution.AstorMain - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_5/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_5/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 786
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//bin//default from 786 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_5/./output_astor/AstorMain-Math-5//bin//default, /script/jGenProg_Defects4J_Math_5/target/classes/, /script/jGenProg_Defects4J_Math_5/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4962, fails: 36, GZoltar suspicious 34575, with positive susp 2418
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4962
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 1000 with susp > 0.1, we consider: 1000
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 8022410 milliseconds (8022 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_5/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_5/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_5/target/classes/, /script/jGenProg_Defects4J_Math_5/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 714
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 1000
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.25]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.25]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.25]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.25]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=68, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=69, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=71, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=72, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=73, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=74, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=75, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=76, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=77, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=78, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=79, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=81, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=53, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=54, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=55, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=56, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=57, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=58, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=59, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=60, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=39, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=40, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=43, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=44, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=45, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=46, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=47, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunction()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction;, lineNumber=51, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunctionGradient()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient;, lineNumber=66, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar;)Ljava/util/ArrayList;, lineNumber=31, susp=0.23570226039551587]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.1856953381770519]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.1856953381770519]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.17010345435994292]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=116, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=117, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=118, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=120, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=121, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=113, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=114, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=125, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=126, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=130, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/LineSearch;)Lorg/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer;, lineNumber=35, susp=0.16169041669088866]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 1000,  323
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 323
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 323, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_5/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 8022410
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.complex.ComplexTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_5/target/classes/:/script/jGenProg_Defects4J_Math_5/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
09:41:22.738 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
09:41:24.267 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
09:41:25.067 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
09:41:25.072 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
09:41:25.072 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
09:41:25.072 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
09:41:25.619 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:41:28.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:28.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:28.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = vertices.length,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:41:30.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:30.759 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:30.760 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:33.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:33.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:33.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:35.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:35.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:35.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:37.767 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:37.767 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:37.768 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:40.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:40.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:40.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:42.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:42.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:42.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:44.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:44.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:44.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:46.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:46.717 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:46.718 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:49.150 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:49.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:49.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:51.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:51.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:51.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:53.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:53.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:53.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:55.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:55.844 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:55.845 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:41:57.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:57.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:57.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:00.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:00.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:00.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:02.204 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:02.204 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:02.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:04.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:04.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:04.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:06.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:06.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:06.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:42:08.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:08.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:08.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:42:11.049 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:11.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:11.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:42:13.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:13.346 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:13.347 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:15.624 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:15.624 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:15.625 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:18.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:18.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:18.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:42:20.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:20.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:20.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:22.902 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:22.903 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:22.904 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:25.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:25.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:25.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:27.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:27.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:27.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:42:29.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:29.789 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:29.790 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:31.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:31.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:31.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:34.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:34.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:34.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:36.819 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:36.819 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:36.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:42:39.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:39.229 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:39.230 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:41.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:41.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:41.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:43.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:43.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:43.985 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:46.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:46.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:46.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:42:48.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:48.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:48.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:50.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:50.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:50.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:52.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:52.693 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:52.694 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:54.939 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:54.939 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:54.941 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:42:57.291 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:57.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:57.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:42:59.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:59.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:59.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:01.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:01.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:01.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:43:04.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:04.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:04.305 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:43:06.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:06.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:06.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:43:09.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:09.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:09.136 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:11.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:11.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:11.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:14.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:14.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:14.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:43:15.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:15.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:15.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:43:18.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:18.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:18.324 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:43:20.264 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:20.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:20.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:22.268 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:22.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:22.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:24.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:24.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:24.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:43:26.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:26.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:26.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:43:29.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:29.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:29.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:43:31.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:31.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:31.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:33.466 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:33.466 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:33.467 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:43:35.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:35.681 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:35.682 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:43:38.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:38.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:38.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:40.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:40.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:40.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:42.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:42.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:42.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:43:45.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:45.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:45.342 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:43:47.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:47.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:47.485 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:49.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:49.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:49.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:51.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:51.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:51.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:53.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:53.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:53.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:43:56.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:56.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:56.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:43:58.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:58.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:58.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:00.139 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:00.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:00.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:02.359 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:02.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:02.360 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:04.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:04.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:04.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:06.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:06.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:06.357 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:08.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:08.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:08.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:10.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:10.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:10.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:12.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:12.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:12.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:14.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:14.607 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:14.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:16.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:16.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:16.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:18.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:18.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:18.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:20.707 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:20.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:20.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:22.701 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:22.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:22.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:24.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:24.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:24.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:27.006 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:27.006 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:27.007 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:29.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:29.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:29.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:31.761 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:31.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:31.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:33.967 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:33.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:33.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:36.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:36.475 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:36.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:38.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:38.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:38.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:41.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:41.481 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:41.482 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:43.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:43.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:43.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:46.332 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:46.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:46.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:48.352 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:48.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:48.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:50.314 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:50.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:50.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:52.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:52.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:52.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:44:54.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:54.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:54.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:57.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:57.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:57.292 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:44:59.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:59.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:59.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:02.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:02.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:02.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:45:04.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:04.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:04.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:07.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:07.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:07.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:09.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:09.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:09.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:12.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:12.238 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:12.239 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:45:14.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:14.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:14.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:16.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:16.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:16.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:19.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:19.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:19.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:21.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:21.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:21.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:45:23.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:23.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:23.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:26.357 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:26.357 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:26.358 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:28.807 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:28.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:28.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:31.284 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:31.284 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:31.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:33.773 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:33.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:33.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:45:36.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:36.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:36.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:38.804 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:38.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:38.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:41.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:41.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:41.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:43.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:43.846 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:43.847 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:45:46.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:46.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:46.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:48.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:48.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:48.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:51.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:51.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:51.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:53.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:53.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:53.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:45:56.324 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:56.324 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:56.325 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:45:58.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:58.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:58.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:01.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:01.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:01.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:03.783 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:03.783 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:03.784 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:46:06.339 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:06.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:06.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:08.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:08.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:08.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:11.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:11.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:11.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:13.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:13.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:13.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:46:16.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:16.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:16.365 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:46:18.849 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:18.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:18.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:46:21.386 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:21.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:21.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:46:23.925 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:23.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:23.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:46:26.415 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:26.416 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:26.417 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:28.768 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:28.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:28.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:31.220 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:31.220 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:31.221 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:46:33.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:33.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:33.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:35.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:35.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:35.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:38.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:38.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:38.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:40.284 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:40.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:40.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:46:42.570 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:42.570 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:42.571 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:44.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:44.989 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:44.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:46:47.410 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:47.410 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:47.411 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:46:49.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:49.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:49.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:46:52.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:52.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:52.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:46:54.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:54.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:54.342 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:56.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:56.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:56.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:46:59.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:59.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:59.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:47:01.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:01.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:01.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:04.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:04.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:04.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:06.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:06.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:06.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:09.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:09.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:09.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:47:11.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:11.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:11.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:14.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:14.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:14.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:16.703 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:16.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:16.705 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:19.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:19.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:19.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:47:21.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:21.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:21.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:24.041 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:24.042 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:24.043 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:26.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:26.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:26.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:28.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:28.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:28.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:47:31.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:31.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:31.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:34.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:34.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:34.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:36.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:36.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:36.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:39.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:39.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:39.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:41.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:41.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:41.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:47:44.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:44.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:44.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:46.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:46.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:46.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:49.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:49.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:49.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:51.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:51.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:51.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:54.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:54.383 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:54.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:56.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:56.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:56.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:47:59.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:59.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:59.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:48:02.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:02.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:02.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:48:04.618 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:04.618 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:04.619 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:07.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:07.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:07.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:09.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:09.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:09.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:48:12.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:12.174 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:12.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:14.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:14.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:14.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:17.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:17.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:17.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:48:19.685 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:19.686 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:19.687 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:22.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:22.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:22.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:24.666 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:24.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:24.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:27.134 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:27.134 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:27.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:29.682 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:29.683 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:29.684 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:32.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:32.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:32.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:34.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:34.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:34.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:37.350 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:37.350 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:37.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:39.909 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:39.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:39.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:48:42.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:42.415 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:42.416 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:48:45.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:45.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:45.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:48:47.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:47.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:47.591 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:48:50.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:50.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:50.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:48:52.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:52.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:52.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:48:55.276 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:55.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:55.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:48:57.736 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:48:57.737 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:48:57.738 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:00.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:00.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:00.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:02.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:02.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:02.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:05.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:05.102 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:05.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:07.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:07.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:07.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:09.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:09.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:09.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:12.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:12.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:12.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:14.685 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:14.686 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:14.687 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:17.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:17.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:17.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:19.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:19.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:19.713 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:22.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:22.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:22.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:24.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:24.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:24.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:27.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:27.214 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:27.215 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:29.694 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:29.695 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:29.696 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:32.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:32.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:32.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:34.760 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:34.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:34.762 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:37.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:37.270 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:37.271 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:39.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:39.801 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:39.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:42.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:42.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:42.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:44.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:44.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:44.830 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:47.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:47.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:47.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:49.969 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:49.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:49.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:52.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:52.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:52.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:49:55.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:55.241 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:55.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:49:57.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:57.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:57.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:00.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:00.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:00.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:50:02.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:02.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:02.799 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:05.369 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:05.370 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:05.371 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:07.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:07.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:07.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:50:10.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:10.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:10.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:12.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:12.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:12.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:15.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:15.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:15.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:17.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:17.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:17.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:50:20.330 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:20.331 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:20.332 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:22.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:22.849 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:22.850 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:25.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:25.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:25.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:27.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:27.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:27.839 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:50:30.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:30.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:30.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:32.786 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:32.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:32.787 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:35.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:35.268 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:35.269 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:37.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:37.732 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:37.733 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:50:40.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:40.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:40.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:42.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:42.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:42.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:45.095 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:45.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:45.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:47.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:47.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:47.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:50.093 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:50.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:50.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:50:52.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:52.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:52.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:55.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:55.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:55.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:50:57.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:57.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:57.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:00.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:00.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:00.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:51:02.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:02.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:02.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:05.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:05.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:05.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:07.183 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:07.183 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:07.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:09.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:09.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:09.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:51:11.965 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:11.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:11.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:14.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:14.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:14.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:16.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:16.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:16.492 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:18.928 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:18.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:18.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:51:21.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:21.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:21.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:23.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:23.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:23.815 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:26.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:26.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:26.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:28.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:28.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:28.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:51:31.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:31.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:31.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:33.661 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:33.662 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:33.663 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:36.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:36.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:36.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:38.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:38.661 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:38.662 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:51:41.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:41.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:41.149 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:43.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:43.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:43.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:46.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:46.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:46.139 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:48.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:48.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:48.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:51:51.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:51.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:51.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:53.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:53.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:53.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:55.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:55.629 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:55.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:51:58.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:58.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:58.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:52:00.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:00.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:00.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:03.222 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:03.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:03.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:05.762 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:05.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:05.764 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:08.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:08.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:08.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:52:10.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:10.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:10.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:13.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:13.375 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:13.376 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:15.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:15.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:15.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:18.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:18.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:18.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:20.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:20.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:20.918 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:52:23.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:23.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:23.476 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:26.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:26.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:26.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:28.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:28.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:28.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:31.199 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:31.200 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:31.201 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:33.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:33.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:33.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:52:36.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:36.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:36.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:38.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:38.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:38.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:40.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:40.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:40.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:42.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:42.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:42.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:44.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:44.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:44.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:52:47.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:47.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:47.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:49.713 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:49.713 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:49.714 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:51.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:51.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:51.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:54.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:54.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:54.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:52:56.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:56.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:56.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:52:58.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:58.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:58.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:00.387 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:00.387 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:00.388 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:02.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:02.722 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:02.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:04.652 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:04.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:04.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:06.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:06.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:06.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:53:08.702 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:08.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:08.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:10.909 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:10.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:10.910 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

09:53:12.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:12.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:12.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D end = (java.lang.Double.isInfinite(i.getSup())) ? 
null : ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(i.getSup())))),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D start = (java.lang.Double.isInfinite(i.getInf())) ? 
null : ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(i.getInf())))),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:14.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:14.895 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:14.896 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double deltaY = end.getY() - start.getY(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaX = end.getX() - start.getX(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:17.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:17.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:17.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r = (((p.getX() - start.getX()) * deltaX) + ((p.getY() - start.getY()) * deltaY)) / 
((deltaX * deltaX) + (deltaY * deltaY)),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaY = end.getY() - start.getY(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:19.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:19.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:19.830 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double dist1 = getStart().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r = (((p.getX() - start.getX()) * deltaX) + ((p.getY() - start.getY()) * deltaY)) / 
((deltaX * deltaX) + (deltaY * deltaY)),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:22.328 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:22.328 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:22.329 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double dist2 = getEnd().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double dist1 = getStart().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:24.792 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:24.792 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:24.793 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.min(dist1, dist2),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double dist2 = getEnd().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:27.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:27.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:27.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double px = start.getX() + (r * deltaX),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.min(dist1, dist2),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:29.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:29.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:29.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double py = start.getY() + (r * deltaY),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double px = start.getX() + (r * deltaX),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:32.189 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:32.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:32.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double py = start.getY() + (r * deltaY),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:34.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:34.677 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:34.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return interPt.distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

09:53:37.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:37.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:37.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((r < 0) || (r > 1)) {
	final double dist1 = getStart().distance(p);
	final double dist2 = getEnd().distance(p);

	return org.apache.commons.math3.util.FastMath.min(dist1, dist2);
} else 
{

	final double px = start.getX() + (r * deltaX);
	final double py = start.getY() + (r * deltaY);

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py);
	return interPt.distance(p);
},commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return interPt.distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

09:53:39.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:39.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:39.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D end = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getSup())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D start = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getInf())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:41.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:41.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:41.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:44.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:44.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:44.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:46.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:46.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:46.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:49.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:49.037 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:49.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:51.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:51.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:51.298 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:53.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:53.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:53.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:53:56.024 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:56.024 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:56.025 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:53:58.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:58.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:58.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:54:00.510 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:00.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:00.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:02.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:02.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:02.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:05.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:05.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:05.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:07.848 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:07.849 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:07.850 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:54:10.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:10.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:10.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:12.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:12.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:12.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:14.734 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:14.734 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:14.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:17.091 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:17.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:17.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:19.470 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:19.470 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:19.471 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:22.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:22.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:22.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:24.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:24.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:24.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:27.091 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:27.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:27.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:29.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:29.557 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:29.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:54:32.111 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:32.111 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:32.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:54:34.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:34.597 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:34.598 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:54:37.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:37.043 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:37.044 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:54:39.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:39.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:39.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:54:42.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:42.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:42.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:54:44.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:44.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:44.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:54:47.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:47.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:47.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:54:49.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:49.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:49.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = vertices.length,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:52.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:52.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:52.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:54.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:54.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:54.890 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:57.408 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:57.409 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:57.410 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:54:59.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:59.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:59.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:02.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:02.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:02.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:55:05.075 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:05.075 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:05.076 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:55:07.796 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:07.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:07.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

09:55:10.371 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:10.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:10.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:13.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:13.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:13.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:55:15.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:15.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:15.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:55:18.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:18.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:18.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:55:20.576 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:20.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:20.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:23.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:23.062 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:23.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:25.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:25.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:25.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:27.978 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:27.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:27.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

09:55:30.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:30.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:30.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Fixed a wrong assumption on BSP tree attributes.

09:55:32.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:32.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:32.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:35.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:35.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:35.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:37.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:37.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:37.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:40.470 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:40.470 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:40.471 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:42.767 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:42.767 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:42.768 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:45.095 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:45.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:45.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:47.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:47.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:47.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:50.094 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:50.094 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:50.095 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:52.759 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:52.760 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:52.761 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a wrong assumption on BSP tree attributes.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

09:55:55.310 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:55.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:55.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = getTree(false),commit: Fixed a wrong assumption on BSP tree attributes.
}, sim: 0.053999
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (loop.get(0).getStart() == null) {

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size() + 2];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {

		if (j == 0) {

			double x = segment.getLine().toSubSpace(segment.getEnd()).getX();
			x -= org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = null;
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

		if (j < (array.length - 1)) {

			array[j++] = segment.getEnd();
		}

		if (j == (array.length - 1)) {

			double x = segment.getLine().toSubSpace(segment.getStart()).getX();
			x += org.apache.commons.math3.util.FastMath.max(1.0, org.apache.commons.math3.util.FastMath.abs(x / 2));
			array[j++] = segment.getLine().toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(x));
		}

	}
	vertices[i++] = array;
} else {
	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D[] array = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D[loop.size()];
	int j = 0;
	for (org.apache.commons.math3.geometry.euclidean.twod.Segment segment : loop) {
		array[j++] = segment.getStart();
	}
	vertices[i++] = array;
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added derivatives evaluation for field Hermite interpolator.
, ingredientB: Added Hermite interpolator for ExtendFieldElement instances.

09:56:05.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:05.086 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:05.087 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return derivatives,commit: Added derivatives evaluation for field Hermite interpolator.
}, sim: -0.200671
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator for ExtendFieldElement instances.
}, sim: 0.027529
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Hermite interpolator.
, ingredientB: Added derivatives evaluation for field Hermite interpolator.

09:56:07.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:07.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:07.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return derivatives,commit: Added derivatives evaluation for field Hermite interpolator.
}, sim: -0.200671
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator.

09:56:10.272 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:10.272 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:10.273 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Hermite interpolator.
, ingredientB: Added derivatives evaluation for field Hermite interpolator.

09:56:13.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:13.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:13.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return derivatives,commit: Added derivatives evaluation for field Hermite interpolator.
}, sim: -0.200671
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Hermite interpolator.
, ingredientB: Added Hermite interpolator for ExtendFieldElement instances.

09:56:15.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:15.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:15.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return polynomials,commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Added Hermite interpolator for ExtendFieldElement instances.
}, sim: 0.027529
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added derivatives evaluation for field Hermite interpolator.
, ingredientB: Added Hermite interpolator.

09:56:18.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:18.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:18.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return derivatives,commit: Added derivatives evaluation for field Hermite interpolator.
}, sim: -0.200671
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: return partialDerivative(3, x, y), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(c),commit: Added Hermite interpolator.
}, sim: -0.155348
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:11.099 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:11.099 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:11.100 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int b = q,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int a = p,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:13.693 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:13.694 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:13.695 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.abs(a + b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((a == java.lang.Integer.MIN_VALUE) || 
(b == java.lang.Integer.MIN_VALUE)) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:16.349 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:16.350 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:16.352 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((a == 0) || 
(b == 0)) {
	if ((a == java.lang.Integer.MIN_VALUE) || 
	(b == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math3.util.FastMath.abs(a + b);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.abs(a + b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:18.767 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:18.768 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:18.769 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long al = a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((a == 0) || 
(b == 0)) {
	if ((a == java.lang.Integer.MIN_VALUE) || 
	(b == java.lang.Integer.MIN_VALUE)) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return org.apache.commons.math3.util.FastMath.abs(a + b);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:21.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:21.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:21.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long bl = b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long al = a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:23.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:23.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:23.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: boolean useLong = false,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long bl = b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:26.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:26.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:26.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: useLong = true,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: boolean useLong = false,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:29.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:29.182 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:29.184 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a = -a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: useLong = true,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:31.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:31.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:31.947 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Integer.MIN_VALUE == a) {
	useLong = true;
} else {
	a = -a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a = -a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:34.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:34.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:34.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: al = -al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Integer.MIN_VALUE == a) {
	useLong = true;
} else {
	a = -a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:37.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:37.376 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:37.377 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (a < 0) {
	if (java.lang.Integer.MIN_VALUE == a) {
		useLong = true;
	} else {
		a = -a;
	}
	al = -al;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: al = -al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:39.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:39.998 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:39.999 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: b = -b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (a < 0) {
	if (java.lang.Integer.MIN_VALUE == a) {
		useLong = true;
	} else {
		a = -a;
	}
	al = -al;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:42.059 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:42.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:42.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Integer.MIN_VALUE == b) {
	useLong = true;
} else {
	b = -b;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: b = -b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:44.441 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:44.441 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:44.442 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bl = -bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Integer.MIN_VALUE == b) {
	useLong = true;
} else {
	b = -b;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:47.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:47.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:47.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (b < 0) {
	if (java.lang.Integer.MIN_VALUE == b) {
		useLong = true;
	} else {
		b = -b;
	}
	bl = -bl;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bl = -bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:49.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:49.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:49.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (al == bl) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (b < 0) {
	if (java.lang.Integer.MIN_VALUE == b) {
		useLong = true;
	} else {
		b = -b;
	}
	bl = -bl;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:52.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:52.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:52.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long blbu = bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (al == bl) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:55.123 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:55.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:55.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bl = al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long blbu = bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:02:57.667 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:57.667 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:57.668 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: al = blbu % al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bl = al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:00.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:00.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:00.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (bl > java.lang.Integer.MAX_VALUE) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: al = blbu % al,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:02.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:02.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:02.852 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((int) (bl)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (bl > java.lang.Integer.MAX_VALUE) {
	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
	p, q);
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:05.492 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:05.493 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:05.494 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (al == 0) {
	if (bl > java.lang.Integer.MAX_VALUE) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return ((int) (bl));
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((int) (bl)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:08.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:08.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:08.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: blbu = bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (al == 0) {
	if (bl > java.lang.Integer.MAX_VALUE) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	return ((int) (bl));
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:10.652 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:10.652 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:10.653 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: b = ((int) (al)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: blbu = bl,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:13.213 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:13.213 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:13.214 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a = ((int) (blbu % al)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: b = ((int) (al)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:15.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:15.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:15.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (useLong) {
	if (al == bl) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	long blbu = bl;
	bl = al;
	al = blbu % al;
	if (al == 0) {
		if (bl > java.lang.Integer.MAX_VALUE) {
			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
			p, q);
		}
		return ((int) (bl));
	}
	blbu = bl;


	b = ((int) (al));
	a = ((int) (blbu % al));
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a = ((int) (blbu % al)),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:18.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:18.559 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:18.560 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (useLong) {
	if (al == bl) {
		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
		p, q);
	}
	long blbu = bl;
	bl = al;
	al = blbu % al;
	if (al == 0) {
		if (bl > java.lang.Integer.MAX_VALUE) {
			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.GCD_OVERFLOW_32_BITS, 
			p, q);
		}
		return ((int) (bl));
	}
	blbu = bl;


	b = ((int) (al));
	a = ((int) (blbu % al));
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:21.425 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:21.425 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:21.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.ArithmeticUtils.gcdPositive(a, b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:24.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:24.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:24.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:26.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:26.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:26.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (b == 0) {
	return a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return a,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:29.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:29.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:29.400 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (a == 0) {
	return b;
} else 
if (b == 0) {
	return a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (b == 0) {
	return a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:32.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:32.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:32.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int aTwos = java.lang.Integer.numberOfTrailingZeros(a),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (a == 0) {
	return b;
} else 
if (b == 0) {
	return a;
},commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:34.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:34.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:34.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a >>= aTwos,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int aTwos = java.lang.Integer.numberOfTrailingZeros(a),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:37.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:37.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:37.342 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int bTwos = java.lang.Integer.numberOfTrailingZeros(b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a >>= aTwos,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:39.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:39.435 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:39.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: b >>= bTwos,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int bTwos = java.lang.Integer.numberOfTrailingZeros(b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:42.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:42.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:42.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int shift = java.lang.Math.min(aTwos, bTwos),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: b >>= bTwos,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:44.679 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:44.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:44.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int delta = a - b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int shift = java.lang.Math.min(aTwos, bTwos),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:47.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:47.310 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:47.311 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: b = java.lang.Math.min(a, b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int delta = a - b,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:49.920 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:49.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:49.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a = java.lang.Math.abs(delta),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: b = java.lang.Math.min(a, b),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:52.675 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:52.675 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:52.676 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: a >>= java.lang.Integer.numberOfTrailingZeros(a),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a = java.lang.Math.abs(delta),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:55.312 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:55.313 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:55.314 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (a != b) {
	final int delta = a - b;
	b = java.lang.Math.min(a, b);
	a = java.lang.Math.abs(delta);


	a >>= java.lang.Integer.numberOfTrailingZeros(a);
} ,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: a >>= java.lang.Integer.numberOfTrailingZeros(a),commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
, ingredientB: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.

10:03:57.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:57.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:57.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return a << shift,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (a != b) {
	final int delta = a - b;
	b = java.lang.Math.min(a, b);
	a = java.lang.Math.abs(delta);


	a >>= java.lang.Integer.numberOfTrailingZeros(a);
} ,commit: MATH-841 Performance improvement in method "gcd(int, int)" (~2 to 4 times faster than the previous implementation). Thanks to Sebastien Riou.
}, sim: -0.078712
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:00.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:00.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:00.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NotPositiveException(k),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:03.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:03.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:03.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k < 0) {
	throw new org.apache.commons.math3.exception.NotPositiveException(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:06.092 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:06.092 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:06.093 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k > n) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:08.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:08.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:08.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long[][] stirlingS2 = org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.get(),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k > n) {
	throw new org.apache.commons.math3.exception.NumberIsTooLargeException(k, n, true);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:11.415 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:11.415 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:11.416 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int maxIndex = 26,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long[][] stirlingS2 = org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.get(),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:14.062 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:14.062 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:14.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2 = new long[maxIndex][],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int maxIndex = 26,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:16.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:16.605 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:16.606 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[0] = new long[]{ 1L },commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2 = new long[maxIndex][],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:19.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:19.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:19.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i] = new long[i + 1],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[0] = new long[]{ 1L },commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:21.952 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:21.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:21.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i][0] = 0,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i] = new long[i + 1],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:24.456 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:24.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:24.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i][1] = 1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i][0] = 0,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:26.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:26.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:26.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i][i] = 1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i][1] = 1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:28.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:28.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:28.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i][i] = 1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:30.525 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:30.525 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:30.526 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 2; j < i; ++j) {
	stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:32.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:32.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:32.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 1; i < stirlingS2.length; ++i) {
	stirlingS2[i] = new long[i + 1];
	stirlingS2[i][0] = 0;
	stirlingS2[i][1] = 1;
	stirlingS2[i][i] = 1;
	for (int j = 2; j < i; ++j) {
		stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
	}
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 2; j < i; ++j) {
	stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:35.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:35.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:35.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 1; i < stirlingS2.length; ++i) {
	stirlingS2[i] = new long[i + 1];
	stirlingS2[i][0] = 0;
	stirlingS2[i][1] = 1;
	stirlingS2[i][i] = 1;
	for (int j = 2; j < i; ++j) {
		stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
	}
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:38.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:38.015 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:38.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (stirlingS2 == null) {





	final int maxIndex = 26;
	stirlingS2 = new long[maxIndex][];
	stirlingS2[0] = new long[]{ 1L };
	for (int i = 1; i < stirlingS2.length; ++i) {
		stirlingS2[i] = new long[i + 1];
		stirlingS2[i][0] = 0;
		stirlingS2[i][1] = 1;
		stirlingS2[i][i] = 1;
		for (int j = 2; j < i; ++j) {
			stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
		}
	}


	org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2);

},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:40.586 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:40.586 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:40.587 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return stirlingS2[n][k],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (stirlingS2 == null) {





	final int maxIndex = 26;
	stirlingS2 = new long[maxIndex][];
	stirlingS2[0] = new long[]{ 1L };
	for (int i = 1; i < stirlingS2.length; ++i) {
		stirlingS2[i] = new long[i + 1];
		stirlingS2[i][0] = 0;
		stirlingS2[i][1] = 1;
		stirlingS2[i][i] = 1;
		for (int j = 2; j < i; ++j) {
			stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1];
		}
	}


	org.apache.commons.math3.util.ArithmeticUtils.STIRLING_S2.compareAndSet(null, stirlingS2);

},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:43.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:43.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:43.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return (1L << (n - 1)) - 1L,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return stirlingS2[n][k],commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:45.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:45.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:45.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return (1L << (n - 1)) - 1L,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:47.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:47.885 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:47.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long sum = 0,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:50.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:50.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:50.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long sign = ((k & 0x1) == 0) ? 1 : -1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long sum = 0,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:53.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:53.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:53.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sign = -sign,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long sign = ((k & 0x1) == 0) ? 1 : -1,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:55.685 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:55.685 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:55.686 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: sign = -sign,commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:04:58.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:58.258 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:58.259 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
n, 0, stirlingS2.length - 1),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:05:00.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:00.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:00.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (sum < 0) {

	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
	n, 0, stirlingS2.length - 1);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
n, 0, stirlingS2.length - 1),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:05:03.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:03.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:03.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int j = 1; j <= k; ++j) {
	sign = -sign;
	sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
	if (sum < 0) {

		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
		n, 0, stirlingS2.length - 1);
	}
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (sum < 0) {

	throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
	n, 0, stirlingS2.length - 1);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:05:05.952 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:05.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:05.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int j = 1; j <= k; ++j) {
	sign = -sign;
	sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
	if (sum < 0) {

		throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
		n, 0, stirlingS2.length - 1);
	}
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:05:08.370 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:08.371 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:08.372 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k),commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:05:10.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:10.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:10.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:05:13.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:13.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:13.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:05:16.018 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:16.018 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:16.019 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (k == 0) {
	return 0;
} else if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added Stirling numbers of the second kind in ArithmeticUtils.
, ingredientB: Added Stirling numbers of the second kind in ArithmeticUtils.

10:05:18.396 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:18.396 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:18.397 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n < stirlingS2.length) {

	return stirlingS2[n][k];
} else 

if (k == 0) {
	return 0;
} else if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (k == 0) {
	return 0;
} else if ((k == 1) || (k == n)) {
	return 1;
} else if (k == 2) {
	return (1L << (n - 1)) - 1L;
} else if (k == (n - 1)) {
	return org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(n, 2);
} else {

	long sum = 0;
	long sign = ((k & 0x1) == 0) ? 1 : -1;
	for (int j = 1; j <= k; ++j) {
		sign = -sign;
		sum += (sign * org.apache.commons.math3.util.ArithmeticUtils.binomialCoefficient(k, j)) * org.apache.commons.math3.util.ArithmeticUtils.pow(j, n);
		if (sum < 0) {

			throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ARGUMENT_OUTSIDE_DOMAIN, 
			n, 0, stirlingS2.length - 1);
		}
	}
	return sum / org.apache.commons.math3.util.ArithmeticUtils.factorial(k);
},commit: Added Stirling numbers of the second kind in ArithmeticUtils.
}, sim: 0.057105
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
, ingredientB: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).

10:05:21.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:21.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:21.033 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NOT_ALLOWED),commit: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
}, sim: -0.006481
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.BigReal(d.divide(a.d, scale, roundingMode)),commit: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
}, sim: -0.006481
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
, ingredientB: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).

10:05:23.917 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:23.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:23.918 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.BigReal(java.math.BigDecimal.ONE.divide(d, scale, roundingMode)),commit: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
}, sim: -0.006481
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.MathArithmeticException(org.apache.commons.math3.exception.util.LocalizedFormats.ZERO_NOT_ALLOWED),commit: BigReal.divide(BigReal) now throws MathArithmeticException (see MATH-755).
}, sim: -0.006481
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

10:05:26.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:26.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:26.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:29.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:29.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:29.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double hPrev = getA(0, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double small = 1.0E-50,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:31.838 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:31.838 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:31.840 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hPrev = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double hPrev = getA(0, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:34.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:34.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:34.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(hPrev, 0.0, small)) {
	hPrev = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hPrev = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:37.291 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:37.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:37.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int n = 1,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(hPrev, 0.0, small)) {
	hPrev = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:39.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:39.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:39.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double dPrev = 0.0,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int n = 1,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:42.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:42.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:42.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double cPrev = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double dPrev = 0.0,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:45.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:45.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:45.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double hN = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double cPrev = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:48.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:48.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:48.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double a = getA(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double hN = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:50.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:50.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:50.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double b = getB(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double a = getA(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:53.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:53.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:53.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double dN = a + (b * dPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double b = getB(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:56.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:56.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:56.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: dN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double dN = a + (b * dPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:05:59.064 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:59.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:59.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
	dN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:01.762 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:01.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:01.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double cN = a + (b / cPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
	dN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:04.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:04.503 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:04.504 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double cN = a + (b / cPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:07.125 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:07.125 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:07.126 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
	cN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:09.765 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:09.765 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:09.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: dN = 1 / dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
	cN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:12.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:12.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:12.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double deltaN = cN * dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dN = 1 / dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:15.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:15.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:15.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hN = hPrev * deltaN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaN = cN * dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:17.824 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:17.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:17.825 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hN = hPrev * deltaN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:20.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:20.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:20.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (java.lang.Double.isInfinite(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:23.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:23.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:23.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
	break;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isNaN(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:26.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:26.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:26.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: dPrev = dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
	break;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:28.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:28.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:28.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: cPrev = cN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dPrev = dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:31.451 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:31.452 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:31.453 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: hPrev = hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cPrev = cN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:34.264 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:34.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:34.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: n++,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hPrev = hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:36.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:36.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:36.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while (n < maxIterations) {
	final double a = getA(n, x);
	final double b = getB(n, x);

	double dN = a + (b * dPrev);
	if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
		dN = small;
	}
	double cN = a + (b / cPrev);
	if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
		cN = small;
	}

	dN = 1 / dN;
	final double deltaN = cN * dN;
	hN = hPrev * deltaN;

	if (java.lang.Double.isInfinite(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	if (java.lang.Double.isNaN(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
		x);
	}

	if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
		break;
	}

	dPrev = dN;
	cPrev = cN;
	hPrev = hN;
	n++;
} ,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: n++,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:06:39.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:39.498 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:39.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:06:42.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:42.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:42.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:06:44.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:44.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:44.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: NEGATIVE_INFINITY = new Decimal64(java.lang.Double.NEGATIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:06:47.126 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:47.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:47.128 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: POSITIVE_INFINITY = new Decimal64(java.lang.Double.POSITIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: NEGATIVE_INFINITY = new Decimal64(java.lang.Double.NEGATIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:06:49.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:49.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:49.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: NAN = new Decimal64(java.lang.Double.NaN),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: POSITIVE_INFINITY = new Decimal64(java.lang.Double.POSITIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:06:52.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:52.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:52.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.value = x,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: NAN = new Decimal64(java.lang.Double.NaN),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:06:54.780 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:54.780 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:54.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.getInstance(),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.value = x,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:06:57.359 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:57.359 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:57.360 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(this.value + a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64Field.getInstance(),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:06:59.952 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:59.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:59.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(this.value - a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value + a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:02.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:02.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:02.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(-this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value - a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:05.271 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:05.272 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:05.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(this.value * a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(-this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:07.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:07.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:07.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value * a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:10.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:10.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:10.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(this.value / a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:13.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:13.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:13.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(1.0 / this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value / a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:15.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:15.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:15.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((byte) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(1.0 / this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:18.436 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:18.436 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:18.437 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((short) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((byte) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:20.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:20.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:20.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((int) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((short) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:23.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:23.508 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:23.509 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((long) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((int) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:26.031 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:26.032 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:26.033 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((float) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((long) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:28.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:28.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:28.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return value,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((float) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:31.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:31.123 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:31.124 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.compare(this.value, o.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return value,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:33.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:33.682 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:33.683 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.compare(this.value, o.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:36.283 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:36.283 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:36.284 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:38.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:38.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:38.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (obj instanceof org.apache.commons.math3.util.Decimal64) {
	final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj));
	return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
	that.value);
},commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
that.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:41.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:41.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:41.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: long v = java.lang.Double.doubleToLongBits(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (obj instanceof org.apache.commons.math3.util.Decimal64) {
	final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj));
	return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
	that.value);
},commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:44.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:44.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:44.075 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((int) (v ^ (v >>> 32))),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: long v = java.lang.Double.doubleToLongBits(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:46.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:46.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:46.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.toString(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((int) (v ^ (v >>> 32))),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:49.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:49.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:49.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.isInfinite(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.toString(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:51.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:51.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:51.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return java.lang.Double.isNaN(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isInfinite(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:07:54.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:54.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:54.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(value + a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isNaN(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:07:57.033 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:57.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:57.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(value - a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value + a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:07:59.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:59.602 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:59.603 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value - a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:02.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:02.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:02.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(value / a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:04.580 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:04.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:04.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value / a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:08:07.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:07.083 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:07.084 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:08:09.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:09.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:09.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:11.987 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:11.987 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:11.988 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.ceil(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:14.515 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:14.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:14.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.floor(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.ceil(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:16.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:16.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:16.731 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.floor(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:19.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:19.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:19.313 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:21.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:21.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:21.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:24.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:24.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:24.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:08:26.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:26.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:26.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:29.103 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:29.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:29.104 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:31.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:31.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:31.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:08:34.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:34.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:34.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:36.818 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:36.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:36.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:39.466 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:39.467 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:39.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:08:42.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:42.070 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:42.071 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:44.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:44.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:44.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:47.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:47.394 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:47.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:08:50.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:50.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:50.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:52.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:52.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:52.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:08:55.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:55.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:55.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:08:57.858 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:57.858 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:57.859 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:00.421 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:00.421 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:00.422 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:03.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:03.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:03.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:09:05.591 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:05.591 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:05.592 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:08.150 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:08.150 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:08.151 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:10.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:10.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:10.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:13.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:13.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:13.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:09:16.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:16.146 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:16.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:18.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:18.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:18.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:21.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:21.391 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:21.392 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:09:24.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:24.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:24.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:26.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:26.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:26.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:09:29.241 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:29.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:29.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:09:31.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:31.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:31.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:34.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:34.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:34.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:09:37.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:37.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:37.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:39.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:39.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:39.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:42.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:42.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:42.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:44.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:44.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:44.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:09:46.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:46.395 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:46.395 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:48.685 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:48.686 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:48.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:51.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:51.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:51.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:53.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:53.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:53.928 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:09:56.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:56.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:56.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:09:59.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:59.084 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:59.086 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, p)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:01.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:01.707 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:01.708 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:04.308 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:04.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:04.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:10:06.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:06.987 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:06.988 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:09.559 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:09.560 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:09.561 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:12.221 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:12.221 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:12.222 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, e.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:14.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:14.818 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:14.819 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:17.412 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:17.413 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:17.414 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.exp(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:10:19.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:19.870 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:19.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:10:22.453 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:22.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:22.455 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:10:25.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:25.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:25.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:27.710 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:27.710 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:27.711 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log1p(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:30.298 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:30.299 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:30.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log10(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log1p(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:32.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:32.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:32.865 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log10(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:35.407 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:35.407 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:35.408 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:37.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:37.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:37.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:40.545 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:40.546 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:40.547 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:43.170 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:43.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:43.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:45.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:45.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:45.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:48.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:48.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:48.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan2(value, x.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:50.928 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:50.928 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:50.929 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan2(value, x.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:53.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:53.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:53.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sinh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:56.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:56.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:56.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sinh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:10:58.864 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:58.864 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:58.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:01.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:01.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:01.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asinh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:04.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:04.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:04.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asinh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:06.697 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:06.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:06.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:09.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:09.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:09.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (a.length != b.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length);
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:11.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:11.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:11.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] aDouble = new double[a.length],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (a.length != b.length) {
	throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length);
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:14.481 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:14.482 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:14.483 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] bDouble = new double[b.length],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] aDouble = new double[a.length],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:17.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:17.108 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:17.109 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: aDouble[i] = a[i].value,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] bDouble = new double[b.length],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:19.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:19.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:19.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bDouble[i] = b[i].value,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: aDouble[i] = a[i].value,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:22.389 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:22.389 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:22.390 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < a.length; ++i) {
	aDouble[i] = a[i].value;
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bDouble[i] = b[i].value,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:24.945 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:24.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:24.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(aDouble, bDouble)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	aDouble[i] = a[i].value;
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:27.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:27.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:27.097 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < a.length; ++i) {
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(aDouble, bDouble)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:29.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:29.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:29.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a, bDouble)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:31.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:31.083 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:31.084 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a, bDouble)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:33.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:33.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:33.183 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:35.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:35.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:35.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:37.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:37.835 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:37.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:39.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:39.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:39.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:41.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:41.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:41.863 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:44.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:44.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:44.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:46.847 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:46.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:46.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:49.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:49.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:49.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.ceil(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:51.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:51.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:51.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:54.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:54.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:54.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:11:57.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:57.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:57.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.expm1(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:11:59.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:59.813 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:59.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:02.440 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:02.440 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:02.441 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:04.917 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:04.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:04.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:07.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:07.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:07.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:10.107 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:10.107 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:10.108 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log1p(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:12.663 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:12.663 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:12.664 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log10(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:15.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:15.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:15.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:17.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:17.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:17.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:20.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:20.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:20.490 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:22.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:22.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:22.882 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:25.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:25.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:25.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.asin(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:12:27.847 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:27.848 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:27.849 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:30.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:30.607 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:30.608 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan2(value, x.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:33.427 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:33.427 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:33.428 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cosh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:36.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:36.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:36.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.tanh(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:39.016 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:39.016 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:39.017 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.DimensionMismatchException(a.length, b.length),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:41.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:41.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:41.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:44.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:44.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:44.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:47.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:47.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:47.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:12:49.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:49.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:49.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:12:52.573 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:52.573 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:52.574 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:12:55.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:55.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:55.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:12:58.043 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:58.044 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:58.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: POSITIVE_INFINITY = new Decimal64(java.lang.Double.POSITIVE_INFINITY),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:13:00.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:00.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:00.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value + a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:13:02.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:02.696 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:02.697 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((short) (value)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:05.008 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:05.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:05.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:07.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:07.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:07.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:09.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:09.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:09.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.abs(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value / a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:11.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:11.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:11.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:13.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:13.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:13.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:15.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:15.750 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:15.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:17.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:17.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:17.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:19.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:19.755 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:19.756 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:21.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:21.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:21.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:23.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:23.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:23.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.ceil(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:26.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:26.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:26.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.floor(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:28.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:28.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:28.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.rint(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:30.076 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:30.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:30.077 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.round(value),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:32.098 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:32.098 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:32.099 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.signum(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:34.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:34.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:34.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:36.156 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:36.156 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:36.157 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.scalb(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:13:38.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:38.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:38.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.hypot(value, y.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:40.304 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:40.304 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:40.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:42.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:42.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:42.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.cbrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:44.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:44.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:44.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, n)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:46.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:46.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:46.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.log(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:48.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:48.164 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:48.165 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.atan(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:50.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:50.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:50.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:52.130 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:52.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:52.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:54.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:54.140 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:54.141 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: Added a new ExtendedFieldElement interface.

10:13:56.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:56.190 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:56.191 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.IEEEremainder(value, a)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1, b1.value, 
a2, b2.value, 
a3, b3.value, 
a4, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:13:58.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:13:58.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:13:58.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.ZERO,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:14:00.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:00.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:00.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.ONE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64.ZERO,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:14:02.263 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:02.263 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:02.264 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.class,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64.ONE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:04.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:04.273 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:04.274 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return (0.5 * t) * t,commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:06.244 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:06.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:06.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return 0.5 * org.apache.commons.math3.util.FastMath.exp(x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return (0.5 * t) * t,commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:08.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:08.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:08.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

	final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
	return (0.5 * t) * t;
} else {
	return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return 0.5 * org.apache.commons.math3.util.FastMath.exp(x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:10.223 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:10.223 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:10.224 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

	final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
	return (0.5 * t) * t;
} else {
	return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:12.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:12.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:12.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:14.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:14.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:14.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

	final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
	return (0.5 * t) * t;
} else {
	return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:16.225 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:16.225 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:16.226 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

	final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
	return (0.5 * t) * t;
} else {
	return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:18.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:18.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:18.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x > 20) {
	if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

		final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
	}
} else if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:20.177 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:20.177 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:20.178 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] hiPrec = new double[2],commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x > 20) {
	if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

		final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
	}
} else if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:22.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:22.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:22.204 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((-0.5) * t) * t,commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:24.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:24.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:24.153 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

	final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
	return ((-0.5) * t) * t;
} else {
	return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x),commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:26.182 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:26.182 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:26.183 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return ((-0.5) * t) * t;
	} else {
		return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

	final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
	return ((-0.5) * t) * t;
} else {
	return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
, ingredientB: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.

10:14:28.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:28.121 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:28.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (x > 20) {
	if (x >= org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE) {

		final double t = org.apache.commons.math3.util.FastMath.exp(0.5 * x);
		return (0.5 * t) * t;
	} else {
		return 0.5 * org.apache.commons.math3.util.FastMath.exp(x);
	}
} else if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return ((-0.5) * t) * t;
	} else {
		return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x < (-20)) {
	if (x <= (-org.apache.commons.math3.util.FastMath.LOG_MAX_VALUE)) {

		final double t = org.apache.commons.math3.util.FastMath.exp((-0.5) * x);
		return ((-0.5) * t) * t;
	} else {
		return (-0.5) * org.apache.commons.math3.util.FastMath.exp(-x);
	}
},commit: MATH-905 Avoid overflow on the whole range covered by the equivalent functions in the standard "Math" class.
}, sim: 0.037648
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

10:14:30.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:30.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:30.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double ya = lnCoef_last[0],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[org.apache.commons.math3.util.FastMath.LN_QUICK_COEF.length - 1],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

10:14:32.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:32.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:32.139 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double yb = lnCoef_last[1],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double ya = lnCoef_last[0],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

10:14:34.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:34.091 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:34.092 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: aa = ya + lnCoef_i[0],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_QUICK_COEF[i],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

10:14:36.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:36.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:36.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ab = yb + lnCoef_i[1],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: aa = ya + lnCoef_i[0],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

10:14:38.022 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:38.022 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:38.023 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsilon = (bits & 0x3ffffffffffL) / (org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L)),commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lnm = org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[((int) ((bits & 0xffc0000000000L) >> 42))],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

10:14:40.015 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:40.016 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:40.016 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double denom = org.apache.commons.math3.util.FastMath.TWO_POWER_52 + (bits & 0xffc0000000000L),commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double numer = bits & 0x3ffffffffffL,commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: partially reverted commit 1370951 as it trashed earlier correction in FastMath
, ingredientB: partially reverted commit 1370951 as it trashed earlier correction in FastMath

10:14:41.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:41.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:41.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] lnCoef_i = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[i],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] lnCoef_last = org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF[org.apache.commons.math3.util.FastMath.LN_HI_PREC_COEF.length - 1],commit: partially reverted commit 1370951 as it trashed earlier correction in FastMath
}, sim: -0.053507
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

10:14:43.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:43.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:43.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xpa = 1 + x,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (x == java.lang.Double.POSITIVE_INFINITY) {
	return java.lang.Double.POSITIVE_INFINITY;
},commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

10:14:46.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:46.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:46.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xpb = -((xpa - 1) - x),commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xpa = 1 + x,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

10:14:47.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:47.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:47.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double fx1 = xpb / xpa,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(lores)) {
	return lores;
},commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

10:14:49.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:49.909 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:49.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double epsilon = (0.5 * fx1) + 1,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double fx1 = xpb / xpa,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

10:14:51.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:51.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:51.927 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0],commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double epsilon = (0.5 * fx1) + 1,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

10:14:53.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:53.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:53.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0],commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

10:14:55.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:55.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:55.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return y * x,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Code cleanup.
, ingredientB: Code cleanup.

10:14:57.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:57.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:57.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((x > 1.0E-6) || 
(x < (-1.0E-6))) {
	final double xpa = 1 + x;
	final double xpb = -((xpa - 1) - x);

	final double[] hiPrec = new double[2];
	final double lores = org.apache.commons.math3.util.FastMath.log(xpa, hiPrec);
	if (java.lang.Double.isInfinite(lores)) {
		return lores;
	}



	final double fx1 = xpb / xpa;
	final double epsilon = (0.5 * fx1) + 1;
	return ((epsilon * fx1) + hiPrec[1]) + hiPrec[0];
} else {

	final double y = (((x * org.apache.commons.math3.util.FastMath.F_1_3) - org.apache.commons.math3.util.FastMath.F_1_2) * x) + 1;
	return y * x;
},commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return y * x,commit: Code cleanup.
}, sim: 0.028426
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: added a function to raise a double to an int power

10:14:59.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:14:59.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:14:59.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: d = 1.0 / d,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: added a function to raise a double to an int power

10:15:01.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:01.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:01.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: d = 1.0 / d,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: added a function to raise a double to an int power

10:15:03.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:03.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:03.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (e == 0) {
	return 1.0;
} else if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:15:05.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:05.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:05.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (e == 0) {
	return 1.0;
} else if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:07.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:07.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:07.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double b = getB(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Removed too aggressive checks for impossible errors.

10:15:09.615 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:09.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:09.616 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Removed too aggressive checks for impossible errors.

10:15:11.706 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:11.706 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:11.707 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ZERO = new Decimal64(0.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:15:13.656 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:13.656 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:13.657 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:15:15.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:15.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:15.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Fixed definition of remainder and added missing copySign signature.

10:15:17.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:17.681 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:17.682 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign.value)),commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

10:15:19.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:19.650 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:19.651 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.MathArrays.linearCombination(a1.value, b1.value, 
a2.value, b2.value, 
a3.value, b3.value, 
a4.value, b4.value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

10:15:21.631 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:21.631 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:21.632 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < a.length; ++i) {
	aDouble[i] = a[i].value;
	bDouble[i] = b[i].value;
},commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

10:15:23.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:23.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:23.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.acos(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:15:25.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:25.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:25.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (obj instanceof org.apache.commons.math3.util.Decimal64) {
	final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj));
	return java.lang.Double.doubleToLongBits(this.value) == java.lang.Double.doubleToLongBits(
	that.value);
},commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

10:15:27.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:27.531 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:27.532 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.copySign(value, sign)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

10:15:29.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:29.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:29.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:15:31.477 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:31.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:31.478 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isInfinite(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Added a new ExtendedFieldElement interface.

10:15:33.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:33.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:33.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value + a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:15:35.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:35.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:35.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isNaN(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:37.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:37.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:37.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while (n < maxIterations) {
	final double a = getA(n, x);
	final double b = getB(n, x);

	double dN = a + (b * dPrev);
	if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
		dN = small;
	}
	double cN = a + (b / cPrev);
	if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
		cN = small;
	}

	dN = 1 / dN;
	final double deltaN = cN * dN;
	hN = hPrev * deltaN;

	if (java.lang.Double.isInfinite(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
		x);
	}
	if (java.lang.Double.isNaN(hN)) {
		throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
		x);
	}

	if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
		break;
	}

	dPrev = dN;
	cPrev = cN;
	hPrev = hN;
	n++;
} ,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:39.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:39.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:39.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: n++,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:42.068 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:42.068 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:42.069 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hPrev = hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:44.525 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:44.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:44.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cPrev = cN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:46.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:46.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:46.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dPrev = dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:49.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:49.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:49.022 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.FastMath.abs(deltaN - 1.0) < epsilon) {
	break;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:51.121 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:51.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:51.122 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.util.Decimal64(n * this.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isNaN(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, 
	x);
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:53.485 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:53.485 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:53.486 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (java.lang.Double.isInfinite(hN)) {
	throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
	x);
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:55.514 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:55.514 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:55.515 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: throw new org.apache.commons.math3.exception.ConvergenceException(org.apache.commons.math3.exception.util.LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, 
x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:57.541 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:57.541 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:57.542 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: hN = hPrev * deltaN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:15:59.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:15:59.633 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:15:59.634 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaN = cN * dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:01.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:01.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:01.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dN = 1 / dN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:03.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:03.846 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:03.847 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(cN, 0.0, small)) {
	cN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:05.809 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:05.809 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:05.810 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: cN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:07.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:07.869 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:07.870 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double cN = a + (b / cPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:09.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:09.880 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:09.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(dN, 0.0, small)) {
	dN = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:11.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:11.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:11.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: dN = small,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:14.057 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:14.057 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:14.058 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double dN = a + (b * dPrev),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:16.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:16.003 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:16.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double b = getB(n, x),commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:17.969 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:17.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:17.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double hN = hPrev,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:20.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:20.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:20.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (org.apache.commons.math3.util.Precision.equals(hPrev, 0.0, small)) {
	hPrev = small;
},commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:16:22.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:22.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:22.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double small = 1.0E-50,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Removed too aggressive checks for impossible errors.

10:16:25.124 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:25.124 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:25.125 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, epsilon, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Removed too aggressive checks for impossible errors.

10:16:27.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:27.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:27.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: ONE = new Decimal64(1.0),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return evaluate(x, org.apache.commons.math3.util.ContinuedFraction.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:29.608 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:29.608 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:29.609 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cd = splitFactor * d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:32.087 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:32.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:32.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d1High = cd - (cd - d),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cd = splitFactor * d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:34.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:34.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:34.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d1Low = d - d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double d1High = cd - (cd - d),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:36.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:36.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:36.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double resultHigh = 1,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double d1Low = d - d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:39.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:39.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:39.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double resultLow = 0,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double resultHigh = 1,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:41.434 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:41.434 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:41.435 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2p = d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double resultLow = 0,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:43.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:43.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:43.496 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2pHigh = d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double d2p = d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:45.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:45.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:45.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2pLow = d1Low,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double d2pHigh = d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:48.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:48.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:48.063 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double d2pLow = d1Low,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:50.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:50.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:50.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cRH = splitFactor * resultHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:52.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:52.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:52.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rHH = cRH - (cRH - resultHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cRH = splitFactor * resultHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:55.209 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:55.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:55.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rHL = resultHigh - rHH,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rHH = cRH - (cRH - resultHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:57.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:57.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:57.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow)),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rHL = resultHigh - rHH,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:16:59.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:16:59.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:16:59.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: resultHigh = tmpHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow)),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:01.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:01.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:01.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: resultLow = (resultLow * d2p) + tmpLow,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultHigh = tmpHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:03.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:03.931 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:03.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultLow = (resultLow * d2p) + tmpLow,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:06.110 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:06.110 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:06.111 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:08.158 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:08.158 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:08.159 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double d2pLow = d1Low,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:10.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:10.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:10.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow)),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:12.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:12.236 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:12.237 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultLow = (resultLow * d2p) + tmpLow,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:14.369 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:14.369 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:14.370 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:16.534 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:16.534 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:16.535 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:18.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:18.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:18.540 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultHigh = tmpHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:20.494 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:20.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:20.495 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpHigh = d2pHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:22.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:22.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:22.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:24.502 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:24.502 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:24.503 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:26.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:26.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:26.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultHigh = tmpHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:28.449 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:28.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:28.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:30.472 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:30.472 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:30.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:17:32.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:32.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:32.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:17:34.603 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:34.603 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:34.604 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64.ZERO,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:17:36.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:36.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:36.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.Decimal64.class,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:38.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:38.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:38.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:40.457 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:40.457 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:40.458 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: d = 1.0 / d,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:42.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:42.418 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:42.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final int splitFactor = 0x8000001,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: added a function to raise a double to an int power

10:17:44.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:44.688 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:44.689 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (e == 0) {
	return 1.0;
} else if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:17:47.127 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:47.127 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:47.128 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (e == 0) {
	return 1.0;
} else if (e < 0) {
	e = -e;
	d = 1.0 / d;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:49.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:49.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:49.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cd = splitFactor * d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:51.689 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:51.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:51.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d1High = cd - (cd - d),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:53.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:53.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:53.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double d1Low = d - d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:56.064 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:56.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:56.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double resultHigh = 1,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:17:58.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:17:58.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:17:58.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double resultLow = 0,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:18:00.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:00.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:00.186 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2p = d,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:18:02.393 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:02.393 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:02.394 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2pHigh = d1High,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:18:04.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:04.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:04.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double d2pLow = d1Low,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:18:06.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:06.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:06.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double tmpHigh = resultHigh * d2p,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:18:08.367 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:08.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:08.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cRH = splitFactor * resultHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy issues in FastMath.pow(double, int).
, ingredientB: added a function to raise a double to an int power

10:18:10.397 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:10.397 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:10.398 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rHH = cRH - (cRH - resultHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:18:12.420 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:12.420 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:12.421 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rHL = resultHigh - rHH,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:18:14.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:14.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:14.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow)),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:18:16.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:16.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:16.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: resultLow = (resultLow * d2p) + tmpLow,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:18:18.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:18.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:18.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cD2pH = splitFactor * d2pHigh,commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: added a function to raise a double to an int power
, ingredientB: Fixed accuracy issues in FastMath.pow(double, int).

10:18:20.418 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:20.418 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:20.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: e = -e,commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double d2pHH = cD2pH - (cD2pH - d2pHigh),commit: Fixed accuracy issues in FastMath.pow(double, int).
}, sim: -0.007415
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:18:22.463 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:22.463 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:22.464 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(this.value + a.value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Added a new ExtendedFieldElement interface.

10:18:24.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:24.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:24.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.sqrt(value)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:18:26.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:26.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:26.500 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.util.Decimal64 that = ((org.apache.commons.math3.util.Decimal64) (obj)),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Added a new ExtendedFieldElement interface.

10:18:28.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:28.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:28.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value * a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:18:30.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:30.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:30.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isInfinite(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Added a new ExtendedFieldElement interface.

10:18:32.598 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:32.598 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:32.599 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.util.Decimal64(value + a),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:18:34.577 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:34.577 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:34.578 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.

10:18:36.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:36.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:36.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64Field.INSTANCE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return java.lang.Double.isNaN(value),commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed definition of remainder and added missing copySign signature.
, ingredientB: added a function to raise a double to an int power

10:18:38.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:38.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:38.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (value < 0) {
	return new org.apache.commons.math3.util.Decimal64(-org.apache.commons.math3.util.FastMath.pow(-value, 1.0 / n));
} else {
	return new org.apache.commons.math3.util.Decimal64(org.apache.commons.math3.util.FastMath.pow(value, 1.0 / n));
},commit: Fixed definition of remainder and added missing copySign signature.
}, sim: -0.148678
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((e & 0x1) != 0) {


	final double tmpHigh = resultHigh * d2p;
	final double cRH = splitFactor * resultHigh;
	final double rHH = cRH - (cRH - resultHigh);
	final double rHL = resultHigh - rHH;
	final double tmpLow = (rHL * d2pLow) - (((tmpHigh - (rHH * d2pHigh)) - (rHL * d2pHigh)) - (rHH * d2pLow));
	resultHigh = tmpHigh;
	resultLow = (resultLow * d2p) + tmpLow;
},commit: added a function to raise a double to an int power
}, sim: -0.147672
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:18:41.051 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:41.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:41.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.ZERO,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:18:43.458 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:43.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:43.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.ONE,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
, ingredientB: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.

10:18:45.454 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:18:45.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:18:45.455 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.Decimal64.class,commit: Created Decimal64, a wrapper class around the primitive double type. This class implements FieldElement<Decimal64>. See MATH-756.
}, sim: 0.120530
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (org.apache.commons.math3.util.FastMath.RECOMPUTE_TABLES_AT_RUNTIME) {
	LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][];


	for (int i = 0; i < org.apache.commons.math3.util.FastMath.lnMant.LN_MANT.length; i++) {
		final double d = java.lang.Double.longBitsToDouble((((long) (i)) << 42) | 0x3ff0000000000000L);
		LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d);
	}
} else {
	LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant();
}, commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return hN,commit: [MATH-718] Use modified Lentz-Thompson algorithm for continued fraction evaluation.
}, sim: 0.051346
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 1
java.lang.IllegalArgumentException: Comparison method violates its general contract!
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:777)
	at java.util.TimSort.mergeAt(TimSort.java:514)
	at java.util.TimSort.mergeCollapse(TimSort.java:441)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 2307.538
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 1
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 5126.878


Node: 6aa9a39b6209



Date: Thu Nov 21 10:18:46 EST 2019

cd /script/jGenProg_Defects4J_Math_5;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-5 \
	-failing org.apache.commons.math3.complex.ComplexTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_5/target/classes/:/script/jGenProg_Defects4J_Math_5/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

