Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
log4j:ERROR setFile(null,true) call failed.
java.io.FileNotFoundException:  (No such file or directory)
	at java.io.FileOutputStream.open0(Native Method)
	at java.io.FileOutputStream.open(FileOutputStream.java:270)
	at java.io.FileOutputStream.<init>(FileOutputStream.java:213)
	at java.io.FileOutputStream.<init>(FileOutputStream.java:133)
	at org.apache.log4j.FileAppender.setFile(FileAppender.java:294)
	at org.apache.log4j.RollingFileAppender.setFile(RollingFileAppender.java:207)
	at org.apache.log4j.FileAppender.activateOptions(FileAppender.java:165)
	at org.apache.log4j.config.PropertySetter.activate(PropertySetter.java:307)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:172)
	at org.apache.log4j.config.PropertySetter.setProperties(PropertySetter.java:104)
	at org.apache.log4j.PropertyConfigurator.parseAppender(PropertyConfigurator.java:842)
	at org.apache.log4j.PropertyConfigurator.parseCategory(PropertyConfigurator.java:768)
	at org.apache.log4j.PropertyConfigurator.parseCatsAndRenderers(PropertyConfigurator.java:672)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:516)
	at org.apache.log4j.PropertyConfigurator.doConfigure(PropertyConfigurator.java:580)
	at org.apache.log4j.helpers.OptionConverter.selectAndConfigure(OptionConverter.java:526)
	at org.apache.log4j.LogManager.<clinit>(LogManager.java:127)
	at org.apache.log4j.Logger.getLogger(Logger.java:117)
	at fr.inria.astor.core.setup.ConfigurationProperties.<clinit>(ConfigurationProperties.java:16)
	at fr.inria.main.AbstractMain.<clinit>(AbstractMain.java:100)
2019-11-21 08:53:19,089 INFO fr.inria.astor.core.setup.ProjectConfiguration - Version of the JVM used: 1.7.0_181
2019-11-21 08:53:19,091 INFO main - Java version of the JDK used to run tests: 1.7.0_181
2019-11-21 08:53:19,091 INFO main - The compliance of the JVM is:  7
2019-11-21 08:53:19,094 INFO main - command line arguments: [-mode  jgenprog  -location  .  -id  Math-2  -failing  org.apache.commons.math3.distribution.HypergeometricDistributionTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:purpose  -dependencies  /script/jGenProg_Defects4J_Math_2/target/classes/:/script/jGenProg_Defects4J_Math_2/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
2019-11-21 08:53:19,095 INFO fr.inria.main.evolution.AstorMain - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_2/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_2/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:108) - mode is Purpose
Error analyzing class org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerTest
java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.createOptimizer()Lorg/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer; @4: areturn
  Reason:
    Type 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer' (current frame, stack[0]) is not assignable to 'org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest' }
    stack: { 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer' }
  Bytecode:
    0x0000000: 2ab6 0022 b0                           

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.privateGetPublicMethods(Class.java:2902)
	at java.lang.Class.getMethods(Class.java:1615)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptTestClass(TestFilter.java:92)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptClass(TestFilter.java:53)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.Processor.process(Processor.java:56)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:45)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:38)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Error analyzing class org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerTest
java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.createOptimizer()Lorg/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer; @4: areturn
  Reason:
    Type 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer' (current frame, stack[0]) is not assignable to 'org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest' }
    stack: { 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer' }
  Bytecode:
    0x0000000: 2ab6 0022 b0                           

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.privateGetPublicMethods(Class.java:2902)
	at java.lang.Class.getMethods(Class.java:1615)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptTestClassJUnit5(TestFilter.java:122)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptClass(TestFilter.java:56)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.Processor.process(Processor.java:56)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:45)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:38)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Error analyzing class org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizerTest
java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.createOptimizer()Lorg/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer; @4: areturn
  Reason:
    Type 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer' (current frame, stack[0]) is not assignable to 'org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest' }
    stack: { 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer' }
  Bytecode:
    0x0000000: 2ab6 000e b0                           

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.privateGetPublicMethods(Class.java:2902)
	at java.lang.Class.getMethods(Class.java:1615)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptTestClass(TestFilter.java:92)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptClass(TestFilter.java:53)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.Processor.process(Processor.java:56)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:45)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:38)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Error analyzing class org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizerTest
java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.createOptimizer()Lorg/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer; @4: areturn
  Reason:
    Type 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer' (current frame, stack[0]) is not assignable to 'org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest' }
    stack: { 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer' }
  Bytecode:
    0x0000000: 2ab6 000e b0                           

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.privateGetPublicMethods(Class.java:2902)
	at java.lang.Class.getMethods(Class.java:1615)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptTestClassJUnit5(TestFilter.java:122)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptClass(TestFilter.java:56)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.Processor.process(Processor.java:56)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:45)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:38)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Error analyzing class org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerTest
java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.createOptimizer()Lorg/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer; @4: areturn
  Reason:
    Type 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer' (current frame, stack[0]) is not assignable to 'org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest' }
    stack: { 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer' }
  Bytecode:
    0x0000000: 2ab6 0022 b0                           

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.privateGetPublicMethods(Class.java:2902)
	at java.lang.Class.getMethods(Class.java:1615)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptTestClass(TestFilter.java:92)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptClass(TestFilter.java:53)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.Processor.process(Processor.java:56)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:45)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:38)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Error analyzing class org.apache.commons.math3.fitting.leastsquares.GaussNewtonOptimizerTest
java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest.createOptimizer()Lorg/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer; @4: areturn
  Reason:
    Type 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer' (current frame, stack[0]) is not assignable to 'org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizerTest' }
    stack: { 'org/apache/commons/math3/fitting/leastsquares/GaussNewtonOptimizer' }
  Bytecode:
    0x0000000: 2ab6 0022 b0                           

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.privateGetPublicMethods(Class.java:2902)
	at java.lang.Class.getMethods(Class.java:1615)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptTestClassJUnit5(TestFilter.java:122)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptClass(TestFilter.java:56)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.Processor.process(Processor.java:56)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:45)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:38)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Error analyzing class org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizerTest
java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.createOptimizer()Lorg/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer; @4: areturn
  Reason:
    Type 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer' (current frame, stack[0]) is not assignable to 'org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest' }
    stack: { 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer' }
  Bytecode:
    0x0000000: 2ab6 000e b0                           

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.privateGetPublicMethods(Class.java:2902)
	at java.lang.Class.getMethods(Class.java:1615)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptTestClass(TestFilter.java:92)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptClass(TestFilter.java:53)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.Processor.process(Processor.java:56)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:45)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:38)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Error analyzing class org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizerTest
java.lang.VerifyError: Bad return type
Exception Details:
  Location:
    org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest.createOptimizer()Lorg/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer; @4: areturn
  Reason:
    Type 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer' (current frame, stack[0]) is not assignable to 'org/apache/commons/math3/fitting/leastsquares/AbstractLeastSquaresOptimizer' (from method signature)
  Current Frame:
    bci: @4
    flags: { }
    locals: { 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizerTest' }
    stack: { 'org/apache/commons/math3/fitting/leastsquares/LevenbergMarquardtOptimizer' }
  Bytecode:
    0x0000000: 2ab6 000e b0                           

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2701)
	at java.lang.Class.privateGetPublicMethods(Class.java:2902)
	at java.lang.Class.getMethods(Class.java:1615)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptTestClassJUnit5(TestFilter.java:122)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.TestFilter.acceptClass(TestFilter.java:56)
	at fr.inria.astor.core.faultlocalization.entity.runtestsuite.Processor.process(Processor.java:56)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:45)
	at fr.inria.astor.core.faultlocalization.entity.TestClassesFinder.call(TestClassesFinder.java:38)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 826
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_2/./output_astor/AstorMain-Math-2//bin//default from 826 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_2/./output_astor/AstorMain-Math-2//bin//default, /script/jGenProg_Defects4J_Math_2/target/classes/, /script/jGenProg_Defects4J_Math_2/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackLinearRank1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackBrownDennis
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackJennrichSampson
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackRosenbrok
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackBox3Dimensional
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackHelicalValley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackMeyer
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackLinearFullRank
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackFreudensteinRoth
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackOsborne1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackOsborne2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackWatson
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackKowalikOsborne
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackPowellSingular
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackChebyquad
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackLinearRank1ZeroColsAndRows
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackBard
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.MinpackTest#testMinpackBrownAlmostLinear
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.AbstractLeastSquaresOptimizerTest#testComputeRMS
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.AbstractLeastSquaresOptimizerTest#testComputeSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.fitting.leastsquares.AbstractLeastSquaresOptimizerTest#testComputeCost
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.linear.SimplexSolverTest#testMath828Cycle
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:5166, fails: 51, GZoltar suspicious 35223, with positive susp 2273
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 5166
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 878 with susp > 0.1, we consider: 878
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 3521830 milliseconds (3521 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_2/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_2/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_2/target/classes/, /script/jGenProg_Defects4J_Math_2/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 747
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 878
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=getData()[[D, lineNumber=198, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=getParameters()[D, lineNumber=238, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=getLeastSquaresProblem()Lorg/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset$LeastSquaresProblem;, lineNumber=307, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=354, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=355, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=357, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=358, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=359, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=361, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=362, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=364, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=365, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDataset, methodName=findLineNumbers(Ljava/lang/String;Ljava/lang/Iterable;)[I, lineNumber=367, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createBufferedReaderFromResource(Ljava/lang/String;)Ljava/io/BufferedReader;, lineNumber=45, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createBufferedReaderFromResource(Ljava/lang/String;)Ljava/io/BufferedReader;, lineNumber=47, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createBufferedReaderFromResource(Ljava/lang/String;)Ljava/io/BufferedReader;, lineNumber=50, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createKirby2()Lorg/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset;, lineNumber=55, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createKirby2()Lorg/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset;, lineNumber=56, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createKirby2()Lorg/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset;, lineNumber=58, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createKirby2()Lorg/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset;, lineNumber=82, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createKirby2()Lorg/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset;, lineNumber=83, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StatisticalReferenceDatasetFactory, methodName=createKirby2()Lorg/apache/commons/math3/fitting/leastsquares/StatisticalReferenceDataset;, lineNumber=84, susp=0.242535625036333]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.21004201260420147]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.21004201260420147]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.21004201260420147]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.21004201260420147]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=79, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=80, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=81, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=83, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=92, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=93, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=94, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=96, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=53, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=54, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StraightLineProblem, methodName=solve()[D, lineNumber=125, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StraightLineProblem, methodName=solve()[D, lineNumber=126, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StraightLineProblem, methodName=solve()[D, lineNumber=127, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StraightLineProblem, methodName=solve()[D, lineNumber=128, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StraightLineProblem, methodName=solve()[D, lineNumber=130, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.fitting.leastsquares.StraightLineProblem, methodName=solve()[D, lineNumber=131, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=68, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=69, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=71, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=72, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=73, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=74, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=75, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=76, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=77, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=78, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=79, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$2, methodName=value([D)[D, lineNumber=81, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=53, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=54, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=55, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=56, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=57, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=58, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=59, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar$1, methodName=value([D)D, lineNumber=60, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=39, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=addPoint(DD)V, lineNumber=40, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=43, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=44, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=45, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=46, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getRadius(Lorg/apache/commons/math3/geometry/euclidean/twod/Vector2D;)D, lineNumber=47, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunction()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunction;, lineNumber=51, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=getObjectiveFunctionGradient()Lorg/apache/commons/math3/optim/nonlinear/scalar/ObjectiveFunctionGradient;, lineNumber=66, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.gradient.CircleScalar, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/gradient/CircleScalar;)Ljava/util/ArrayList;, lineNumber=31, susp=0.19802950859533489]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.15601529024770314]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.15601529024770314]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.14291548761875736]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=116, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=117, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=118, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=120, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch$1, methodName=value(D)D, lineNumber=121, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=113, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=114, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=125, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=126, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=search([D[D)Lorg/apache/commons/math3/optim/univariate/UnivariatePointValuePair;, lineNumber=130, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optim.nonlinear.scalar.LineSearch, methodName=access$000(Lorg/apache/commons/math3/optim/nonlinear/scalar/LineSearch;)Lorg/apache/commons/math3/optim/nonlinear/scalar/MultivariateOptimizer;, lineNumber=35, susp=0.13584712216226488]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 878,  234
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 234
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 234, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_2/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 3521830
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.distribution.HypergeometricDistributionTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-2
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= purpose
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_2/target/classes/:/script/jGenProg_Defects4J_Math_2/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
09:28:51.537 [main] INFO  org.nd4j.linalg.factory.Nd4jBackend - Loaded [CpuBackend] backend
09:28:52.994 [main] INFO  org.nd4j.nativeblas.NativeOpsHolder - Number of threads used for NativeOps: 6
09:28:53.760 [main] INFO  org.nd4j.nativeblas.Nd4jBlas - Number of threads used for BLAS: 6
09:28:53.765 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Linux]
09:28:53.765 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Cores: [48]; Memory: [3.5GB];
09:28:53.766 [main] INFO  o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
09:28:54.325 [main] INFO  o.d.m.e.loader.WordVectorSerializer - Projected memory use for model: [3.96 MB]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: Fixed PMD warnings.

09:28:56.983 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:28:56.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:28:56.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double fW, commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, ingA: {code: if ((checker != null) && checker.converged(iter, previous, current)) {
	return best;
},commit: Fixed PMD warnings.
}, sim: -0.105863
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double fW, commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, ingB: {code: return best,commit: Fixed PMD warnings.
}, sim: -0.105863
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: Fixed PMD warnings.

09:28:59.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:28:59.700 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:28:59.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double fW, commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, ingA: {code: if ((maxIterationCount != org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker.ITERATION_CHECK_DISABLED) && (iteration >= maxIterationCount)) {
	return true;
},commit: Fixed PMD warnings.
}, sim: -0.105863
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double fW, commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, ingB: {code: return true,commit: Fixed PMD warnings.
}, sim: -0.105863
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:29:59.599 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:29:59.599 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:29:59.600 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:02.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:02.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:02.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:04.475 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:04.476 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:04.477 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:06.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:06.844 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:06.845 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:08.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:08.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:08.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:10.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:10.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:10.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:13.049 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:13.049 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:13.050 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:14.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:14.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:14.988 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:17.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:17.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:17.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:19.701 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:19.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:19.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:21.851 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:21.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:21.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:24.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:24.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:24.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:26.197 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:26.197 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:26.199 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:28.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:28.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:28.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:30.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:30.171 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:30.172 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:32.336 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:32.337 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:32.338 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:34.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:34.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:34.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:30:36.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:36.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:36.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:38.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:38.106 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:38.107 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:40.132 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:40.132 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:40.133 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:42.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:42.133 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:42.135 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:44.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:44.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:44.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:45.997 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:45.997 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:45.998 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:47.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:47.942 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:47.943 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:49.922 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:49.922 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:49.923 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:51.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:51.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:51.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:53.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:53.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:53.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:55.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:55.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:55.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:30:57.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:57.845 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:57.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:30:59.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:30:59.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:30:59.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:01.603 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:01.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:01.605 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:03.471 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:03.471 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:03.473 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:05.347 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:05.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:05.350 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:07.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:07.236 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:07.237 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:09.155 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:09.155 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:09.156 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:11.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:11.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:11.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:13.059 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:13.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:13.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:15.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:15.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:15.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:16.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:16.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:16.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:18.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:18.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:18.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:20.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:20.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:20.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:31:22.803 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:22.803 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:22.804 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:24.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:24.700 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:24.701 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:26.565 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:26.565 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:26.566 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:28.450 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:28.451 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:28.452 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:30.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:30.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:30.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:32.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:32.191 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:32.192 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:34.060 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:34.060 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:34.061 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:35.936 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:35.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:35.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:37.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:37.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:37.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:39.633 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:39.634 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:39.635 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:41.544 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:41.544 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:41.545 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:43.493 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:43.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:43.495 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:45.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:45.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:45.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:47.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:47.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:47.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:49.291 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:49.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:49.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:51.164 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:51.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:51.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:53.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:53.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:53.129 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:55.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:55.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:55.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:57.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:57.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:57.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:31:59.171 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:31:59.172 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:31:59.173 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:01.709 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:01.709 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:01.710 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:04.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:04.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:04.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:06.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:06.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:06.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:09.188 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:09.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:09.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:11.146 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:11.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:11.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:13.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:13.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:13.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:15.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:15.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:15.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:17.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:17.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:17.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:19.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:19.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:19.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:21.616 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:21.616 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:21.617 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:23.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:23.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:23.601 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[1].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:25.499 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:25.500 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:25.501 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[2].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[1].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:27.461 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:27.461 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:27.462 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[3].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[2].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:29.435 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:29.435 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:29.436 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[3].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:31.422 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:31.422 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:31.423 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.Field<T> field = squaredSine.getField(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:33.428 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:33.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:33.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inverse = squaredSine.sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.Field<T> field = squaredSine.getField(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:35.383 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:35.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:35.384 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = squaredSine.sqrt().reciprocal().negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inverse = squaredSine.sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:37.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:37.290 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:37.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = squaredSine.sqrt().reciprocal().negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:39.154 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:39.154 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:39.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:41.028 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:41.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:41.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:42.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:42.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:42.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:44.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:44.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:44.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:47.032 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:47.033 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:47.034 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:48.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:48.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:48.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:50.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:50.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:50.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T zero = q0.getField().getZero(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:52.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:52.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:52.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q0 = q0.multiply(q0),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T zero = q0.getField().getZero(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:54.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:54.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:54.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q1 = q0.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q0 = q0.multiply(q0),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:56.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:56.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:56.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q2 = q0.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q1 = q0.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:32:58.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:32:58.514 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:32:58.515 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q3 = q0.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q2 = q0.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:00.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:00.431 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:00.432 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q1 = q1.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q3 = q0.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:02.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:02.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:02.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q2 = q1.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q1 = q1.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:04.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:04.375 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:04.376 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q3 = q1.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q2 = q1.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:06.250 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:06.250 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:06.252 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q2q2 = q2.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q3 = q1.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:08.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:08.201 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:08.202 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q2q3 = q2.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q2q2 = q2.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:10.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:10.090 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:10.091 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q3q3 = q3.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q2q3 = q2.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:12.039 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:12.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:12.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] m = org.apache.commons.math3.util.MathArrays.buildArray(q0.getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q3q3 = q3.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:14.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:14.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:14.059 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] m = org.apache.commons.math3.util.MathArrays.buildArray(q0.getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:15.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:15.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:15.927 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:17.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:17.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:17.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:19.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:19.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:19.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:21.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:21.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:21.559 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:23.414 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:23.414 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:23.415 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:25.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:25.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:25.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:27.774 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:27.774 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:27.775 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:29.970 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:29.970 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:29.971 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:32.070 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:32.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:32.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:34.252 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:34.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:34.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:36.241 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:36.241 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:36.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:38.236 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:38.236 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:38.237 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:40.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:40.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:40.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:42.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:42.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:42.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T m0 = q0.negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:44.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:44.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:44.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double m0 = -r.getQ0(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T m0 = q0.negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:46.299 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:46.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:46.300 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x00 = m[0][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double m0 = -r.getQ0(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:48.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:48.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:48.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x01 = m[0][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x00 = m[0][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:50.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:50.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:50.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x02 = m[0][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x01 = m[0][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:52.313 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:52.314 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:52.315 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x02 = m[0][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:54.340 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:54.340 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:54.341 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x11 = m[1][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:56.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:56.308 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:56.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x12 = m[1][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x11 = m[1][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:33:58.160 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:33:58.160 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:33:58.161 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x20 = m[2][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x12 = m[1][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:00.039 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:00.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:00.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x21 = m[2][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x20 = m[2][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:01.903 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:01.903 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:01.904 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x22 = m[2][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x21 = m[2][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:03.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:03.835 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:03.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double fn = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x22 = m[2][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:05.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:05.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:05.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double fn1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double fn = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:07.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:07.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:07.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] o = org.apache.commons.math3.util.MathArrays.buildArray(m[0][0].getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double fn1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:09.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:09.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:09.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int i = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] o = org.apache.commons.math3.util.MathArrays.buildArray(m[0][0].getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:11.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:11.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:11.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int i = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:13.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:13.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:13.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:15.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:15.605 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:15.606 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:17.827 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:17.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:17.829 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:20.231 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:20.231 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:20.232 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:22.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:22.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:22.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:24.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:24.563 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:24.564 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:26.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:26.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:26.615 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:28.521 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:28.522 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:28.523 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:30.856 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:30.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:30.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr00 = o[0][0].getReal() - m[0][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:32.925 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:32.925 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:32.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr01 = o[0][1].getReal() - m[0][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr00 = o[0][0].getReal() - m[0][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:34.898 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:34.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:34.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr02 = o[0][2].getReal() - m[0][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr01 = o[0][1].getReal() - m[0][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:36.846 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:36.846 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:36.847 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr10 = o[1][0].getReal() - m[1][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr02 = o[0][2].getReal() - m[0][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:38.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:38.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:38.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr11 = o[1][1].getReal() - m[1][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr10 = o[1][0].getReal() - m[1][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:40.796 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:40.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:40.797 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr11 = o[1][1].getReal() - m[1][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:42.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:42.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:42.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr20 = o[2][0].getReal() - m[2][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:45.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:45.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:45.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr21 = o[2][1].getReal() - m[2][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr20 = o[2][0].getReal() - m[2][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:46.943 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:46.943 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:46.944 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr22 = o[2][2].getReal() - m[2][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr21 = o[2][1].getReal() - m[2][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:48.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:48.816 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:48.817 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr22 = o[2][2].getReal() - m[2][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:50.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:50.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:50.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T prototype = a1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:52.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:52.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:52.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T prototype = a1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:54.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:54.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:54.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:56.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:56.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:56.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:34:58.454 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:34:58.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:34:58.455 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:00.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:00.468 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:00.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:02.438 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:02.438 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:02.439 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:04.308 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:04.308 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:04.309 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:06.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:06.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:06.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:08.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:08.090 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:08.091 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:10.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:10.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:10.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:12.723 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:12.723 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:12.724 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:35:14.787 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:14.787 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:14.788 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:35:16.965 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:16.965 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:16.966 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:35:18.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:18.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:18.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:21.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:21.008 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:21.009 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:22.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:22.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:22.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:25.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:25.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:25.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:27.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:27.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:27.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:29.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:29.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:29.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:35:30.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:30.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:30.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:35:32.917 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:32.917 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:32.918 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:34.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:34.969 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:34.970 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:35:37.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:37.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:37.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:39.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:39.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:39.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:35:40.923 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:40.923 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:40.924 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:42.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:42.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:42.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:35:44.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:44.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:44.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:46.572 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:46.573 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:46.574 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:48.568 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:48.568 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:48.569 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:50.546 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:50.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:50.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:52.431 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:52.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:52.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:54.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:54.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:54.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:56.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:56.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:56.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:35:58.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:35:58.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:35:58.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:00.248 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:00.248 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:00.249 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:02.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:02.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:02.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:03.996 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:03.996 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:03.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:05.873 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:05.873 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:05.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:07.798 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:07.798 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:07.799 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:09.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:09.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:09.705 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:11.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:11.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:11.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:13.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:13.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:13.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:15.589 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:15.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:15.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:17.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:17.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:17.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:19.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:19.489 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:19.490 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:21.512 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:21.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:21.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:23.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:23.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:23.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:25.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:25.945 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:25.946 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:28.356 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:28.356 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:28.357 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:30.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:30.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:30.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:32.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:32.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:32.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:34.563 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:34.564 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:34.565 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:36.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:36.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:36.576 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:38.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:38.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:38.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:40.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:40.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:40.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:42.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:42.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:42.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:44.565 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:44.565 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:44.566 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:46.581 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:46.581 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:46.582 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:48.998 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:48.999 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:49.000 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:51.298 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:51.298 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:51.299 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:53.530 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:53.530 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:53.531 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:55.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:55.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:55.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Added a new ExtendedFieldElement interface.

09:36:58.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:36:58.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:36:58.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Added a new ExtendedFieldElement interface.

09:37:00.484 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:00.484 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:00.485 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Brought back some useful static methods.

09:37:02.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:02.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:02.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Brought back some useful static methods.

09:37:04.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:04.665 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:04.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Brought back some useful static methods.

09:37:06.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:06.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:06.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Added a new ExtendedFieldElement interface.

09:37:08.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:08.730 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:08.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Added a new ExtendedFieldElement interface.

09:37:10.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:10.887 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:10.888 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(direction, line.direction),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:12.900 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:12.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:12.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:14.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:14.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:14.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:16.778 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:16.778 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:16.779 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:18.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:18.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:18.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:20.891 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:20.891 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:20.892 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:22.992 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:22.992 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:22.993 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:25.379 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:25.379 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:25.380 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:27.432 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:27.432 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:27.433 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:29.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:29.700 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:29.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:31.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:31.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:31.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

09:37:33.968 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:33.968 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:33.969 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

09:37:35.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:35.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:35.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:37:37.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:37.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:37.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:37:40.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:40.021 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:40.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:37:42.087 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:42.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:42.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:37:43.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:43.994 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:43.995 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:45.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:45.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:45.920 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:47.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:47.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:47.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:50.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:50.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:50.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Removed too aggressive checks for impossible errors.

09:37:51.934 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:51.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:51.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed accuracy of 3D Line.revert().
, ingredientB: Brought back some useful static methods.

09:37:53.916 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:53.916 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:53.917 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:37:55.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:55.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:55.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:37:57.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:57.700 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:57.701 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:37:59.579 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:37:59.580 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:37:59.581 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:01.542 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:01.542 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:01.543 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:38:03.553 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:03.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:03.554 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:05.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:05.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:05.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:07.623 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:07.623 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:07.624 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:09.560 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:09.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:09.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:11.466 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:11.467 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:11.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:13.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:13.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:13.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:15.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:15.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:15.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:17.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:17.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:17.155 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:19.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:19.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:19.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:20.953 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:20.953 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:20.954 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:22.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:22.803 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:22.804 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:24.789 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:24.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:24.790 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:26.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:26.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:26.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:28.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:28.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:28.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:30.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:30.817 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:30.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:32.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:32.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:32.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:34.843 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:34.843 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:34.844 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:36.823 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:36.824 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:36.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:38:38.711 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:38.711 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:38.712 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Added a new ExtendedFieldElement interface.

09:38:40.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:40.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:40.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:38:42.459 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:42.459 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:42.460 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:38:44.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:44.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:44.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:38:46.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:46.330 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:46.331 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Fixed accuracy of 3D Line.revert().

09:38:48.189 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:48.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:48.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:38:50.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:50.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:50.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:38:52.097 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:52.097 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:52.098 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:38:54.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:54.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:54.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:38:55.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:55.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:55.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:38:57.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:57.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:57.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[3],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:38:59.753 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:38:59.753 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:38:59.754 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double sinTheta = org.apache.commons.math3.util.FastMath.sin(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cosTheta = org.apache.commons.math3.util.FastMath.cos(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:01.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:01.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:01.639 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cosPhi = org.apache.commons.math3.util.FastMath.cos(phi),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double sinTheta = org.apache.commons.math3.util.FastMath.sin(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:03.629 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:03.629 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:03.630 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double sinPhi = org.apache.commons.math3.util.FastMath.sin(phi),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cosPhi = org.apache.commons.math3.util.FastMath.cos(phi),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:05.505 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:05.505 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:05.506 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] hj = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double sinPhi = org.apache.commons.math3.util.FastMath.sin(phi),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:07.380 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:07.380 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:07.381 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] cHessian = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] hj = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:09.391 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:09.391 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:09.392 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = v.getX(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] cHessian = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:11.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:11.246 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:11.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = v.getY(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = v.getX(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:13.122 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:13.122 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:13.123 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = v.getZ(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = v.getY(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:15.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:15.028 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:15.029 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2 = (x * x) + (y * y),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = v.getZ(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:16.875 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:16.875 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:16.876 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho = org.apache.commons.math3.util.FastMath.sqrt(rho2),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2 = (x * x) + (y * y),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:18.766 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:18.766 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:18.767 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2 = rho2 + (z * z),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho = org.apache.commons.math3.util.FastMath.sqrt(rho2),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:20.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:20.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:20.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x2 = x * x,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2 = rho2 + (z * z),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:22.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:22.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:22.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y2 = y * y,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x2 = x * x,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:24.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:24.407 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:24.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z2 = z * z,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y2 = y * y,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:26.271 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:26.271 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:26.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2 = x2 + y2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z2 = z * z,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:28.133 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:28.133 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:28.134 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2 = rho2 + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2 = x2 + y2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:30.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:30.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:30.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xOr = x / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2 = rho2 + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:31.914 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:31.914 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:31.915 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOr = y / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOr = x / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:33.796 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:33.796 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:33.797 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zOr = z / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double yOr = y / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:35.789 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:35.789 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:35.790 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xOrho2 = x / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zOr = z / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:37.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:37.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:37.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOrho2 = y / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOrho2 = x / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:39.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:39.553 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:39.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xOr3 = xOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double yOrho2 = y / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:41.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:41.576 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:41.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOr3 = yOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOr3 = xOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:43.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:43.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:43.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zOr3 = zOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double yOr3 = yOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:46.257 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:46.257 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:46.258 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhor2 = rho * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zOr3 = zOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:48.672 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:48.672 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:48.673 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2r2 = rho * rhor2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhor2 = rho * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:50.650 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:50.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:50.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhor4 = rhor2 * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2r2 = rho * rhor2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:53.109 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:53.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:53.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho3r4 = rhor4 * rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhor4 = rhor2 * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:39:55.443 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:55.443 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:55.444 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho3r4 = rhor4 * rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

09:39:57.469 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:57.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:57.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D end = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getSup())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D start = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getInf())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed accuracy of 3D Line.revert().

09:39:59.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:39:59.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:39:59.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Brought back some useful static methods.

09:40:01.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:01.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:01.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:40:03.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:03.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:03.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho = org.apache.commons.math3.util.FastMath.sqrt(rho2),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:40:05.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:05.898 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:05.899 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2r2 = rho * rhor2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:40:07.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:07.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:07.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho3r4 = rhor4 * rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:40:09.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:09.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:09.822 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Removed too aggressive checks for impossible errors.

09:40:11.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:11.822 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:11.823 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Removed too aggressive checks for impossible errors.

09:40:13.930 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:13.930 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:13.931 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Removed too aggressive checks for impossible errors.

09:40:15.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:15.869 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:15.870 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:40:17.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:17.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:17.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:40:19.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:19.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:19.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:40:21.685 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:21.686 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:21.687 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:40:23.772 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:23.772 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:23.773 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:40:25.692 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:40:25.692 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:40:25.693 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line inter = otherPlane.intersection(thisPlane), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed accuracy of 3D Line.revert().

09:41:38.242 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:38.242 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:38.243 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Fixed checkstyle warnings.

09:41:40.727 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:40.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:40.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:41:43.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:43.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:43.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:41:45.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:45.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:45.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:41:47.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:47.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:47.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:41:49.557 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:49.557 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:49.558 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:41:51.641 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:51.641 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:51.642 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:41:53.655 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:53.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:53.656 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:41:55.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:55.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:55.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:41:57.771 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:57.771 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:57.772 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:41:59.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:41:59.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:41:59.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:01.948 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:01.949 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:01.950 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:04.228 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:04.228 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:04.229 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:06.159 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:06.159 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:06.160 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:08.174 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:08.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:08.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:10.185 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:10.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:10.186 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:12.539 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:12.539 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:12.541 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:14.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:14.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:14.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:16.829 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:16.829 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:16.830 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:18.715 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:18.715 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:18.716 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:20.902 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:20.902 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:20.902 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:22.995 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:22.995 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:22.997 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:24.986 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:24.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:24.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:26.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:26.846 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:26.846 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:28.833 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:28.833 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:28.834 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:31.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:31.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:31.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:33.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:33.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:33.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:34.971 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:34.971 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:34.972 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:36.870 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:36.871 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:36.871 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:38.767 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:38.767 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:38.768 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:40.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:40.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:40.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:42.724 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:42.724 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:42.725 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[1].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:44.729 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:44.729 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:44.730 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[2].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[1].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:46.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:46.856 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:46.857 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[3].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[2].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:48.720 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:48.720 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:48.721 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[3].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:50.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:50.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:50.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.Field<T> field = squaredSine.getField(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:52.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:52.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:52.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inverse = squaredSine.sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.Field<T> field = squaredSine.getField(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:54.360 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:54.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:54.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = squaredSine.sqrt().reciprocal().negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inverse = squaredSine.sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:56.231 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:56.232 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:56.233 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = squaredSine.sqrt().reciprocal().negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:42:58.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:42:58.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:42:58.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:00.104 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:00.104 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:00.105 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:02.055 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:02.055 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:02.056 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:04.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:04.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:04.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:06.086 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:06.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:06.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:07.952 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:07.952 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:07.953 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:09.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:09.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:09.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T zero = q0.getField().getZero(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:11.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:11.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:11.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q0 = q0.multiply(q0),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T zero = q0.getField().getZero(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:13.688 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:13.689 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:13.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q1 = q0.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q0 = q0.multiply(q0),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:15.584 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:15.584 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:15.585 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q2 = q0.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q1 = q0.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:17.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:17.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:17.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q3 = q0.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q2 = q0.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:19.399 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:19.399 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:19.400 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q1 = q1.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q3 = q0.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:21.289 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:21.289 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:21.290 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q2 = q1.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q1 = q1.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:23.181 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:23.181 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:23.182 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q3 = q1.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q2 = q1.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:25.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:25.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:25.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q2q2 = q2.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q3 = q1.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:27.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:27.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:27.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q2q3 = q2.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q2q2 = q2.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:28.977 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:28.978 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:28.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q3q3 = q3.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q2q3 = q2.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:30.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:30.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:30.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] m = org.apache.commons.math3.util.MathArrays.buildArray(q0.getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q3q3 = q3.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:32.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:32.835 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:32.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] m = org.apache.commons.math3.util.MathArrays.buildArray(q0.getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:34.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:34.748 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:34.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:37.006 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:37.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:37.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:39.508 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:39.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:39.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:41.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:41.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:41.666 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:43.827 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:43.827 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:43.828 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:46.037 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:46.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:46.038 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:48.142 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:48.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:48.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:50.048 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:50.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:50.049 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:52.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:52.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:52.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:54.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:54.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:54.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:56.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:56.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:56.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:43:58.173 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:43:58.173 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:43:58.174 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:00.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:00.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:00.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:01.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:01.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:01.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T m0 = q0.negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:04.170 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:04.170 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:04.171 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double m0 = -r.getQ0(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T m0 = q0.negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:06.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:06.261 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:06.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x00 = m[0][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double m0 = -r.getQ0(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:08.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:08.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:08.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x01 = m[0][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x00 = m[0][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:10.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:10.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:10.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x02 = m[0][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x01 = m[0][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:11.964 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:11.964 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:11.965 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x02 = m[0][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:13.866 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:13.866 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:13.867 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x11 = m[1][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:15.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:15.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:15.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x12 = m[1][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x11 = m[1][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:17.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:17.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:17.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x20 = m[2][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x12 = m[1][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:19.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:19.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:19.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x21 = m[2][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x20 = m[2][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:21.976 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:21.977 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:21.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x22 = m[2][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x21 = m[2][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:23.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:23.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:23.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double fn = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x22 = m[2][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:25.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:25.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:25.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double fn1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double fn = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:27.671 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:27.671 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:27.672 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] o = org.apache.commons.math3.util.MathArrays.buildArray(m[0][0].getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double fn1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:29.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:29.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:29.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int i = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] o = org.apache.commons.math3.util.MathArrays.buildArray(m[0][0].getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:31.736 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:31.736 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:31.737 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int i = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:34.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:34.185 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:34.186 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:36.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:36.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:36.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:38.538 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:38.538 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:38.539 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:40.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:40.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:40.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:42.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:42.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:42.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:44.918 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:44.918 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:44.919 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:47.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:47.208 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:47.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:49.689 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:49.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:49.690 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:51.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:51.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:51.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr00 = o[0][0].getReal() - m[0][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:54.118 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:54.119 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:54.120 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr01 = o[0][1].getReal() - m[0][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr00 = o[0][0].getReal() - m[0][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:56.194 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:56.194 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:56.195 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr02 = o[0][2].getReal() - m[0][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr01 = o[0][1].getReal() - m[0][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:44:58.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:44:58.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:44:58.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr10 = o[1][0].getReal() - m[1][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr02 = o[0][2].getReal() - m[0][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:01.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:01.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:01.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr11 = o[1][1].getReal() - m[1][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr10 = o[1][0].getReal() - m[1][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:03.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:03.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:03.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr11 = o[1][1].getReal() - m[1][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:06.093 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:06.093 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:06.094 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr20 = o[2][0].getReal() - m[2][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:08.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:08.165 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:08.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr21 = o[2][1].getReal() - m[2][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr20 = o[2][0].getReal() - m[2][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:10.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:10.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:10.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr22 = o[2][2].getReal() - m[2][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr21 = o[2][1].getReal() - m[2][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:12.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:12.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:12.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr22 = o[2][2].getReal() - m[2][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:14.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:14.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:14.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T prototype = a1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:16.758 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:16.758 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:16.759 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T prototype = a1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:18.832 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:18.832 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:18.833 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:21.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:21.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:21.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:23.291 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:23.291 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:23.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:25.705 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:25.705 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:25.706 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:28.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:28.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:28.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:30.264 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:30.265 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:30.266 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:32.311 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:32.311 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:32.312 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:34.348 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:34.348 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:34.349 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:36.390 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:36.390 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:36.391 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:38.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:38.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:38.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:40.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:40.418 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:40.419 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:42.384 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:42.384 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:42.385 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:44.402 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:44.403 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:44.404 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:46.273 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:46.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:46.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:48.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:48.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:48.210 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:50.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:50.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:50.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:52.321 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:52.321 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:52.322 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:54.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:54.319 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:54.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:56.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:56.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:56.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:45:58.285 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:45:58.285 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:45:58.286 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:46:00.593 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:00.593 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:00.594 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:46:02.934 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:02.934 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:02.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:46:04.880 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:04.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:04.881 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:07.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:07.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:07.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:09.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:09.113 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:09.114 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:10.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:10.986 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:10.987 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:13.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:13.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:13.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:14.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:14.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:14.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:17.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:17.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:17.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:19.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:19.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:19.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:20.957 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:20.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:20.958 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:22.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:22.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:22.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:46:24.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:24.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:24.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

09:46:26.937 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:26.937 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:26.938 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

09:46:28.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:28.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:28.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:46:30.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:30.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:30.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:46:32.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:32.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:32.750 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:46:34.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:34.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:34.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed checkstyle warnings.

09:46:36.469 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:36.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:36.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:46:38.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:38.366 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:38.367 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:46:40.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:40.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:40.317 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:46:42.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:42.294 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:42.295 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:46:44.328 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:44.328 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:44.329 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:46:46.329 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:46.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:46.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double sinTheta = org.apache.commons.math3.util.FastMath.sin(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cosTheta = org.apache.commons.math3.util.FastMath.cos(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:46:48.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:48.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:48.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cosPhi = org.apache.commons.math3.util.FastMath.cos(phi),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double sinTheta = org.apache.commons.math3.util.FastMath.sin(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:46:50.219 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:50.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:50.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] hj = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double sinPhi = org.apache.commons.math3.util.FastMath.sin(phi),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:46:52.095 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:52.095 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:52.096 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] cHessian = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] hj = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:46:53.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:53.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:53.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = v.getX(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] cHessian = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:46:55.867 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:55.867 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:55.868 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = v.getY(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = v.getX(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:46:57.740 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:57.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:57.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = v.getZ(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = v.getY(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:46:59.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:46:59.636 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:46:59.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2 = (x * x) + (y * y),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = v.getZ(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:01.504 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:01.504 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:01.505 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho = org.apache.commons.math3.util.FastMath.sqrt(rho2),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2 = (x * x) + (y * y),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:03.442 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:03.442 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:03.443 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2 = rho2 + (z * z),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho = org.apache.commons.math3.util.FastMath.sqrt(rho2),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:05.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:05.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:05.427 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x2 = x * x,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2 = rho2 + (z * z),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:07.296 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:07.296 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:07.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z2 = z * z,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y2 = y * y,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:09.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:09.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:09.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2 = x2 + y2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z2 = z * z,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:11.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:11.145 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:11.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2 = rho2 + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2 = x2 + y2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:13.069 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:13.069 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:13.070 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xOr = x / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2 = rho2 + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:15.004 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:15.005 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:15.006 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOr = y / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOr = x / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:16.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:16.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:16.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zOr = z / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double yOr = y / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:18.859 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:18.859 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:18.860 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xOrho2 = x / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zOr = z / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:20.730 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:20.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:20.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOrho2 = y / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOrho2 = x / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:22.651 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:22.651 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:22.652 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOr3 = yOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOr3 = xOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:24.516 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:24.516 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:24.517 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zOr3 = zOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double yOr3 = yOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:26.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:26.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:26.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhor2 = rho * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zOr3 = zOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:28.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:28.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:28.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2r2 = rho * rhor2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhor2 = rho * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:30.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:30.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:30.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhor4 = rhor2 * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2r2 = rho * rhor2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:32.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:32.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:32.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho3r4 = rhor4 * rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhor4 = rhor2 * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:34.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:34.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:34.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho3r4 = rhor4 * rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:47:35.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:35.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:35.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:47:37.817 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:37.817 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:37.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:47:39.820 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:39.820 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:39.821 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:47:42.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:42.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:42.245 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

09:47:44.621 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:47:44.621 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:47:44.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D end = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getSup())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> plus = node.getPlus(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D start = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getInf())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed accuracy of 3D Line.revert().

09:49:05.790 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:05.790 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:05.791 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Line reverted = new org.apache.commons.math3.geometry.euclidean.threed.Line(this),commit: Fixed accuracy of 3D Line.revert().
}, sim: 0.056341
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Fixed checkstyle warnings.

09:49:08.079 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:08.079 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:08.080 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[] quat = new double[4],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:49:10.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:10.241 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:10.242 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> u3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(u1, u2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:49:12.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:12.639 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:12.640 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2).normalize(),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:49:14.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:14.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:14.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(u, v),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:49:16.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:16.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:16.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> q = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v, u),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:49:18.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:18.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:18.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = v1.getNorm().multiply(v2.getNorm()),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Brought back some useful static methods.
, ingredientB: Brought back some useful static methods.

09:49:20.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:20.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:20.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dot = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.dotProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Brought back some useful static methods.

09:49:22.921 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:22.921 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:22.922 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v3 = org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D.crossProduct(v1, v2),commit: Brought back some useful static methods.
}, sim: -0.005145
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:25.166 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:25.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:25.167 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inv = 
q0.multiply(q0).add(q1.multiply(q1)).add(q2.multiply(q2)).add(q3.multiply(q3)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:27.394 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:27.395 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:27.396 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T norm = axis.getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:29.816 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:29.817 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:29.818 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T halfAngle = angle.multiply(-0.5),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:32.071 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:32.071 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:32.072 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = halfAngle.sin().divide(norm),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:34.129 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:34.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:34.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] ort = orthogonalizeMatrix(m, threshold),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:36.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:36.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:36.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d0 = ort[1][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[1][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:38.191 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:38.192 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:38.193 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d1 = ort[0][1].multiply(ort[2][2]).subtract(ort[2][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:40.089 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:40.089 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:40.090 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T d2 = ort[0][1].multiply(ort[1][2]).subtract(ort[1][1].multiply(ort[0][2])),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:42.366 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:42.367 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:42.368 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T det = 
ort[0][0].multiply(d0).subtract(ort[1][0].multiply(d1)).add(ort[2][0].multiply(d2)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:44.368 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:44.368 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:44.369 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = mat2quat(ort),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:46.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:46.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:46.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] array = org.apache.commons.math3.util.MathArrays.buildArray(u1.getX().getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:48.240 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:48.240 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:48.241 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T[] quat = mat2quat(array),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:50.331 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:50.331 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:50.332 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T normProduct = u.getNorm().multiply(v.getNorm()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:52.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:52.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:52.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> w = u.orthogonal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:54.328 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:54.329 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:54.330 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T coeff = q0.multiply(normProduct).multiply(2.0).reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:56.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:56.199 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:56.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T one = alpha1.getField().getOne(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:49:58.084 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:49:58.085 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:49:58.085 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r1 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA1()), alpha1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:00.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:00.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:00.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r2 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA2()), alpha2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:02.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:02.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:02.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> r3 = new org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T>(new org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>(one, order.getA3()), alpha3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:03.934 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:03.935 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:03.935 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldRotation<T> composed = r1.applyTo(r2.applyTo(r3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:05.879 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:05.879 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:05.880 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] quat = org.apache.commons.math3.util.MathArrays.buildArray(ort[0][0].getField(), 4),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:07.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:07.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:07.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T s = ort[0][0].add(ort[1][1]).add(ort[2][2]),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:09.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:09.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:09.736 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[1].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[0].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:11.653 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:11.653 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:11.654 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[2].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[1].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:13.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:13.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:13.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inv = quat[3].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[2].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:15.430 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:15.430 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:15.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inv = quat[3].reciprocal().multiply(0.25),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:17.342 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:17.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:17.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.Field<T> field = squaredSine.getField(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T squaredSine = q1.multiply(q1).add(q2.multiply(q2)).add(q3.multiply(q3)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:19.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:19.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:19.342 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T inverse = squaredSine.sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.Field<T> field = squaredSine.getField(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:21.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:21.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:21.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = squaredSine.sqrt().reciprocal().negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T inverse = squaredSine.sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:23.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:23.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:23.220 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = squaredSine.sqrt().reciprocal().negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:25.198 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:25.198 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:25.200 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:27.053 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:27.053 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:27.054 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:29.019 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:29.019 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:29.020 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:31.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:31.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:31.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 1, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:32.911 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:32.911 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:32.912 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v1 = applyTo(vector(1, 0, 0)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:34.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:34.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:34.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> v2 = applyInverseTo(vector(0, 0, 1)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:36.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:36.644 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:36.645 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T zero = q0.getField().getZero(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(a0.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:38.520 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:38.520 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:38.521 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q0 = q0.multiply(q0),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T zero = q0.getField().getZero(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:40.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:40.400 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:40.401 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q1 = q0.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q0 = q0.multiply(q0),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:42.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:42.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:42.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q2 = q0.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q1 = q0.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:44.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:44.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:44.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q0q3 = q0.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q2 = q0.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:45.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:45.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:45.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q1 = q1.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q0q3 = q0.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:47.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:47.851 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:47.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q2 = q1.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q1 = q1.multiply(q1),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:49.863 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:49.863 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:49.864 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q1q3 = q1.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q2 = q1.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:51.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:51.788 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:51.789 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q2q2 = q2.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q1q3 = q1.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:53.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:53.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:53.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q2q3 = q2.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q2q2 = q2.multiply(q2),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:56.058 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:56.058 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:56.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T q3q3 = q3.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q2q3 = q2.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:50:58.473 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:50:58.473 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:50:58.474 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] m = org.apache.commons.math3.util.MathArrays.buildArray(q0.getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T q3q3 = q3.multiply(q3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:00.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:00.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:00.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] m = org.apache.commons.math3.util.MathArrays.buildArray(q0.getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:02.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:02.793 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:02.794 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:04.904 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:04.904 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:04.905 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:07.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:07.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:07.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:08.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:08.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:08.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = q1.multiply(x).add(q2.multiply(y)).add(q3.multiply(z)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:10.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:10.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:10.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = u.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:13.074 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:13.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:13.075 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = u.getY(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:15.056 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:15.056 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:15.057 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = u.getZ(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:16.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:16.960 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:16.961 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:18.839 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:18.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:18.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:20.869 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:20.869 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:20.870 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:22.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:22.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:22.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = in[0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:24.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:24.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:24.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = in[1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:26.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:26.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:26.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = in[2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:28.845 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:28.846 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:28.847 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T m0 = q0.negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = x.multiply(r.getQ1()).add(y.multiply(r.getQ2())).add(z.multiply(r.getQ3())),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:30.776 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:30.776 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:30.777 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double m0 = -r.getQ0(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T m0 = q0.negate(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:32.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:32.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:32.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x00 = m[0][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double m0 = -r.getQ0(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:34.489 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:34.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:34.490 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x01 = m[0][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x00 = m[0][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:36.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:36.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:36.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x02 = m[0][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x01 = m[0][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:38.210 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:38.210 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:38.211 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x02 = m[0][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:40.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:40.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:40.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x11 = m[1][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x10 = m[1][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:42.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:42.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:42.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x12 = m[1][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x11 = m[1][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:44.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:44.115 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:44.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x20 = m[2][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x12 = m[1][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:46.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:46.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:46.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x21 = m[2][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x20 = m[2][0],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:48.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:48.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:48.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T x22 = m[2][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x21 = m[2][1],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:49.981 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:49.981 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:49.982 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double fn = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T x22 = m[2][2],commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:51.842 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:51.842 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:51.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double fn1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double fn = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:53.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:53.731 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:53.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[][] o = org.apache.commons.math3.util.MathArrays.buildArray(m[0][0].getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double fn1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:55.585 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:55.585 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:55.586 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int i = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[][] o = org.apache.commons.math3.util.MathArrays.buildArray(m[0][0].getField(), 3, 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:57.446 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:57.446 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:57.447 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int i = 0,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:51:59.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:51:59.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:51:59.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:01.266 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:01.266 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:01.267 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:03.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:03.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:03.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:05.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:05.102 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:05.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:06.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:06.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:06.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:08.893 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:08.893 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:08.894 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:10.868 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:10.868 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:10.869 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:12.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:12.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:12.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:14.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:14.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:14.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr00 = o[0][0].getReal() - m[0][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:16.575 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:16.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:16.577 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr01 = o[0][1].getReal() - m[0][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr00 = o[0][0].getReal() - m[0][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:18.497 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:18.497 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:18.498 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr02 = o[0][2].getReal() - m[0][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr01 = o[0][1].getReal() - m[0][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:20.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:20.342 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:20.343 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr10 = o[1][0].getReal() - m[1][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr02 = o[0][2].getReal() - m[0][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:22.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:22.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:22.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr11 = o[1][1].getReal() - m[1][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr10 = o[1][0].getReal() - m[1][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:24.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:24.082 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:24.083 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr11 = o[1][1].getReal() - m[1][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:25.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:25.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:25.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr20 = o[2][0].getReal() - m[2][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr12 = o[1][2].getReal() - m[1][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:27.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:27.811 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:27.813 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr21 = o[2][1].getReal() - m[2][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr20 = o[2][0].getReal() - m[2][0].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:29.687 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:29.687 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:29.688 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double corr22 = o[2][2].getReal() - m[2][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr21 = o[2][1].getReal() - m[2][1].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:31.555 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:31.555 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:31.556 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double corr22 = o[2][2].getReal() - m[2][2].getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:33.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:33.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:33.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T prototype = a1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: T cosDelta = delta.cos(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:35.381 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:35.381 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:35.382 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T prototype = a1,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:37.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:37.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:37.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T prototype = u1.getX(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:39.272 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:39.272 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:39.273 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T[] array = org.apache.commons.math3.util.MathArrays.buildArray(x.getField(), 3),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:41.153 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:41.153 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:41.154 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T xAbs = x.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:43.044 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:43.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:43.045 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T yAbs = y.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:45.034 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:45.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:45.035 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T zAbs = z.abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:46.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:46.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:46.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T s = getNorm(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:48.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:48.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:48.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = 0.6 * getNorm().getReal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:50.718 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:50.718 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:50.719 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = y.multiply(y).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:52.578 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:52.578 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:52.579 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = x.multiply(x).add(z.multiply(z)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:54.562 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:54.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:54.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T inverse = x.multiply(x).add(y.multiply(y)).sqrt().reciprocal(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:56.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:56.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:56.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double threshold = normProduct.getReal() * 0.9999,commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:52:58.290 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:52:58.291 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:52:58.291 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T> rhs = ((org.apache.commons.math3.geometry.euclidean.threed.FieldVector3D<T>) (other)),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:00.180 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:00.180 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:00.181 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:02.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:02.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:02.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:03.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:03.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:03.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:05.757 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:05.757 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:05.758 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:07.609 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:07.609 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:07.610 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:09.480 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:09.480 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:09.481 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = z.subtract(v.getZ()).abs(),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:11.345 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:11.345 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:11.346 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = v.x.subtract(x),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:13.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:13.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:13.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = v.y.subtract(y),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:15.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:15.102 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:15.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dz = v.z.subtract(z),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:17.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:17.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:17.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dx = x.subtract(v.getX()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added a new ExtendedFieldElement interface.
, ingredientB: Added a new ExtendedFieldElement interface.

09:53:19.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:19.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:19.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final T dz = z.subtract(v.getZ()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final T dy = y.subtract(v.getY()),commit: Added a new ExtendedFieldElement interface.
}, sim: -0.058011
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:20.962 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:20.962 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:20.963 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double angle = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.angle(w, plane.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:22.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:22.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:22.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D delta = origin.subtract(center),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:24.878 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:24.878 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:24.879 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(origin.add(translation), w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane plane = new org.apache.commons.math3.geometry.euclidean.threed.Plane(center.add(rotation.applyTo(delta)), 
rotation.applyTo(w)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:26.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:26.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:26.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D point = org.apache.commons.math3.geometry.euclidean.threed.Plane.intersection(this, other, new org.apache.commons.math3.geometry.euclidean.threed.Plane(direction)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D direction = org.apache.commons.math3.geometry.euclidean.threed.Vector3D.crossProduct(w, other.w),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:28.612 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:28.612 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:28.613 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMin, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:30.558 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:30.558 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:30.559 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pxMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(xMax, 0, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_I),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:32.469 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:32.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:32.470 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMin, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:34.365 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:34.365 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:34.366 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pyMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, yMax, 0), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_J),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:36.243 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:36.244 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:36.244 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMin = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMin), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.MINUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:53:38.208 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:38.209 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:38.209 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: @java.lang.SuppressWarnings("unchecked")
final org.apache.commons.math3.geometry.partitioning.Region<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D> boundary = 
new org.apache.commons.math3.geometry.partitioning.RegionFactory<org.apache.commons.math3.geometry.euclidean.threed.Euclidean3D>().buildConvex(pxMin, pxMax, pyMin, pyMax, pzMin, pzMax),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Plane pzMax = new org.apache.commons.math3.geometry.euclidean.threed.Plane(new org.apache.commons.math3.geometry.euclidean.threed.Vector3D(0, 0, zMax), org.apache.commons.math3.geometry.euclidean.threed.Vector3D.PLUS_K),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

09:53:40.077 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:40.077 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:40.078 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP00 = tPlane.toSubSpace(apply(p00)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Populate throws declarations for geometry package.
, ingredientB: Populate throws declarations for geometry package.

09:53:41.958 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:41.958 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:41.958 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP01 = tPlane.toSubSpace(apply(p01)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D tP10 = tPlane.toSubSpace(apply(p10)),commit: Populate throws declarations for geometry package.
}, sim: -0.036707
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:53:43.853 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:43.853 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:43.854 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double s = (ort[0][0] + ort[1][1]) + ort[2][2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:53:45.750 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:45.750 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:45.751 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[0],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed checkstyle warnings.
, ingredientB: Fixed checkstyle warnings.

09:53:47.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:47.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:47.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[1],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed checkstyle warnings.

09:53:49.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:49.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:49.449 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double inv = 0.25 / quat[2],commit: Fixed checkstyle warnings.
}, sim: 0.010599
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:53:51.315 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:51.315 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:51.316 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(ort),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:53:53.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:53.190 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:53.191 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D u3 = u1.crossProduct(u2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:53:55.087 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:55.087 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:55.088 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D v3 = v1.crossProduct(v2).normalize(),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
, ingredientB: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.

09:53:56.951 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:56.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:56.952 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: double[] quat = org.apache.commons.math3.geometry.euclidean.threed.Rotation.mat2quat(m),commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] m = new double[][]{ 
new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getX(), u2.getX(), v2.getX(), u3.getX(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getX(), u2.getY(), v2.getX(), u3.getY(), v3.getX()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getX(), u2.getZ(), v2.getX(), u3.getZ(), v3.getX()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getY(), u2.getX(), v2.getY(), u3.getX(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getY(), u2.getY(), v2.getY(), u3.getY(), v3.getY()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getY(), u2.getZ(), v2.getY(), u3.getZ(), v3.getY()) }, 

new double[]{ 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getX(), v1.getZ(), u2.getX(), v2.getZ(), u3.getX(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getY(), v1.getZ(), u2.getY(), v2.getZ(), u3.getY(), v3.getZ()), 
org.apache.commons.math3.util.MathArrays.linearCombination(u1.getZ(), v1.getZ(), u2.getZ(), v2.getZ(), u3.getZ(), v3.getZ()) } },commit: Fixed a problem when building rotations from two pairs of vectors. In very rare cases, due to numerical inaccuracies the computed quaternion was not normalized (some examples went as high as 1.0e8) and even after normalization, the quaternion was plain wrong.
}, sim: -0.171078
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:53:58.850 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:53:58.850 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:53:58.851 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double sinTheta = org.apache.commons.math3.util.FastMath.sin(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double cosTheta = org.apache.commons.math3.util.FastMath.cos(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:00.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:00.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:00.705 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double cosPhi = org.apache.commons.math3.util.FastMath.cos(phi),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double sinTheta = org.apache.commons.math3.util.FastMath.sin(theta),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:02.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:02.561 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:02.562 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] hj = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double sinPhi = org.apache.commons.math3.util.FastMath.sin(phi),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:04.419 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:04.419 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:04.420 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double[][] cHessian = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] hj = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:06.282 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:06.282 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:06.283 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x = v.getX(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double[][] cHessian = new double[3][3],commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:08.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:08.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:08.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double y = v.getY(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double x = v.getX(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:10.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:10.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:10.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z = v.getZ(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y = v.getY(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:11.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:11.951 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:11.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2 = (x * x) + (y * y),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z = v.getZ(),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:13.805 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:13.805 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:13.806 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho = org.apache.commons.math3.util.FastMath.sqrt(rho2),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2 = (x * x) + (y * y),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:15.669 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:15.669 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:15.670 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2 = rho2 + (z * z),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho = org.apache.commons.math3.util.FastMath.sqrt(rho2),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:17.551 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:17.551 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:17.552 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double x2 = x * x,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2 = rho2 + (z * z),commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:19.487 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:19.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:19.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double z2 = z * z,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double y2 = y * y,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:21.344 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:21.344 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:21.345 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2 = x2 + y2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double z2 = z * z,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:23.207 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:23.207 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:23.208 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2 = rho2 + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2 = x2 + y2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:25.147 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:25.147 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:25.148 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xOr = x / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2 = rho2 + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:27.042 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:27.042 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:27.043 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOr = y / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOr = x / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:28.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:28.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:28.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zOr = z / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double yOr = y / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:30.762 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:30.762 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:30.763 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double xOrho2 = x / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zOr = z / r,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:32.696 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:32.697 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:32.698 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOrho2 = y / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOrho2 = x / rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:34.632 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:34.632 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:34.633 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double yOr3 = yOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double xOr3 = xOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:36.518 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:36.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:36.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double zOr3 = zOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double yOr3 = yOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:38.405 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:38.405 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:38.406 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhor2 = rho * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double zOr3 = zOr / r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:40.359 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:40.360 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:40.361 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho2r2 = rho * rhor2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhor2 = rho * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:42.238 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:42.238 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:42.239 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rhor4 = rhor2 * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho2r2 = rho * rhor2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:44.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:44.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:44.109 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double rho3r4 = rhor4 * rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rhor4 = rhor2 * r2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:46.010 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:46.010 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:46.011 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double rho3r4 = rhor4 * rho2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.

09:54:48.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:48.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:48.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r2P2rho2 = (3 * rho2) + z2,commit: Added conversion of gradients and Hessians from spherical to Cartesian coordinates in 3D.
}, sim: 0.024976
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:54:49.904 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:49.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:49.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r1 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA1(), alpha1),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:54:51.862 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:51.862 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:51.863 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r2 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA2(), alpha2),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Removed too aggressive checks for impossible errors.
, ingredientB: Removed too aggressive checks for impossible errors.

09:54:54.258 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:54.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:54.260 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation composed = r1.applyTo(r2.applyTo(r3)),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.threed.Rotation r3 = new org.apache.commons.math3.geometry.euclidean.threed.Rotation(order.getA3(), alpha3),commit: Removed too aggressive checks for impossible errors.
}, sim: -0.094017
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

09:54:56.267 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:54:56.267 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:54:56.268 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D end = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getSup())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double inverse = 1 / org.apache.commons.math3.util.FastMath.sqrt((x * x) + (y * y)), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.threed.Vector3D start = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getInf())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:15.392 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:15.392 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:15.393 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: initialStep = step,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this(updateFormula, 
checker, 
new org.apache.commons.math3.analysis.solvers.BrentSolver(), 
new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:17.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:17.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:17.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return initialStep,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: initialStep = step,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:20.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:20.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:20.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: this(updateFormula, 
checker, 
lineSearchSolver, 
new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return initialStep,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:22.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:22.549 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:22.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: this.updateFormula = updateFormula,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this(updateFormula, 
checker, 
lineSearchSolver, 
new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:24.517 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:24.518 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:24.519 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: solver = lineSearchSolver,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this.updateFormula = updateFormula,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:26.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:26.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:26.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: this.preconditioner = preconditioner,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: solver = lineSearchSolver,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:28.802 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:28.803 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:28.803 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: initialStep = 1,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this.preconditioner = preconditioner,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:30.733 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:30.733 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:30.734 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return super.optimize(optData),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: initialStep = 1,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:32.830 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:32.830 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:32.831 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> checker = getConvergenceChecker(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return super.optimize(optData),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:35.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:35.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:35.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double[] point = getStartPoint(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final org.apache.commons.math3.optim.ConvergenceChecker<org.apache.commons.math3.optim.PointValuePair> checker = getConvergenceChecker(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:37.063 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:37.064 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:37.064 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal = getGoalType(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double[] point = getStartPoint(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:38.989 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:38.989 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:38.990 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final int n = point.length,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final org.apache.commons.math3.optim.nonlinear.scalar.GoalType goal = getGoalType(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:40.931 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:40.932 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:40.932 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: double[] r = computeObjectiveGradient(point),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final int n = point.length,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:43.012 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:43.012 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:43.013 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: r[i] = -r[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double[] r = computeObjectiveGradient(point),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:45.118 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:45.118 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:45.119 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (int i = 0; i < n; i++) {
	r[i] = -r[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: r[i] = -r[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:47.186 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:47.186 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:47.187 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if (goal == org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE) {
	for (int i = 0; i < n; i++) {
		r[i] = -r[i];
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < n; i++) {
	r[i] = -r[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:49.065 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:49.065 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:49.066 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: double[] steepestDescent = preconditioner.precondition(point, r),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if (goal == org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE) {
	for (int i = 0; i < n; i++) {
		r[i] = -r[i];
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:50.959 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:50.959 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:50.960 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: double[] searchDirection = steepestDescent.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double[] steepestDescent = preconditioner.precondition(point, r),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:52.894 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:52.894 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:52.895 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: double delta = 0,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double[] searchDirection = steepestDescent.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:54.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:54.785 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:54.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: delta += r[i] * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double delta = 0,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:56.735 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:56.735 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:56.735 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (int i = 0; i < n; ++i) {
	delta += r[i] * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: delta += r[i] * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:55:58.785 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:55:58.786 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:55:58.786 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: org.apache.commons.math3.optim.PointValuePair current = null,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < n; ++i) {
	delta += r[i] * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:00.813 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:00.814 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:00.814 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: int maxEval = getMaxEvaluations(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: org.apache.commons.math3.optim.PointValuePair current = null,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:02.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:02.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:02.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: org.apache.commons.math3.optim.PointValuePair previous = current,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double objective = computeObjectiveValue(point),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:04.883 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:04.883 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:04.884 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: current = new org.apache.commons.math3.optim.PointValuePair(point, objective),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: org.apache.commons.math3.optim.PointValuePair previous = current,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:06.781 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:06.781 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:06.782 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: current = new org.apache.commons.math3.optim.PointValuePair(point, objective),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: Fixed PMD warnings.

09:56:08.647 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:08.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:08.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((previous != null) && checker.converged(getIterations(), previous, current)) {

	return current;
},commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: Fixed PMD warnings.

09:56:10.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:10.487 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:10.488 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if ((previous != null) && checker.converged(getIterations(), previous, current)) {

	return current;
},commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:12.377 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:12.377 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:12.378 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double uB = findUpperBound(lsf, 0, initialStep),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:14.261 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:14.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:14.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double step = solver.solve(maxEval, lsf, 0, uB, 1.0E-15),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double uB = findUpperBound(lsf, 0, initialStep),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:16.163 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:16.163 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:16.164 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: maxEval -= solver.getEvaluations(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double step = solver.solve(maxEval, lsf, 0, uB, 1.0E-15),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:18.045 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:18.045 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:18.046 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: point[i] += step * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: maxEval -= solver.getEvaluations(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:20.004 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:20.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:20.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (int i = 0; i < point.length; ++i) {
	point[i] += step * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: point[i] += step * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:21.887 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:21.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:21.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: r = computeObjectiveGradient(point),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < point.length; ++i) {
	point[i] += step * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:23.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:23.920 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:23.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (int i = 0; i < n; ++i) {
	r[i] = -r[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: r = computeObjectiveGradient(point),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:25.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:25.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:25.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if (goal == org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE) {
	for (int i = 0; i < n; ++i) {
		r[i] = -r[i];
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < n; ++i) {
	r[i] = -r[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:27.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:27.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:27.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double deltaOld = delta,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if (goal == org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE) {
	for (int i = 0; i < n; ++i) {
		r[i] = -r[i];
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:29.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:29.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:29.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double[] newSteepestDescent = preconditioner.precondition(point, r),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double deltaOld = delta,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:31.852 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:31.852 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:31.853 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: delta = 0,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double[] newSteepestDescent = preconditioner.precondition(point, r),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:33.897 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:33.897 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:33.898 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: delta += r[i] * newSteepestDescent[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: delta = 0,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:35.835 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:35.835 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:35.836 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (int i = 0; i < n; ++i) {
	delta += r[i] * newSteepestDescent[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: delta += r[i] * newSteepestDescent[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:37.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:37.743 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:37.744 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double beta,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < n; ++i) {
	delta += r[i] * newSteepestDescent[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:39.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:39.657 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:39.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: deltaMid += r[i] * steepestDescent[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double beta,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:41.592 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:41.592 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:41.593 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: switch (updateFormula) {
	case FLETCHER_REEVES :
		beta = delta / deltaOld;
		break;
	case POLAK_RIBIERE :
		double deltaMid = 0;
		for (int i = 0; i < r.length; ++i) {
			deltaMid += r[i] * steepestDescent[i];
		}
		beta = (delta - deltaMid) / deltaOld;
		break;
	default :

		throw new org.apache.commons.math3.exception.MathInternalError();},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: deltaMid += r[i] * steepestDescent[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:43.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:43.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:43.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: steepestDescent = newSteepestDescent,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: switch (updateFormula) {
	case FLETCHER_REEVES :
		beta = delta / deltaOld;
		break;
	case POLAK_RIBIERE :
		double deltaMid = 0;
		for (int i = 0; i < r.length; ++i) {
			deltaMid += r[i] * steepestDescent[i];
		}
		beta = (delta - deltaMid) / deltaOld;
		break;
	default :

		throw new org.apache.commons.math3.exception.MathInternalError();},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:45.548 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:45.548 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:45.549 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: searchDirection = steepestDescent.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: steepestDescent = newSteepestDescent,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:47.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:47.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:47.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: searchDirection = steepestDescent.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:49.326 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:49.326 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:49.327 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (int i = 0; i < n; ++i) {
	searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:51.224 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:51.224 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:51.225 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: while (true) {
	incrementIterationCount();

	final double objective = computeObjectiveValue(point);
	org.apache.commons.math3.optim.PointValuePair previous = current;
	current = new org.apache.commons.math3.optim.PointValuePair(point, objective);
	if ((previous != null) && checker.converged(getIterations(), previous, current)) {

		return current;
	}


	final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection);
	final double uB = findUpperBound(lsf, 0, initialStep);



	final double step = solver.solve(maxEval, lsf, 0, uB, 1.0E-15);
	maxEval -= solver.getEvaluations();


	for (int i = 0; i < point.length; ++i) {
		point[i] += step * searchDirection[i];
	}

	r = computeObjectiveGradient(point);
	if (goal == org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE) {
		for (int i = 0; i < n; ++i) {
			r[i] = -r[i];
		}
	}


	final double deltaOld = delta;
	final double[] newSteepestDescent = preconditioner.precondition(point, r);
	delta = 0;
	for (int i = 0; i < n; ++i) {
		delta += r[i] * newSteepestDescent[i];
	}

	final double beta;
	switch (updateFormula) {
		case FLETCHER_REEVES :
			beta = delta / deltaOld;
			break;
		case POLAK_RIBIERE :
			double deltaMid = 0;
			for (int i = 0; i < r.length; ++i) {
				deltaMid += r[i] * steepestDescent[i];
			}
			beta = (delta - deltaMid) / deltaOld;
			break;
		default :

			throw new org.apache.commons.math3.exception.MathInternalError();}

	steepestDescent = newSteepestDescent;


	if (((getIterations() % n) == 0) || 
	(beta < 0)) {

		searchDirection = steepestDescent.clone();
	} else {

		for (int i = 0; i < n; ++i) {
			searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
		}
	}
} ,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:53.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:53.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:53.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: break,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:55.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:55.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:55.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
	initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


	break;
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: break,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:56.954 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:56.954 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:56.955 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
	initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


	break;
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:56:58.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:56:58.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:56:58.842 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: checkParameters(),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).

09:57:00.731 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:00.732 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:00.732 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double yA = f.value(a),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: checkParameters(),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:02.743 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:02.744 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:02.745 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: double yB = yA,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double yA = f.value(a),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:04.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:04.626 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:04.627 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double b = a + step,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double yB = yA,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:06.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:06.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:06.530 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: yB = f.value(b),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double b = a + step,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:08.549 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:08.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:08.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return b,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: yB = f.value(b),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:10.455 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:10.455 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:10.456 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((yA * yB) <= 0) {
	return b;
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return b,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:12.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:12.444 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:12.445 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (double step = h; step < java.lang.Double.MAX_VALUE; step *= org.apache.commons.math3.util.FastMath.max(2, yA / yB)) {
	final double b = a + step;
	yB = f.value(b);
	if ((yA * yB) <= 0) {
		return b;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if ((yA * yB) <= 0) {
	return b;
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:14.483 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:14.483 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:14.484 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: throw new org.apache.commons.math3.exception.MathIllegalStateException(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (double step = h; step < java.lang.Double.MAX_VALUE; step *= org.apache.commons.math3.util.FastMath.max(2, yA / yB)) {
	final double b = a + step;
	yB = f.value(b);
	if ((yA * yB) <= 0) {
		return b;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:16.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:16.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:16.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return r.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: throw new org.apache.commons.math3.exception.MathIllegalStateException(org.apache.commons.math3.exception.util.LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:18.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:18.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:18.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: currentPoint = point.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return r.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:20.288 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:20.288 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:20.289 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: searchDirection = direction.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: currentPoint = point.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:22.184 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:22.184 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:22.185 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double[] shiftedPoint = currentPoint.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: searchDirection = direction.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:24.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:24.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:24.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: shiftedPoint[i] += x * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double[] shiftedPoint = currentPoint.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:26.020 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:26.020 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:26.021 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (int i = 0; i < shiftedPoint.length; ++i) {
	shiftedPoint[i] += x * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: shiftedPoint[i] += x * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:27.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:27.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:27.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final double[] gradient = computeObjectiveGradient(shiftedPoint),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < shiftedPoint.length; ++i) {
	shiftedPoint[i] += x * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:29.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:29.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:29.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: double dotProduct = 0,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double[] gradient = computeObjectiveGradient(shiftedPoint),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:31.722 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:31.722 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:31.723 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: dotProduct += gradient[i] * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double dotProduct = 0,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:33.620 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:33.620 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:33.621 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (int i = 0; i < gradient.length; ++i) {
	dotProduct += gradient[i] * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: dotProduct += gradient[i] * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:35.522 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:35.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:35.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return dotProduct,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < gradient.length; ++i) {
	dotProduct += gradient[i] * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:37.424 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:37.424 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:37.425 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return dotProduct,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:39.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:39.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:39.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: checkParameters(),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:41.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:41.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:41.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return dotProduct,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:43.142 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:43.142 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:43.143 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < gradient.length; ++i) {
	dotProduct += gradient[i] * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:45.047 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:45.048 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:45.048 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double dotProduct = 0,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:46.979 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:46.979 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:46.980 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double[] shiftedPoint = currentPoint.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:48.908 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:48.908 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:48.909 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: yB = f.value(b),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:50.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:50.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:50.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double yB = yA,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:52.775 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:52.775 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:52.776 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double yA = f.value(a),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).

09:57:54.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:54.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:54.722 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: for (org.apache.commons.math3.optim.OptimizationData data : optData) {
	if (data instanceof org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) {
		initialStep = ((org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.BracketingStep) (data)).getBracketingStep();


		break;
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: checkParameters(),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:56.643 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:56.643 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:56.644 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: checkParameters(),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this(updateFormula, 
checker, 
new org.apache.commons.math3.analysis.solvers.BrentSolver(), 
new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:57:58.567 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:57:58.567 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:57:58.568 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((previous != null) && checker.converged(getIterations(), previous, current)) {

	return current;
},commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return dotProduct,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:00.657 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:00.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:00.658 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this(updateFormula, 
checker, 
new org.apache.commons.math3.analysis.solvers.BrentSolver(), 
new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:03.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:03.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:03.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: initialStep = step,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:05.478 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:05.478 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:05.479 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return initialStep,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:07.935 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:07.936 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:07.937 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this(updateFormula, 
checker, 
lineSearchSolver, 
new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:10.400 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:10.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:10.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this.updateFormula = updateFormula,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:12.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:12.498 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:12.499 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: solver = lineSearchSolver,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:14.784 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:14.784 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:14.785 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this.preconditioner = preconditioner,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:16.924 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:16.924 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:16.925 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: initialStep = 1,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:19.128 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:19.129 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:19.130 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return super.optimize(optData),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:21.054 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:21.054 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:21.055 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double[] point = getStartPoint(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:23.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:23.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:23.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: r[i] = -r[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:25.554 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:25.554 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:25.555 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: org.apache.commons.math3.optim.PointValuePair current = null,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:27.991 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:27.991 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:27.992 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: org.apache.commons.math3.optim.PointValuePair previous = current,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: Fixed PMD warnings.

09:58:30.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:30.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:30.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:32.701 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:32.702 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:32.703 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: final org.apache.commons.math3.analysis.UnivariateFunction lsf = new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.LineSearchFunction(point, searchDirection),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: current = new org.apache.commons.math3.optim.PointValuePair(point, objective),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:34.794 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:34.795 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:34.796 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double uB = findUpperBound(lsf, 0, initialStep),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:36.746 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:36.746 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:36.747 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double step = solver.solve(maxEval, lsf, 0, uB, 1.0E-15),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:38.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:38.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:38.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: point[i] += step * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:41.116 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:41.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:41.117 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if (goal == org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE) {
	for (int i = 0; i < n; ++i) {
		r[i] = -r[i];
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:43.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:43.646 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:43.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: switch (updateFormula) {
	case FLETCHER_REEVES :
		beta = delta / deltaOld;
		break;
	case POLAK_RIBIERE :
		double deltaMid = 0;
		for (int i = 0; i < r.length; ++i) {
			deltaMid += r[i] * steepestDescent[i];
		}
		beta = (delta - deltaMid) / deltaOld;
		break;
	default :

		throw new org.apache.commons.math3.exception.MathInternalError();},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:46.178 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:46.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:46.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if ((yA * yB) <= 0) {
	return b;
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:48.601 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:48.601 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:48.602 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: shiftedPoint[i] += x * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:51.014 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:51.014 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:51.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: dotProduct += gradient[i] * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:52.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:52.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:52.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return dotProduct,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).

09:58:55.303 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:55.303 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:55.304 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).

09:58:57.216 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:57.216 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:57.217 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: checkParameters(),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:58:59.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:58:59.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:58:59.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT),commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this(updateFormula, 
checker, 
new org.apache.commons.math3.analysis.solvers.BrentSolver(), 
new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed PMD warnings.
, ingredientB: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).

09:59:01.444 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:01.444 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:01.445 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((previous != null) && checker.converged(getIterations(), previous, current)) {

	return current;
},commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: Fixed PMD warnings.

09:59:03.448 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:03.449 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:03.450 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return current,commit: Fixed PMD warnings.
}, sim: -0.248897
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:05.333 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:05.333 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:05.334 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return dotProduct,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:07.271 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:07.271 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:07.272 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < gradient.length; ++i) {
	dotProduct += gradient[i] * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:09.327 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:09.327 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:09.328 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: dotProduct += gradient[i] * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:11.335 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:11.335 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:11.336 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: double dotProduct = 0,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:13.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:13.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:13.431 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double[] gradient = computeObjectiveGradient(shiftedPoint),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:15.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:15.372 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:15.373 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: for (int i = 0; i < shiftedPoint.length; ++i) {
	shiftedPoint[i] += x * searchDirection[i];
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:17.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:17.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:17.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: shiftedPoint[i] += x * searchDirection[i],commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:19.235 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:19.235 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:19.236 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: final double[] shiftedPoint = currentPoint.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:21.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:21.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:21.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: currentPoint = point.clone(),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:24.040 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:24.040 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:24.041 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if ((yA * yB) <= 0) {
	return b;
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:26.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:26.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:26.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: break,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:28.510 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:28.510 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:28.511 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: if (goal == org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE) {
	for (int i = 0; i < n; ++i) {
		r[i] = -r[i];
	}
},commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:30.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:30.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:30.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this.updateFormula = updateFormula,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:32.877 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:32.877 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:32.878 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: return initialStep,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:34.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:34.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:34.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: initialStep = step,commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
, ingredientB: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.

09:59:36.788 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
09:59:36.789 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
09:59:36.790 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingA: {code: if ((getLowerBound() != null) || 
(getUpperBound() != null)) {
	throw new org.apache.commons.math3.exception.MathUnsupportedOperationException(org.apache.commons.math3.exception.util.LocalizedFormats.CONSTRAINT);
},commit: MATH-933 Throw exception from optimizers that do not support simple bounds. Changing visibility of "parseOptimizationData" method to "protected" in order to allow the parent class to parse its data before the subclass (and thus providing more flexibility: the subclass is able check input consistency at the options parsing step).
}, sim: 0.189002
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: if (((getIterations() % n) == 0) || 
(beta < 0)) {

	searchDirection = steepestDescent.clone();
} else {

	for (int i = 0; i < n; ++i) {
		searchDirection[i] = steepestDescent[i] + (beta * searchDirection[i]);
	}
}, commit: MATH-949 Increment iteration counter. By default, the maximum number of iterations is "Integer.MAX_VALUE".
}, ingB: {code: this(updateFormula, 
checker, 
new org.apache.commons.math3.analysis.solvers.BrentSolver(), 
new org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizer.IdentityPreconditioner()),commit: MATH-874 Refactored of the contents of package "o.a.c.m.optimization" into the new "o.a.c.m.optim" and "o.a.c.m.fitting" packages. * All deprecated classes/fields/methods have been removed in the   replacement packages. * Simplified API: a single "optimize(OptimizationData... data)"   for all optimizer types. * Simplified class hierarchy, merged interfaces and abstract   classes, only base classes are generic. * The new classes do not use the "DerivativeStructure" type.
}, sim: -0.022429
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:00:44.081 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:00:44.081 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:00:44.082 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = vertices.length,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:00:46.535 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:00:46.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:00:46.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:00:48.872 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:00:48.872 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:00:48.873 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:00:50.812 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:00:50.812 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:00:50.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:00:52.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:00:52.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:00:52.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:00:55.013 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:00:55.013 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:00:55.015 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:00:56.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:00:56.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:00:56.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> edges = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:00:58.988 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:00:58.988 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:00:58.989 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:01.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:01.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:01.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:03.035 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:03.035 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:03.036 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:04.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:04.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:04.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:06.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:06.811 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:06.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:08.782 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:08.782 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:08.783 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:10.834 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:10.834 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:10.835 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:12.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:12.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:12.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:14.721 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:14.721 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:14.723 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:16.611 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:16.611 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:16.612 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:18.474 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:18.474 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:18.475 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:01:20.343 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:20.343 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:20.344 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:01:22.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:22.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:22.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:01:24.151 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:24.151 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:24.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:26.139 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:26.139 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:26.140 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line == null) {
	line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:28.140 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:28.140 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:28.141 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:01:30.127 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:30.128 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:30.128 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:32.108 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:32.109 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:32.110 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:34.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:34.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:34.004 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:35.865 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:35.865 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:35.866 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:01:37.740 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:37.740 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:37.741 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:39.604 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:39.604 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:39.605 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:41.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:41.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:41.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:43.295 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:43.295 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:43.297 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, tree, edges),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:01:45.137 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:45.137 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:45.138 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:47.052 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:47.052 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:47.053 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:48.899 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:48.899 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:48.900 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:50.887 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:50.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:50.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:01:52.738 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:52.738 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:52.739 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:54.691 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:54.691 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:54.692 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:56.555 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:56.555 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:56.556 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: vertex.bindWith(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:01:58.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:01:58.527 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:01:58.528 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:00.406 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:00.406 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:00.407 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:02.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:02.375 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:02.376 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:04.251 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:04.252 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:04.253 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:06.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:06.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:06.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:07.984 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:07.984 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:07.985 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = edges.get(index++),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:09.861 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:09.861 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:09.862 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:11.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:11.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:11.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:13.635 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:13.635 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:13.636 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:15.513 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:15.513 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:15.514 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (((vertex != start) && (vertex != end)) && 
(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
	vertex.bindWith(line);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:17.476 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:17.477 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:17.478 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted.setNode(node),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:19.355 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:19.355 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:19.356 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:21.218 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:21.219 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:21.219 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:23.227 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:23.227 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:23.228 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:02:25.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:25.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:25.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:02:26.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:26.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:26.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:02:28.919 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:28.919 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:28.921 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:30.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:30.810 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:30.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:02:32.659 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:32.659 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:32.660 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
	if (((vertex != start) && (vertex != end)) && 
	(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
		vertex.bindWith(line);
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:02:34.626 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:34.627 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:34.628 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: inserted = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:36.495 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:36.495 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:36.496 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:38.358 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:38.358 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:38.359 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:02:40.320 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:40.320 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:40.321 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {


	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex start = vArray[i];
	final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex end = vArray[(i + 1) % n];




	org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end);
	if (line == null) {
		line = new org.apache.commons.math3.geometry.euclidean.twod.Line(start.getLocation(), end.getLocation());
	}


	edges.add(new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, end, line));


	for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex vertex : vArray) {
		if (((vertex != start) && (vertex != end)) && 
		(org.apache.commons.math3.util.FastMath.abs(line.getOffset(vertex.getLocation())) <= hyperplaneThickness)) {
			vertex.bindWith(line);
		}
	}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:02:42.187 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:42.187 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:42.188 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (node.insertCut(inserted.getLine())) {
	inserted.setNode(node);
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:44.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:44.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:44.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:45.938 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:45.938 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:45.939 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:47.811 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:47.811 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:47.812 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:49.690 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:49.690 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:49.691 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:51.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:51.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:51.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:53.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:53.423 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:53.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:55.292 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:55.292 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:55.293 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:02:57.157 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:57.157 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:57.158 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:02:59.049 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:02:59.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:02:59.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:00.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:00.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:00.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:02.801 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:02.802 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:02.802 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:04.677 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:04.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:04.678 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:06.543 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:06.543 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:06.544 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:08.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:08.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:08.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:10.363 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:10.363 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:10.364 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:12.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:12.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:12.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:14.115 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:14.116 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:14.116 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:16.026 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:16.026 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:16.027 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:17.944 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:17.944 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:17.945 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:19.810 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:19.811 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:19.811 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:21.655 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:21.655 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:21.656 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:23.648 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:23.648 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:23.649 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:25.509 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:25.509 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:25.510 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:27.353 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:27.353 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:27.354 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:29.237 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:29.237 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:29.238 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:31.176 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:31.176 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:31.177 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:33.038 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:33.038 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:33.039 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:34.933 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:34.933 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:34.934 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:36.800 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:36.800 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:36.801 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:38.777 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:38.777 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:38.778 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:40.660 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:40.660 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:40.661 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:42.528 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:42.528 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:42.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:44.417 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:44.417 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:44.418 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:46.302 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:46.302 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:46.303 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:48.190 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:48.190 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:48.191 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:50.083 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:50.083 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:50.084 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:51.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:51.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:51.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:53.834 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:53.834 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:53.835 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:03:55.714 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:55.714 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:55.715 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:57.658 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:57.658 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:57.659 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:03:59.529 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:03:59.529 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:03:59.529 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:01.388 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:01.388 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:01.389 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:04:03.319 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:03.319 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:03.320 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:05.277 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:05.277 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:05.278 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:07.145 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:07.146 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:07.146 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:09.001 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:09.001 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:09.002 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:10.900 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:10.900 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:10.901 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:04:12.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:12.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:12.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:14.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:14.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:14.701 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:16.550 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:16.550 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:16.551 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:18.511 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:18.512 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:18.513 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:04:20.374 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:20.374 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:20.375 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:22.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:22.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:22.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:24.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:24.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:24.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:26.090 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:26.090 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:26.091 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:04:27.942 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:27.942 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:27.943 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:29.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:29.806 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:29.807 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:31.681 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:31.681 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:31.682 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:33.589 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:33.589 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:33.590 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:04:35.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:35.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:35.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:37.361 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:37.361 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:37.362 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:39.246 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:39.246 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:39.247 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:41.102 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:41.103 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:41.103 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:04:43.004 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:43.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:43.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:04:44.884 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:44.884 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:44.885 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:04:46.742 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:46.742 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:46.743 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: switch (startSide) {
	case PLUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getOutgoing());
			plusList.add(splitPoint.getIncoming());
		} else {
			plusList.add(edge);
		}
		break;
	case MINUS :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

			final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
			minusList.add(splitPoint.getIncoming());
			plusList.add(splitPoint.getOutgoing());
		} else {
			minusList.add(edge);
		}
		break;
	default :
		if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
			plusList.add(edge);
		} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
			minusList.add(edge);
		}
		break;},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:04:48.600 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:48.600 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:48.601 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:04:50.460 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:50.460 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:50.461 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:52.322 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:52.322 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:52.323 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:54.203 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:54.203 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:54.205 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:04:56.078 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:56.078 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:56.079 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:57.925 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:57.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:57.926 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:04:59.791 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:04:59.791 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:04:59.792 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:01.670 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:01.670 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:01.671 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:05:03.526 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:03.526 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:03.527 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:05.454 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:05.454 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:05.455 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:05:07.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:07.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:07.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:05:09.196 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:09.196 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:09.197 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge edge : edges) {
	if (edge != inserted) {
		final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
		final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
		org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
		org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
		switch (startSide) {
			case PLUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getOutgoing());
					plusList.add(splitPoint.getIncoming());
				} else {
					plusList.add(edge);
				}
				break;
			case MINUS :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

					final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
					minusList.add(splitPoint.getIncoming());
					plusList.add(splitPoint.getOutgoing());
				} else {
					minusList.add(edge);
				}
				break;
			default :
				if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
					plusList.add(edge);
				} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
					minusList.add(edge);
				}
				break;}

	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:05:11.050 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:11.050 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:11.051 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:05:13.009 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:13.009 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:13.010 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:14.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:14.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:14.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:16.779 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:16.779 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:16.780 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:05:18.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:18.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:18.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:20.646 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:20.647 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:20.648 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:22.523 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:22.523 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:22.524 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:24.423 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:24.423 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:24.424 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!plusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getPlus(), plusList);
} else {
	node.getPlus().setAttribute(java.lang.Boolean.FALSE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:05:26.426 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:26.426 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:26.426 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:28.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:28.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:28.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:30.247 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:30.247 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:30.248 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:32.175 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:32.175 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:32.176 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:05:34.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:34.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:34.113 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:36.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:36.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:36.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:37.854 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:37.854 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:37.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: minusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:39.719 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:39.719 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:39.720 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:05:41.574 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:41.575 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:41.575 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:43.445 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:43.445 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:43.446 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.location = location,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:45.281 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:45.281 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:45.282 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:47.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:47.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:47.144 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
	minusList.add(edge);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:48.982 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:48.982 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:48.983 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:05:50.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:50.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:50.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:52.680 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:52.680 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:52.681 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:54.531 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:54.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:54.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:56.433 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:56.433 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:56.434 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:05:58.297 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:05:58.297 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:05:58.298 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:00.152 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:00.152 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:00.152 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:02.023 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:02.023 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:02.024 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:03.907 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:03.907 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:03.908 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:05.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:05.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:05.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (inserted.getNode() == null) {
	if (node.insertCut(inserted.getLine())) {
		inserted.setNode(node);
	} else {
		inserted = null;
	}
} else {
	inserted = null;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:07.699 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:07.699 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:07.700 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:09.582 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:09.582 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:09.583 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:11.482 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:11.482 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:11.483 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (inserted == null) {


	final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent();
	if ((parent == null) || (node == parent.getMinus())) {
		node.setAttribute(java.lang.Boolean.TRUE);
	} else {
		node.setAttribute(java.lang.Boolean.FALSE);
	}
	return;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: while ((inserted == null) && (index < edges.size())) {
	inserted = edges.get(index++);
	if (inserted.getNode() == null) {
		if (node.insertCut(inserted.getLine())) {
			inserted.setNode(node);
		} else {
			inserted = null;
		}
	} else {
		inserted = null;
	}
} ,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:13.378 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:13.378 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:13.379 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:15.279 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:15.279 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:15.280 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getPlus().setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:06:17.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:17.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:17.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:19.061 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:19.061 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:19.062 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.setAttribute(java.lang.Boolean.FALSE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:20.950 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:20.950 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:20.951 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> plusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:22.885 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:22.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:22.886 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final java.util.List<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge> minusList = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:24.747 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:24.747 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:24.748 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:26.625 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:26.625 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:26.626 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:28.596 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:28.596 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:28.597 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:30.467 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:30.467 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:30.468 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:32.307 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:32.307 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:32.308 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:34.179 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:34.179 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:34.180 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: minusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:06:36.130 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:36.130 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:36.131 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getIncoming()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:06:38.002 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:38.002 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:38.003 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(edge),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:06:39.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:39.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:39.875 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: plusList.add(splitPoint.getOutgoing()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:06:41.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:41.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:41.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:06:43.751 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:43.751 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:43.752 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:06:45.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:45.613 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:45.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:47.488 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:47.488 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:47.489 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:49.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:49.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:49.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:51.274 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:51.274 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:51.275 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:53.167 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:53.167 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:53.168 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:55.033 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:55.034 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:55.034 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:06:56.886 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:56.886 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:56.887 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:06:58.797 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:06:58.797 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:06:58.798 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:00.665 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:00.666 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:00.667 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:02.536 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:02.536 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:02.537 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:04.429 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:04.429 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:04.430 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:06.278 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:06.278 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:06.279 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:08.141 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:08.141 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:08.142 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:10.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:10.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:10.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:11.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:11.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:11.882 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:13.756 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:13.756 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:13.757 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:15.602 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:15.603 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:15.604 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:17.465 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:17.465 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:17.466 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:19.316 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:19.316 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:19.318 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:21.162 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:21.162 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:21.163 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:23.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:23.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:23.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:24.966 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:24.966 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:24.967 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:26.841 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:26.841 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:26.843 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:28.825 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:28.825 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:28.826 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:30.678 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:30.678 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:30.679 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:32.532 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:32.532 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:32.533 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:34.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:34.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:34.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:36.401 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:36.401 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:36.402 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:38.260 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:38.260 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:38.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:40.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:40.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:40.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:42.080 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:42.080 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:42.081 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:44.000 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:44.000 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:44.001 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:45.881 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:45.881 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:45.882 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:47.793 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:47.794 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:47.795 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:49.826 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:49.826 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:49.827 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:52.269 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:52.269 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:52.270 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:54.217 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:54.217 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:54.218 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:07:56.547 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:56.547 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:56.548 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:07:58.519 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:07:58.519 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:07:58.520 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:00.637 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:00.637 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:00.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:02.725 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:02.725 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:02.726 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:08:04.587 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:04.587 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:04.588 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:06.642 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:06.642 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:06.643 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:08.645 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:08.645 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:08.646 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:10.799 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:10.799 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:10.800 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:12.698 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:12.698 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:12.699 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:08:15.131 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:15.131 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:15.132 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:17.537 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:17.537 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:17.538 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:19.752 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:19.752 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:19.753 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:21.875 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:21.876 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:21.877 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:08:24.160 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:24.160 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:24.161 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:26.293 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:26.293 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:26.294 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:28.673 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:28.673 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:28.674 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:30.716 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:30.716 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:30.717 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:08:33.143 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:33.143 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:33.145 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:35.498 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:35.499 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:35.499 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:37.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:37.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:37.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:39.806 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:39.807 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:39.808 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:08:42.189 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:42.189 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:42.190 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:44.114 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:44.114 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:44.115 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:46.059 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:46.059 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:46.060 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:48.195 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:48.195 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:48.196 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:08:50.325 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:50.325 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:50.326 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:52.206 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:52.206 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:52.207 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:54.073 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:54.073 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:54.074 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: start.setOutgoing(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:56.011 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:56.011 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:56.012 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:08:58.006 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:58.006 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:58.007 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:08:59.960 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:08:59.961 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:08:59.962 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:02.003 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:02.004 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:02.005 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:03.941 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:03.941 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:03.942 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:09:05.840 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:05.840 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:05.841 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:07.700 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:07.700 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:07.701 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:09.561 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:09.562 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:09.563 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:11.506 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:11.506 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:11.507 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:09:13.490 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:13.490 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:13.491 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:15.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:15.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:15.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.start = start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:17.486 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:17.486 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:17.487 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return start,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:19.466 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:19.466 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:19.467 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:09:21.382 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:21.382 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:21.383 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:23.280 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:23.280 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:23.281 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:25.144 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:25.144 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:25.145 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:27.027 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:27.027 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:27.028 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:28.896 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:28.896 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:28.897 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:09:30.803 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:30.804 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:30.804 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:32.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:32.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:32.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:34.701 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:34.701 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:34.702 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:36.622 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:36.622 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:36.623 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:38.617 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:38.617 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:38.618 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitVertex = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(line.intersection(splitLine)),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:09:40.524 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:40.524 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:40.525 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:42.594 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:42.594 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:42.595 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:44.464 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:44.464 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:44.465 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:46.341 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:46.341 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:46.342 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:48.255 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:48.255 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:48.256 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: splitVertex.bindWith(splitLine),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:09:50.165 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:50.166 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:50.166 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:52.025 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:52.025 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:52.026 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:53.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:53.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:53.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.line = line,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:55.754 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:55.754 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:55.755 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:09:57.613 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:57.614 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:57.614 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:09:59.494 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:09:59.494 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:09:59.495 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:01.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:01.375 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:01.376 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:03.234 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:03.234 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:03.235 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:05.100 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:05.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:05.101 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:06.956 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:06.956 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:06.957 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:10:08.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:08.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:08.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:10.739 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:10.739 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:10.740 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

10:10:12.638 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:12.638 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:12.638 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D end = (java.lang.Double.isInfinite(i.getSup())) ? 
null : ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(i.getSup())))),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D start = (java.lang.Double.isInfinite(i.getInf())) ? 
null : ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(i.getInf())))),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:14.606 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:14.606 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:14.607 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double deltaY = end.getY() - start.getY(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaX = end.getX() - start.getX(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:16.468 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:16.469 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:16.469 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double r = (((p.getX() - start.getX()) * deltaX) + ((p.getY() - start.getY()) * deltaY)) / 
((deltaX * deltaX) + (deltaY * deltaY)),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaY = end.getY() - start.getY(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:18.362 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:18.362 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:18.363 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double dist1 = getStart().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double r = (((p.getX() - start.getX()) * deltaX) + ((p.getY() - start.getY()) * deltaY)) / 
((deltaX * deltaX) + (deltaY * deltaY)),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:20.437 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:20.437 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:20.438 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double dist2 = getEnd().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double dist1 = getStart().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:22.309 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:22.309 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:22.310 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return org.apache.commons.math3.util.FastMath.min(dist1, dist2),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double dist2 = getEnd().distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:24.272 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:24.272 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:24.273 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double px = start.getX() + (r * deltaX),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return org.apache.commons.math3.util.FastMath.min(dist1, dist2),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:26.205 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:26.205 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:26.206 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final double py = start.getY() + (r * deltaY),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double px = start.getX() + (r * deltaX),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:28.074 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:28.074 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:28.075 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double py = start.getY() + (r * deltaY),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:29.977 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:29.977 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:29.978 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return interPt.distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Added distance to point to 2D Line and Segment.
, ingredientB: Added distance to point to 2D Line and Segment.

10:10:31.822 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:31.823 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:31.824 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if ((r < 0) || (r > 1)) {
	final double dist1 = getStart().distance(p);
	final double dist2 = getEnd().distance(p);

	return org.apache.commons.math3.util.FastMath.min(dist1, dist2);
} else 
{

	final double px = start.getX() + (r * deltaX);
	final double py = start.getY() + (r * deltaY);

	final org.apache.commons.math3.geometry.euclidean.twod.Vector2D interPt = new org.apache.commons.math3.geometry.euclidean.twod.Vector2D(px, py);
	return interPt.distance(p);
},commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return interPt.distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Fixed naming inconsistencies between Interval and IntervalsSet classes.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

10:10:33.676 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:33.676 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:33.677 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D end = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getSup())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D start = line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(interval.getInf())),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:87) - ingredientAもingredientBもmodificationPointと同じコミットメッセージ
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:35.552 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:35.552 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:35.553 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:37.402 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:37.402 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:37.403 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[] vArray = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex[n],commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:39.253 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:39.253 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:39.254 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: for (int i = 0; i < n; ++i) {
	vArray[i] = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex(vertices[i]);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:41.101 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:41.101 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:41.102 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: org.apache.commons.math3.geometry.euclidean.twod.Line line = start.sharedLineWith(end),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:43.007 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:43.007 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:43.008 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> tree = new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:44.855 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:44.855 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:44.855 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:46.728 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:46.728 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:46.729 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (!minusList.isEmpty()) {
	org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.insertEdges(hyperplaneThickness, node.getMinus(), minusList);
} else {
	node.getMinus().setAttribute(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:10:48.588 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:48.588 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:48.589 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D> parent = node.getParent(),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:10:50.905 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:50.905 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:50.906 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.lines = new java.util.ArrayList<org.apache.commons.math3.geometry.euclidean.twod.Line>(),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:10:53.385 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:53.385 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:53.386 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:10:55.888 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:55.888 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:55.889 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: lines.add(line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:10:57.892 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:57.892 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:57.893 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:10:59.985 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:10:59.985 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:10:59.986 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:02.169 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:02.169 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:02.170 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return line1,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:04.117 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:04.117 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:04.118 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (line1 == line2) {
	return line1;
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:06.300 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:06.300 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:06.301 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
	if (line1 == line2) {
		return line1;
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:08.748 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:08.749 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:08.749 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: for (final org.apache.commons.math3.geometry.euclidean.twod.Line line1 : lines) {
	for (final org.apache.commons.math3.geometry.euclidean.twod.Line line2 : vertex.lines) {
		if (line1 == line2) {
			return line1;
		}
	}
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:10.837 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:10.837 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:10.838 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.incoming = incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:13.201 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:13.201 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:13.202 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: bindWith(incoming.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:15.138 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:15.138 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:15.139 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return incoming,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:17.254 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:17.254 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:17.255 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: this.outgoing = outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:19.373 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:19.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:19.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: bindWith(outgoing.getLine()),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:21.262 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:21.262 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:21.263 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return outgoing,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:23.259 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:23.259 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:23.261 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.end = end,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:25.275 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:25.275 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:25.276 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: end.setIncoming(this),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:27.375 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:27.375 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:27.376 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge startHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(start, splitVertex, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:29.245 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:29.245 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:29.246 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:31.120 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:31.120 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:31.121 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:11:32.993 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:32.993 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:32.994 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final int n = vertices.length,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:34.906 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:34.906 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:34.907 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: if (n == 0) {

	return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE);
},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:36.882 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:36.882 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:36.883 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:38.874 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:38.874 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:38.874 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.getMinus().setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:40.860 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:40.860 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:40.861 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if ((parent == null) || (node == parent.getMinus())) {
	node.setAttribute(java.lang.Boolean.TRUE);
} else {
	node.setAttribute(java.lang.Boolean.FALSE);
},commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:42.831 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:42.831 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:42.832 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: int index = 0,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:44.741 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:44.741 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:44.742 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:46.610 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:46.610 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:46.611 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge endHalf = new org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Edge(splitVertex, end, line),commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Finalized fix for MATH-880.

10:11:48.492 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:48.493 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:48.494 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:50.372 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:50.373 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:50.374 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:11:52.256 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:52.256 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:52.257 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: if (edge != inserted) {
	final double startOffset = inserted.getLine().getOffset(edge.getStart().getLocation());
	final double endOffset = inserted.getLine().getOffset(edge.getEnd().getLocation());
	org.apache.commons.math3.geometry.partitioning.Side startSide = (org.apache.commons.math3.util.FastMath.abs(startOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : startOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	org.apache.commons.math3.geometry.partitioning.Side endSide = (org.apache.commons.math3.util.FastMath.abs(endOffset) <= hyperplaneThickness) ? 
	org.apache.commons.math3.geometry.partitioning.Side.HYPER : endOffset < 0 ? org.apache.commons.math3.geometry.partitioning.Side.MINUS : org.apache.commons.math3.geometry.partitioning.Side.PLUS;
	switch (startSide) {
		case PLUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getOutgoing());
				plusList.add(splitPoint.getIncoming());
			} else {
				plusList.add(edge);
			}
			break;
		case MINUS :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {

				final org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet.Vertex splitPoint = edge.split(inserted.getLine());
				minusList.add(splitPoint.getIncoming());
				plusList.add(splitPoint.getOutgoing());
			} else {
				minusList.add(edge);
			}
			break;
		default :
			if (endSide == org.apache.commons.math3.geometry.partitioning.Side.PLUS) {
				plusList.add(edge);
			} else if (endSide == org.apache.commons.math3.geometry.partitioning.Side.MINUS) {
				minusList.add(edge);
			}
			break;}

},commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:11:54.202 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:54.202 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:54.203 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: this.node = null,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:11:56.112 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:56.112 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:56.112 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: startHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:11:58.105 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:11:58.105 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:11:58.106 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: node.setAttribute(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:12:00.088 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:00.088 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:00.089 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return tree,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Improved polygons creation with a numerically more robust constructor.

10:12:02.036 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:02.036 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:02.037 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return new org.apache.commons.math3.geometry.partitioning.BSPTree<org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D>(java.lang.Boolean.TRUE),commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Finalized fix for MATH-880.
, ingredientB: Finalized fix for MATH-880.

10:12:03.926 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:03.926 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:03.927 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return splitVertex,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: endHalf.node = node,commit: Finalized fix for MATH-880.
}, sim: 0.217651
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

10:12:05.972 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:05.972 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:05.973 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D start = (java.lang.Double.isInfinite(i.getInf())) ? 
null : ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(i.getInf())))),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Added distance to point to 2D Line and Segment.

10:12:07.857 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:07.857 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:07.858 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: return interPt.distance(p),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Added distance to point to 2D Line and Segment.

10:12:09.704 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:09.704 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:09.705 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final double deltaY = end.getY() - start.getY(),commit: Added distance to point to 2D Line and Segment.
}, sim: -0.133868
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:101) - modif != ingA & modif = ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:116) - ingredientA: Improved polygons creation with a numerically more robust constructor.
, ingredientB: Fixed naming inconsistencies between Interval and IntervalsSet classes.

10:12:11.569 [main] INFO  o.d.m.s.SequenceVectors - Building learning algorithms:
10:12:11.569 [main] INFO  o.d.m.s.SequenceVectors -           building SequenceLearningAlgorithm: [PV-DBOW]
10:12:11.570 [main] INFO  o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:123) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingA: {code: return location,commit: Improved polygons creation with a numerically more robust constructor.
}, sim: -0.089077
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:129) - modif: {code: double x = segment.getLine().toSubSpace(segment.getEnd()).getX(), commit: MATH-444 Base package name change: "o.a.c.math" -> "o.a.c.math3"
}, ingB: {code: final org.apache.commons.math3.geometry.euclidean.twod.Vector2D end = (java.lang.Double.isInfinite(i.getSup())) ? 
null : ((org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (line.toSpace(new org.apache.commons.math3.geometry.euclidean.oned.Vector1D(i.getSup())))),commit: Fixed naming inconsistencies between Interval and IntervalsSet classes.
}, sim: 0.022053
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[INFO ] fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy$1.compare(PurposeBasedSearchStrategy.java:93) - modif = ingA & modif != ingB
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 6
java.lang.IllegalArgumentException: Comparison method violates its general contract!
java.lang.IllegalArgumentException: Comparison method violates its general contract!
	at java.util.TimSort.mergeLo(TimSort.java:777)
	at java.util.TimSort.mergeAt(TimSort.java:514)
	at java.util.TimSort.mergeCollapse(TimSort.java:441)
	at java.util.TimSort.sort(TimSort.java:245)
	at java.util.Arrays.sort(Arrays.java:1512)
	at java.util.ArrayList.sort(ArrayList.java:1454)
	at java.util.Collections.sort(Collections.java:175)
	at fr.inria.astor.approaches.purpose_simularity.PurposeBasedSearchStrategy.getFixIngredient(PurposeBasedSearchStrategy.java:72)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 2638.383
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 6
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 4732.495


Node: 487f1ade4b49



Date: Thu Nov 21 10:12:12 EST 2019

cd /script/jGenProg_Defects4J_Math_2;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-2 \
	-failing org.apache.commons.math3.distribution.HypergeometricDistributionTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:purpose \
	-dependencies /script/jGenProg_Defects4J_Math_2/target/classes/:/script/jGenProg_Defects4J_Math_2/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

