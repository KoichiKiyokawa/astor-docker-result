Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 03:28:33,635 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 03:28:33,641 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 03:28:33,642 main:382 - The compliance of the JVM is:  7
[INFO] 03:28:33,645 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-15  -failing  org.apache.commons.math3.util.FastMathTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_15/target/classes/:/script/jGenProg_Defects4J_Math_15/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 03:28:33,651 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_15/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_15/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:104) - mode is Leven
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 696
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_15/./output_astor/AstorMain-Math-15//bin//default from 696 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_15/./output_astor/AstorMain-Math-15//bin//default, /script/jGenProg_Defects4J_Math_15/target/classes/, /script/jGenProg_Defects4J_Math_15/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition3
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSumPrecondition4
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaSum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSumPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSumPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.GammaTest#testLogGammaMinusLogGammaSum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testVectorFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testGaussian
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testStepSizeUnstability
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testSeveralFreeParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testMatrixFunction
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.FiniteDifferencesDifferentiatorTest#testLinear
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorr
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorrPrecondition1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.special.BetaTest#testBcorrPrecondition2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4276, fails: 55, GZoltar suspicious 29408, with positive susp 2644
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4276
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 880 with susp > 0.1, we consider: 880
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 5810120 milliseconds (5810 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_15/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_15/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_15/target/classes/, /script/jGenProg_Defects4J_Math_15/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 628
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 880
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.20225995873897262]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.1502349257508403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.1502349257508403]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=62, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=63, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=65, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=66, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=68, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=71, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=72, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=90, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=95, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=99, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=100, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=134, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=plusFound()Z, lineNumber=140, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=minusFound()Z, lineNumber=147, susp=0.13762047064079508]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 880,  273
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 273
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 273, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.validation.junit.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:179) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.junit.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:181) - Killed the Process that runs JUnit test cases 560
[ERROR] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:745) - Initial run of test suite fails
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.7976931348623157E308
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_15/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 5810120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.util.FastMathTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-15
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_15/target/classes/:/script/jGenProg_Defects4J_Math_15/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#binomialCoefficient
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcdPositive
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#gcd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#mulAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#subAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#stirlingS2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ArithmeticUtils#addAndCheck
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#setRoundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#setRoundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#setScale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BigReal#setScale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNextCharacter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CompositeFormat#parseNumber
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ContinuedFraction#evaluate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Decimal64
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#doubleHighPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#doubleHighPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cosh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asinh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atanh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#exp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#expm1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#log
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#pow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polySine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polyCosine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polyCosine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polyCosine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polyCosine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polyCosine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#polyCosine
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sinQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tanQ
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#reducePayneHanek
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#sin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#tan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#atan2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#asin
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#acos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#cbrt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#toRadians
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#scalb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#floor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ceil
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMath#ceil
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpIntTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ExpFracTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: lnMant
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: CodyWaite
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#buildSinCosTables
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowCos
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#split
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#resplit
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitAdd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitAdd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitAdd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitAdd
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#splitReciprocal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#quadMult
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#expint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: FastMathCalc#slowLog
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#resetCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Incrementor#resetCount
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationEvent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationEvent
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: IterationManager
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#distanceInf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#distanceInf
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#isMonotonic
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#checkOrder
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#safeNorm
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#sortInPlace
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#linearCombination
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MathArrays#normalizeArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MultidimensionalCounter#getCounts
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToDoubleHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#advance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#advance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#advance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Iterator#advance
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#get
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#doRemove
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#put
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: OpenIntToFieldHashMap#growTable
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Pair#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: Precision#roundUnscaled
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElementRolling
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#addElementRolling
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#substituteMostRecentElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#substituteMostRecentElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#expand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#expand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#expand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#expand
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setContractionCriteria
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setContractionCriteria
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setElement
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#setNumElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#copy
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#equals
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: ResizableDoubleArray#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#transform
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TransformerMap#hashCode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - blbu = bl:blbu = bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d):result = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(result / (j / d), i / d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - remA = a + b:remA = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = (result * i) / j:result = (result * i) / j
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lna = tmp2:lna = tmp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - tempA = temp:tempA = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - cosa = sina:cosa = sina
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = shpiB & 0xffffffffL:d = shpiB & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - x[0] = y[0]:x[0] = y[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnza = aa + ab:lnza = aa + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = (((tmp1 + tmp2) - tmp1) * org.apache.commons.math3.util.FastMath.HEX_40000000) * org.apache.commons.math3.util.FastMath.HEX_40000000:ya = (((tmp1 + tmp2) - tmp1) * org.apache.commons.math3.util.FastMath.HEX_40000000) * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - sinb = tmp:sinb = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.iterations = iterations:this.iterations = iterations
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = epsA * denom:ya = epsA * denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temps[1] = -temps[1]:temps[1] = -temps[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dest.startIndex = source.startIndex:dest.startIndex = source.startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - p = (p * x2) + (-1.9841269659586505E-4):p = (p * x2) + (-1.9841269659586505E-4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bitsum = (prodB & 0x8000000000000000L) != 0:bitsum = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = -((temp - ya) - yb):yb = -((temp - ya) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bc = b * c:bc = b * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + (zb * baseA):temp = ya + (zb * baseA)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + (zb * baseB):temp = ya + (zb * baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - rb = -((temp - ra) - rb):rb = -((temp - ra) - rb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ys[0] = COSINE_TABLE_A[i / 2]:ys[0] = COSINE_TABLE_A[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]:shpiA = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - referenceCount = count:this.referenceCount = this.count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[1] = 0.0:result[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - zb = zb * epsilon:zb = zb * epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xl = xl & org.apache.commons.math3.util.FastMath.MASK_30BITS:xl = xl & org.apache.commons.math3.util.FastMath.MASK_30BITS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - est = (est * mant) + 0.0875862700108075:est = (est * mant) + 0.0875862700108075
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dest.contractionCriterion = source.contractionCriterion:dest.contractionCriterion = source.contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - negative = true:negative = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = ya + yb:result = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - sign = -sign:sign = -sign
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = java.lang.Double.valueOf(value):ret = java.lang.Double.valueOf(value)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yList[j][i] = yValues[j]:yList[j][i] = yValues[j]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.contractionCriterion = contractionCriterion:this.contractionCriterion = contractionCriterion
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - numElements = 0:this.numElements = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + ra:temp = ya + ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - NEGATIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NEGATIVE_INFINITY):org.apache.commons.math3.util.Decimal64.NEGATIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NEGATIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - next = -1:this.next = -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hashData[3] = java.util.Arrays.hashCode(internalArray):hashData[3] = java.util.Arrays.hashCode(this.internalArray)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - recipb = -recipb:recipb = -recipb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + rb:temp = ya + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = (z * epsilon) + 0.1666666505023083:z = (z * epsilon) + 0.1666666505023083
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = (z * lnb) + 1.0:z = (z * lnb) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - prod2B = prod2B + (bc << 32):prod2B = prod2B + (bc << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - x[1] = y[1]:x[1] = y[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - values = newValues:this.values = newValues
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - split[0] = ((d + a) - d) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000:split[0] = ((d + a) - d) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrecOut[0] = ya:hiPrecOut[0] = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - index = j & mask:index = j & this.mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[1] = result[1] - ((tmp - result[0]) - zs[0]):result[1] = result[1] - ((tmp - result[0]) - zs[0])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = 1.0 / d:d = 1.0 / d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - in[0] = in[1]:in[0] = in[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - y = org.apache.commons.math3.util.FastMath.sqrt(za):y = org.apache.commons.math3.util.FastMath.sqrt(za)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xs[1] = as[1]:xs[1] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mantissa = mantissa & 0xfffffffffffffL:mantissa = mantissa & 0xfffffffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - resultb = -((result - za) - zb):resultb = -((result - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]:intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - e = -e:e = -e
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - counter[i] = 0:this.counter[i] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - count = source.count:this.count = source.count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2)):absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_5) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = (z * lnb) + (1.0 / 6.0):z = (z * lnb) + (1.0 / 6.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] & 0xffffffffL:d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[1] = 0.0:hiPrec[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = recip * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = recip * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - e = e >> 1:e = e >> 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - stirlingS2[i] = new long[i + 1]:stirlingS2[i] = new long[i + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]:intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnza = -0.16624882440418567:lnza = -0.16624882440418567
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = prodB & 0xffffffffL:b = prodB & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - key = k:this.key = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mask = source.mask:this.mask = source.mask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xa = a + b:xa = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ys[1] = as[1]:ys[1] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnb = -((lna - aa) - ab):lnb = -((lna - aa) - ab)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - za = temp:za = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - quadrant = ((int) (reduceResults[0])) & 3:quadrant = ((int) (reduceResults[0])) & 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = r * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = r * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - uniCounterOffset[i] = count:this.uniCounterOffset[i] = count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(perturb, j):j = org.apache.commons.math3.util.OpenIntToFieldHashMap.probe(perturb, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - y[0] = a[0]:y[0] = a[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations, callBack):this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations, callBack)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL:this.states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * org.apache.commons.math3.util.FastMath.F_1_9)))))))):absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * org.apache.commons.math3.util.FastMath.F_1_9))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xs[1] = SINE_TABLE_B[i]:xs[1] = SINE_TABLE_B[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - facts[1] = -facts[1]:facts[1] = -facts[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - NAN = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NaN):org.apache.commons.math3.util.Decimal64.NAN = new org.apache.commons.math3.util.Decimal64(java.lang.Double.NaN)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - missingEntries = source.missingEntries:this.missingEntries = source.missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = a + (org.apache.commons.math3.util.FastMath.LN_2_B * exp):c = a + (org.apache.commons.math3.util.FastMath.LN_2_B * exp)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = da + yb:temp = da + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = (result / (j / d)) * (i / d):result = (result / (j / d)) * (i / d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = ((int) (al)):b = ((int) (al))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAsinh = org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.FastMath.sqrt((a * a) + 1) + a):absAsinh = org.apache.commons.math3.util.FastMath.log(org.apache.commons.math3.util.FastMath.sqrt((a * a) + 1) + a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - intVal = ((int) (x)):intVal = ((int) (x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(b, a, pattern):ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(b, a, pattern)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - SINE_TABLE_A[i] = result[0]:SINE_TABLE_A[i] = result[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xa = -xa:xa = -xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - y[1] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][1]:y[1] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - useLong = true:useLong = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = java.lang.Math.abs(delta):a = java.lang.Math.abs(delta)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - POSITIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.POSITIVE_INFINITY):org.apache.commons.math3.util.Decimal64.POSITIVE_INFINITY = new org.apache.commons.math3.util.Decimal64(java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - intVal = ((int) (-x)):intVal = ((int) (-x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = y - ya:yb = y - ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - internalArray[startIndex + (numElements - 1)] = value:this.internalArray[this.startIndex + (this.numElements - 1)] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - internalArray[startIndex + index] = value:this.internalArray[this.startIndex + index] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - p = (p * x2) * x:p = (p * x2) * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[0] = 0.0:hiPrec[0] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = (z * epsilon) + (-3.940510424527919E-20):z = (z * epsilon) + (-3.940510424527919E-20)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(perturb, j):j = org.apache.commons.math3.util.OpenIntToDoubleHashMap.probe(perturb, j)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - numElements = i:this.numElements = i
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bd = b * d:bd = b * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xa = x:xa = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_13) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2)):absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_13) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][]:org.apache.commons.math3.util.FastMath.lnMant.LN_MANT = new double[org.apache.commons.math3.util.FastMath.LN_MANT_LEN][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.value = x:this.value = x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = denom * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = denom * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnza = (lnza * epsilon) + 0.3333333333332802:lnza = (lnza * epsilon) + 0.3333333333332802
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = epsB * denom:yb = epsB * denom
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = (z * lnb) + (1.0 / 24.0):z = (z * lnb) + (1.0 / 24.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - shpiA = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift)):shpiA = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] >>> (64 - shift))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y):ra = org.apache.commons.math3.util.FastMath.copySign(0.0, y)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ra + rb:temp = ra + rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA:result = (((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB) + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = a + lnzb:c = a + lnzb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = ya * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - SINE_TABLE_B[i] = result[1] * 2.0:SINE_TABLE_B[i] = result[1] * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - numElements = index + 1:this.numElements = index + 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xbadj = -xbadj:xbadj = -xbadj
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = new java.math.BigDecimal(val, mc):this.d = new java.math.BigDecimal(val, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = java.lang.Math.min(a, b):b = java.lang.Math.min(a, b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = (yb * epsA2) * epsA:yb = (yb * epsA2) * epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - za = za * ya:za = za * ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hashData[5] = startIndex:hashData[5] = this.startIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bita = (prodB & 0x8000000000000000L) != 0:bita = (prodB & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = result * x:result = result * x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - za = (denom + temp) - temp:za = (denom + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - shpiB = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift)):shpiB = (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1] << shift) | (org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 2] >>> (64 - shift))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - facts[0] = -facts[0]:facts[0] = -facts[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * org.apache.commons.math3.util.FastMath.F_1_13)))))))))))):absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * org.apache.commons.math3.util.FastMath.F_1_13))))))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]:intPartB = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - previous = val[index]:previous = val[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA():org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.size = org.apache.commons.math3.util.MathArrays.copyOf(size):this.size = org.apache.commons.math3.util.MathArrays.copyOf(size)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ad = a * d:ad = a * d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - previous = val[i]:previous = val[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bitsum = (prod2B & 0x8000000000000000L) != 0:bitsum = (prod2B & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - values = buildArray(length):this.values = buildArray(length)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ac = ac + ((bc + ad) >>> 32):ac = ac + ((bc + ad) >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = tempA * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = tempA * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB):b = (((b + sintB) + (costB * sinEpsA)) + (sintB * cosEpsB)) + (costB * sinEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3))):norm = java.lang.Math.sqrt(x3max * ((s2 / x3max) + (x3max * s3)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - value = trans.transform(o):value = trans.transform(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations):this.iterations = new org.apache.commons.math3.util.Incrementor(maxIterations)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - t = costA * sinEpsA:t = costA * sinEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - as[0] = SINE_TABLE_A[(i / 2) + 1]:as[0] = SINE_TABLE_A[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - t = costA * cosEpsA:t = costA * cosEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index):index = org.apache.commons.math3.util.OpenIntToDoubleHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d):org.apache.commons.math3.util.FastMath.lnMant.LN_MANT[i] = org.apache.commons.math3.util.FastMathCalc.slowLog(d)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - x[i] = e.getKey():x[i] = e.getKey()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dest.internalArray = new double[source.internalArray.length]:dest.internalArray = new double[source.internalArray.length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ac = a * c:ac = a * c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = (y + tmp1) - tmp1:ya = (y + tmp1) - tmp1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dN = small:dN = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mask = capacity - 1:this.mask = capacity - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - values = new double[length]:this.values = new double[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = -result:result = -result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(b, a):ret = org.apache.commons.math3.util.ArithmeticUtils.mulAndCheck(b, a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] >>> 32:c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION):ret = org.apache.commons.math3.util.ArithmeticUtils.addAndCheck(a, -b, org.apache.commons.math3.exception.util.LocalizedFormats.OVERFLOW_IN_ADDITION)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = -a:a = -a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - al = -al:al = -al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = new java.math.BigDecimal(unscaledVal, scale):this.d = new java.math.BigDecimal(unscaledVal, scale)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = ((tempC * z) + tempB) + tempA:result = ((tempC * z) + tempB) + tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = result && (other.numElements == numElements):result = result && (other.numElements == this.numElements)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - t = (-sintA) * sinEpsA:t = (-sintA) * sinEpsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[1] = sumA * 2.0:result[1] = sumA * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[0] = ys[0]:result[0] = ys[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0]:org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - newSize = ((int) (internalArray.length + org.apache.commons.math3.util.FastMath.round(expansionFactor))):newSize = ((int) (this.internalArray.length + org.apache.commons.math3.util.FastMath.round(this.expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[0] = tmp:result[0] = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[0] = a:hiPrec[0] = a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + yb:temp = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = za + yb:temp = za + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - newKeys[index] = key:newKeys[index] = key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = ((a1 * b1) + (a2 * b2)) + (a3 * b3):result = ((a1 * b1) + (a2 * b2)) + (a3 * b3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - field = source.field:this.field = source.field
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1]:shpiB = org.apache.commons.math3.util.FastMath.RECIP_2PI[idx + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - internalArray = new double[initialCapacity]:this.internalArray = new double[initialCapacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = prodA & 0xffffffffL:b = prodA & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = (z * lnb) + 0.5:z = (z * lnb) + 0.5
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ONE = new org.apache.commons.math3.util.Decimal64(1.0):org.apache.commons.math3.util.Decimal64.ONE = new org.apache.commons.math3.util.Decimal64(1.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = -((c - a) - lnm[1]):d = -((c - a) - lnm[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = -((c - a) - t):d = -((c - a) - t)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - za = pia - result:za = pia - result
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - keys = new int[capacity]:this.keys = new int[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.finalK = k:this.finalK = k
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.contractionCriterion = contractionCriteria:this.contractionCriterion = contractionCriteria
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za:yb = ((((epsA - (yaa * zaa)) - (yaa * zab)) - (yab * zaa)) - (yab * zab)) / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[1] = ((b * in[0]) - (a * in[1])) / ((in[0] * in[0]) + (in[0] * in[1])):result[1] = ((b * in[0]) - (a * in[1])) / ((in[0] * in[0]) + (in[0] * in[1]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.REMOVED:this.states[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.REMOVED
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - p = (p * x2) + (-0.16666666666666666):p = (p * x2) + (-0.16666666666666666)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - prodB = prodB + (bc << 32):prodB = prodB + (bc << 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - newSize = ((int) (org.apache.commons.math3.util.FastMath.ceil(internalArray.length * expansionFactor))):newSize = ((int) (org.apache.commons.math3.util.FastMath.ceil(this.internalArray.length * this.expansionFactor)))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + za:temp = ya + za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]:org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = (za + temp) - temp:temp = (za + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + (za * baseB):temp = ya + (za * baseB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bitb = (ad & 0x80000000L) != 0:bitb = (ad & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - epsA = temp:epsA = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xb = -xb:xb = -xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = val:this.d = val
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bs[1] = COSINE_TABLE_B[(i / 2) + 1]:bs[1] = COSINE_TABLE_B[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = -((c - a) - lnza):d = -((c - a) - lnza)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ans[0] = a[0] * b[0]:ans[0] = a[0] * b[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ratio * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = ratio * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[0] = java.lang.Double.POSITIVE_INFINITY:hiPrec[0] = java.lang.Double.POSITIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = (aa + tmp) - tmp:ya = (aa + tmp) - tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[1] = b:hiPrec[1] = b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = -org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true):result = -org.apache.commons.math3.util.FastMath.tanQ(xa, xb, true)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = new java.math.BigDecimal(in, mc):this.d = new java.math.BigDecimal(in, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - recipa = -recipa:recipa = -recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0]:org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB():org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - uniCounterOffset = new int[dimension]:this.uniCounterOffset = new int[this.dimension]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - u = -t:u = -t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - stirlingS2[i][1] = 1:stirlingS2[i][1] = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = -((c - a) - lnzb):d = -((c - a) - lnzb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = za + temp2:temp = za + temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - est = (est * mant) + (-0.3058015757857271):est = (est * mant) + (-0.3058015757857271)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - defaultTransformer = new org.apache.commons.math3.util.DefaultTransformer():this.defaultTransformer = new org.apache.commons.math3.util.DefaultTransformer()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = -yb:yb = -yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = ((37 * result) + h) ^ (h >>> 16):result = ((37 * result) + h) ^ (h >>> 16)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[0] = a / in[0]:result[0] = a / in[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - last = dimension - 1:this.last = this.dimension - 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.missingEntries = missingEntries:this.missingEntries = missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] & 0xffffffffL:d = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[1] & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - zb = (zb * epsilon) + 0.49999999999999994:zb = (zb * epsilon) + 0.49999999999999994
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA():org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpFracA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.field = field:this.field = field
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB):b = ((b + (costB * cosEpsA)) + (costA * cosEpsB)) + (costB * cosEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - tmp = result[0] + zs[0]:tmp = result[0] + zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = result && (other.contractionCriterion == contractionCriterion):result = result && (other.contractionCriterion == this.contractionCriterion)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - subnormal = true:subnormal = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = -b:b = -b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = ((int) (blbu % al)):a = ((int) (blbu % al))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - stirlingS2[0] = new long[]{ 1L }:stirlingS2[0] = new long[]{ 1L }
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - baseA = (tempA + temp) - temp:baseA = (tempA + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = -((y - ya) - yb):yb = -((y - ya) - yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = result.multiply(k2p):result = result.multiply(k2p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xb = cw.getRemB():xb = cw.getRemB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = (z * epsilon) + 1.0:z = (z * epsilon) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - tmp = cosa:tmp = cosa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = -rb:yb = -rb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bita = (prod2B & 0x8000000000000000L) != 0:bita = (prod2B & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - internalArray[substIndex] = value:this.internalArray[substIndex] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - y = org.apache.commons.math3.util.FastMath.floor(x):y = org.apache.commons.math3.util.FastMath.floor(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - sina = tmp:sina = tmp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.expansionMode = expansionMode:this.expansionMode = expansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - counter[last] = -1:this.counter[this.last] = -1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mantissa = mantissa & 0x7fffff:mantissa = mantissa & 0x7fffff
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xs[1] = SINE_TABLE_B[i / 2]:xs[1] = SINE_TABLE_B[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = a + t:c = a + t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - zb = -((temp - za) - zb):zb = -((temp - za) - zb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = new java.math.BigDecimal(val):this.d = new java.math.BigDecimal(val)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant():org.apache.commons.math3.util.FastMath.lnMant.LN_MANT = org.apache.commons.math3.util.FastMathLiteralArrays.loadLnMant()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = remA:b = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xs[0] = as[0]:xs[0] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - sinEpsA = temp2:sinEpsA = temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - cosb = sinb:cosb = sinb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = new java.math.BigDecimal(in):this.d = new java.math.BigDecimal(in)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - intVal = -intVal:intVal = -intVal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mantissa = mantissa >>> (1 - scaledExponent):mantissa = mantissa >>> (1 - scaledExponent)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xs[0] = SINE_TABLE_A[i]:xs[0] = SINE_TABLE_A[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hashData[4] = numElements:hashData[4] = this.numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xInt = org.apache.commons.math3.util.Precision.SGN_MASK - xInt:xInt = org.apache.commons.math3.util.Precision.SGN_MASK - xInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - newStates[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL:newStates[index] = org.apache.commons.math3.util.OpenIntToFieldHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lna = aa + ab:lna = aa + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a[0] = (c + z) - z:a[0] = (c + z) - z
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hashData[2] = expansionMode.hashCode():hashData[2] = this.expansionMode.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - totalSize = tS:this.totalSize = tS
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - COSINE_TABLE_A[i] = result[0]:COSINE_TABLE_A[i] = result[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ys[0] = ys[1] = 0.0:ys[0] = ys[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = new java.math.BigDecimal(unscaledVal, scale, mc):this.d = new java.math.BigDecimal(unscaledVal, scale, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - v = t:v = t
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - max = org.apache.commons.math3.util.FastMath.max(max, org.apache.commons.math3.util.FastMath.abs(p1[i] - p2[i])):max = org.apache.commons.math3.util.FastMath.max(max, org.apache.commons.math3.util.FastMath.abs(p1[i] - p2[i]))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - p = (p * x2) + 0.041666666666621166:p = (p * x2) + 0.041666666666621166
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - COSINE_TABLE_B[i] = result[1]:COSINE_TABLE_B[i] = result[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - cPrev = cN:cPrev = cN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY:hiPrec[0] = java.lang.Double.NEGATIVE_INFINITY
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[0] = zs[0]:result[0] = zs[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnza = (lnza * epsilon) + 1.0:lnza = (lnza * epsilon) + 1.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ra = temp:ra = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = (a1 * b1) + (a2 * b2):result = (a1 * b1) + (a2 * b2)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - startIndex = 0:this.startIndex = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - x3max = xabs:x3max = xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + baseB:temp = ya + baseB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dest.numElements = source.numElements:dest.numElements = source.numElements
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY):unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_15 + (a2 * org.apache.commons.math3.util.FastMath.F_1_17)))))))))))))))):absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_5 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_7 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_9 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_11 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_13 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_15 + (a2 * org.apache.commons.math3.util.FastMath.F_1_17))))))))))))))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnza = (lnza * epsilon) + (-0.2499999997677497):lnza = (lnza * epsilon) + (-0.2499999997677497)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xa = reduceResults[1]:xa = reduceResults[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]:org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xs[1] = 1.4456468917292502E-16:xs[1] = 1.4456468917292502E-16
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - keys[index] = key:this.keys[index] = key
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bitb = (bc & 0x80000000L) != 0:bitb = (bc & 0x80000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - values = buildArray(capacity):this.values = buildArray(capacity)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - epsB = yb:epsB = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3)))):norm = java.lang.Math.sqrt(s2 * (1 + ((x3max / s2) * (x3max * s3))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yInt = org.apache.commons.math3.util.Precision.SGN_MASK - yInt:yInt = org.apache.commons.math3.util.Precision.SGN_MASK - yInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.finalRemA = remA:this.finalRemA = remA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000:tmp = aa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = a + b:result = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - newStates[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL:newStates[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - resultHigh = tmpHigh:resultHigh = tmpHigh
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.listeners = new java.util.concurrent.CopyOnWriteArrayList<org.apache.commons.math3.util.IterationListener>():this.listeners = new java.util.concurrent.CopyOnWriteArrayList<org.apache.commons.math3.util.IterationListener>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a[1] = (c - a[0]) + d:a[1] = (c - a[0]) + d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yValues[j] = y[i]:yValues[j] = y[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xa = ya:xa = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - SINE_TABLE_A[i] = result[0] * 2.0:SINE_TABLE_A[i] = result[0] * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - in[1] = 0.0:in[1] = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = (z * epsilon) + 0.5000000000042687:z = (z * epsilon) + 0.5000000000042687
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_17) * org.apache.commons.math3.util.FastMath.F_15_16))) * org.apache.commons.math3.util.FastMath.F_13_14))) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2)):absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_9 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_11 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_13 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_15 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_17) * org.apache.commons.math3.util.FastMath.F_15_16))) * org.apache.commons.math3.util.FastMath.F_13_14))) * org.apache.commons.math3.util.FastMath.F_11_12))) * org.apache.commons.math3.util.FastMath.F_9_10))) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = new java.math.BigDecimal(in, offset, len):this.d = new java.math.BigDecimal(in, offset, len)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - err = err * (result[0] + result[1]):err = err * (result[0] + result[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - internalArray[startIndex + (numElements++)] = value:this.internalArray[this.startIndex + (this.numElements++)] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = source.charAt(index++):c = source.charAt(index++)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = 0:ret = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bl = -bl:bl = -bl
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bl = al:bl = al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAtanh = 0.5 * org.apache.commons.math3.util.FastMath.log((1 + a) / (1 - a)):absAtanh = 0.5 * org.apache.commons.math3.util.FastMath.log((1 + a) / (1 - a))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xb = ab:xb = ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = da * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = da * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - sHighPrev = sHighCur:sHighPrev = sHighCur
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - values[index] = missingEntries:this.values[index] = this.missingEntries
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - TANGENT_TABLE_B[i] = as[1]:TANGENT_TABLE_B[i] = as[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - s1 = 1 + ((s1 * r) * r):s1 = 1 + ((s1 * r) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - u = -u:u = -u
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hPrev = small:hPrev = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - value = v:this.value = v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - quadrant = cw.getK() & 3:quadrant = cw.getK() & 3
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dest.expansionFactor = source.expansionFactor:dest.expansionFactor = source.expansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = (-k) * 7.549789948768648E-8:a = (-k) * 7.549789948768648E-8
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d2pHigh = cTmpH - (cTmpH - tmpHigh):d2pHigh = cTmpH - (cTmpH - tmpHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bita = (bd & 0x8000000000000000L) != 0:bita = (bd & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0]:org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - unscaled = org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY)):unscaled = org.apache.commons.math3.util.FastMath.floor(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.NEGATIVE_INFINITY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ans[1] = a[1] + b[1]:ans[1] = a[1] + b[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - epsA = ya:epsA = ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xs[0] = SINE_TABLE_A[i / 2]:xs[0] = SINE_TABLE_A[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ZERO = new org.apache.commons.math3.util.Decimal64(0.0):org.apache.commons.math3.util.Decimal64.ZERO = new org.apache.commons.math3.util.Decimal64(0.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - z = z * lnb:z = z * lnb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - split[1] = d - split[0]:split[1] = d - split[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = -ra:ya = -ra
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ab = yb + lnCoef_i[1]:ab = yb + lnCoef_i[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - as[1] = SINE_TABLE_B[(i / 2) + 1]:as[1] = SINE_TABLE_B[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - maximalCount = max:this.maximalCount = max
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - est = (est * mant) + 0.5039018405998233:est = (est * mant) + 0.5039018405998233
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = result && (other.expansionFactor == expansionFactor):result = result && (other.expansionFactor == this.expansionFactor)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xa = cw.getRemA():xa = cw.getRemA()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1]:org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[i + org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - y = ya + yb:y = ya + yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + zb:temp = ya + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - al = blbu % al:al = blbu % al
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - stirlingS2 = new long[maxIndex][]:stirlingS2 = new long[maxIndex][]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnzb = -((lnza - aa) - ab):lnzb = -((lnza - aa) - ab)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - out[i] = (values[i] * normalizedSum) / sum:out[i] = (values[i] * normalizedSum) / sum
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB():org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B = org.apache.commons.math3.util.FastMathLiteralArrays.loadExpIntB()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1]:org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - cN = small:cN = small
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ys[0] = as[0]:ys[0] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5)):idx = ((int) ((((((-1.7168146928204135) * xa) * xa) + 8.0) * xa) + 0.5))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - values[index] = value:this.values[index] = value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - SAFE_MIN = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 1022L) << 52):org.apache.commons.math3.util.Precision.SAFE_MIN = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 1022L) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - values = new double[capacity]:this.values = new double[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled):unscaled = org.apache.commons.math3.util.FastMath.ceil(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temps[0] = -temps[0]:temps[0] = -temps[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - stirlingS2[i][0] = 0:stirlingS2[i][0] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - states = new byte[length]:this.states = new byte[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
((sintA + sintB) * (sinEpsA + sinEpsB))) * xb:t = (((costA + costB) * (cosEpsA + cosEpsB)) - 
((sintA + sintB) * (sinEpsA + sinEpsB))) * xb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - count = 0:this.count = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - zb = ((za * yb) + (ya * zb)) + (zb * yb):zb = ((za * yb) + (ya * zb)) + (zb * yb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - split[0] = (d + a) - a:split[0] = (d + a) - a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - prodA = prodA + (bc >>> 32):prodA = prodA + (bc >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - number = org.apache.commons.math3.util.CompositeFormat.parseNumber(source, special[i], pos):number = org.apache.commons.math3.util.CompositeFormat.parseNumber(source, special[i], pos)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hN = hPrev * deltaN:hN = hPrev * deltaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - epsilon = x - (intFrac / 1024.0):epsilon = x - (intFrac / 1024.0)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = temp:ya = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - p = (p * x2) + 0.008333333333329196:p = (p * x2) + 0.008333333333329196
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = new java.math.BigDecimal(in, offset, len, mc):this.d = new java.math.BigDecimal(in, offset, len, mc)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = a - b:ret = a - b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * org.apache.commons.math3.util.FastMath.F_1_5)))):absAtanh = a * (1 + (a2 * (org.apache.commons.math3.util.FastMath.F_1_3 + (a2 * org.apache.commons.math3.util.FastMath.F_1_5))))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - prod2A = prod2A + (bc >>> 32):prod2A = prod2A + (bc >>> 32)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = (yb * epsA2) + (-0.1428571423679182):yb = (yb * epsA2) + (-0.1428571423679182)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ans[0] = a[0] + b[0]:ans[0] = a[0] + b[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bs[0] = COSINE_TABLE_A[(i / 2) + 1]:bs[0] = COSINE_TABLE_A[(i / 2) + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] >>> 32:c = org.apache.commons.math3.util.FastMath.PI_O_4_BITS[0] >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - remB = -((remA - xa) - a):remB = -((remA - xa) - a)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - aa = ya + lnCoef_i[0]:aa = ya + lnCoef_i[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnza = lnza * epsilon:lnza = lnza * epsilon
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.expansionFactor = expansionFactor:this.expansionFactor = expansionFactor
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - current = next:this.current = this.next
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mantissa = mantissa << 1:mantissa = mantissa << 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - y[0] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][0]:y[0] = org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF[org.apache.commons.math3.util.FastMathCalc.LN_SPLIT_COEF.length - 1][0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = b + d:b = b + d
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = a + lnza:c = a + lnza
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - y = ((long) (x)):y = ((long) (x))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - xInt:xInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - xInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[1] = zs[1]:result[1] = zs[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mantissa = mantissa | (1L << 52):mantissa = mantissa | (1L << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - negate = true:negate = true
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - unscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)):unscaled = org.apache.commons.math3.util.FastMath.ceil(org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xs[0] = 2.718281828459045:xs[0] = 2.718281828459045
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - prodHigh[i] = ai * bi:prodHigh[i] = ai * bi
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - x1max = xabs:x1max = xabs
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]:org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A = new double[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.finalRemB = remB:this.finalRemB = remB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - value = defaultTransformer.transform(o):value = this.defaultTransformer.transform(o)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - resultLow = (resultLow * d2p) + tmpLow:resultLow = (resultLow * d2p) + tmpLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = shpi0 & 0xffffffffL:d = shpi0 & 0xffffffffL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY):unscaled = org.apache.commons.math3.util.FastMath.nextAfter(unscaled, java.lang.Double.POSITIVE_INFINITY)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = epsA / za:ya = epsA / za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dest.expansionMode = source.expansionMode:dest.expansionMode = source.expansionMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4):result = (((a1 * b1) + (a2 * b2)) + (a3 * b3)) + (a4 * b4)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - zb = (zb * epsilon) + 0.16666666666745392:zb = (zb * epsilon) + 0.16666666666745392
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[0] = java.lang.Double.NaN:hiPrec[0] = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = (b + (sintA * cosEpsB)) + (costA * sinEpsB):b = (b + (sintA * cosEpsB)) + (costA * sinEpsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[0] = tempA:hiPrec[0] = tempA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - baseB = tempB + (tempA - baseA):baseB = tempB + (tempA - baseA)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = za + zb:result = za + zb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - next = -2:this.next = -2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[1] = ys[1]:result[1] = ys[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - p = (p * x2) + (-0.49999999999999994):p = (p * x2) + (-0.49999999999999994)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - out[i] = java.lang.Double.NaN:out[i] = java.lang.Double.NaN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - states = newStates:this.states = newStates
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - epsB = -((temp - epsA) - epsB):epsB = -((temp - epsA) - epsB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023:exponent = ((int) ((inbits >> 52) & 0x7ff)) - 1023
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - yInt:yInt = org.apache.commons.math3.util.Precision.SGN_MASK_FLOAT - yInt
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xb = -((xa - a) - b):xb = -((xa - a) - b)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = za * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = za * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrecOut[1] = yb:hiPrecOut[1] = yb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp2 = (xb * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx]):temp2 = (xb * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_A[idx]) + (xa * org.apache.commons.math3.util.FastMath.TANGENT_TABLE_B[idx])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - za = temp2:za = temp2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = 0:result = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - indices[last] = index - count:indices[this.last] = index - count
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - keys = newKeys:this.keys = newKeys
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mantissa = mantissa | (1 << 23):mantissa = mantissa | (1 << 23)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - prodHighNext = prodHigh[i + 1]:prodHighNext = prodHigh[i + 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - t = (v - u) / 2:t = (v - u) / 2
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.roundingMode = roundingMode:this.roundingMode = roundingMode
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - mask = newMask:this.mask = newMask
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hash = (hash * 31) + t.hashCode():hash = (hash * 31) + t.hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hashData[1] = java.lang.Double.valueOf(contractionCriterion).hashCode():hashData[1] = java.lang.Double.valueOf(this.contractionCriterion).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - uniCounterOffset[last] = 0:this.uniCounterOffset[this.last] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh):d2pLow = ((d2pLow * d2p) + tmpLow) + (tmpHigh - d2pHigh)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = shpiB >>> 32:c = shpiB >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - newMapping = false:newMapping = false
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - zb = denom - za:zb = denom - za
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = (yb * epsA2) + (-0.33333333333333287):yb = (yb * epsA2) + (-0.33333333333333287)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - as[0] = COSINE_TABLE_A[i]:as[0] = COSINE_TABLE_A[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.REMOVED:this.states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.REMOVED
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = xa * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = xa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - keys = new int[length]:this.keys = new int[length]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - remA = xa + a:remA = xa + a
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled):unscaled = org.apache.commons.math3.util.FastMath.floor(unscaled)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = c:a = c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - da = temp:da = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + baseA:temp = ya + baseA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07)):idx = ((int) ((-(((((-1.7168146928204135) * oneOverXa) * oneOverXa) + 8.0) * oneOverXa)) + 13.07))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - internalArray = tempArray:this.internalArray = tempArray
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = y * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = y * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = 0.07490822288864472:yb = 0.07490822288864472
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = a + b:ret = a + b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]:intPartA = org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_A[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX + intVal]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xb = reduceResults[2]:xb = reduceResults[2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = result && (other.expansionMode == expansionMode):result = result && (other.expansionMode == this.expansionMode)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - tmp = cosb:tmp = cosb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + recipb:temp = ya + recipb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = ratioa + ratiob:result = ratioa + ratiob
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = (yb * epsA2) + 0.11111095942313305:yb = (yb * epsA2) + 0.11111095942313305
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = -ya:ya = -ya
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = (yb * epsA2) + (-0.09088450866185192):yb = (yb * epsA2) + (-0.09088450866185192)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = c:ret = c
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - inbits = java.lang.Double.doubleToLongBits(x):inbits = java.lang.Double.doubleToLongBits(x)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ys[1] = COSINE_TABLE_B[i / 2]:ys[1] = COSINE_TABLE_B[i / 2]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - tmp = result[0] + zs[1]:tmp = result[0] + zs[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = (y + temp) - temp:ya = (y + temp) - temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnza = (lnza * epsilon) + 0.19999954120254515:lnza = (lnza * epsilon) + 0.19999954120254515
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d = -((c - a) - (org.apache.commons.math3.util.FastMath.LN_2_B * exp)):d = -((c - a) - (org.apache.commons.math3.util.FastMath.LN_2_B * exp))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - states = new byte[capacity]:this.states = new byte[capacity]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]:org.apache.commons.math3.util.FastMath.ExpFracTable.EXP_FRAC_TABLE_B = new double[org.apache.commons.math3.util.FastMath.EXP_FRAC_TABLE_LEN]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = a + lnm[1]:c = a + lnm[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ya = epsA:ya = epsA
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2)):absAsinh = a * (1 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_3 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_5 - ((a2 * (org.apache.commons.math3.util.FastMath.F_1_7 - ((a2 * org.apache.commons.math3.util.FastMath.F_1_9) * org.apache.commons.math3.util.FastMath.F_7_8))) * org.apache.commons.math3.util.FastMath.F_5_6))) * org.apache.commons.math3.util.FastMath.F_3_4))) * org.apache.commons.math3.util.FastMath.F_1_2))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - xa = aa:xa = aa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1]:shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max)):norm = x1max * java.lang.Math.sqrt(s1 + ((s2 / x1max) / x1max))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - sPrime = sHighCur - prodHighNext:sPrime = sHighCur - prodHighNext
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - lnza = (lnza * epsilon) + (-0.5):lnza = (lnza * epsilon) + (-0.5)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - as[1] = COSINE_TABLE_B[i]:as[1] = COSINE_TABLE_B[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ans[1] = ((a[0] * b[1]) + (a[1] * b[0])) + (a[1] * b[1]):ans[1] = ((a[0] * b[1]) + (a[1] * b[0])) + (a[1] * b[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = ya + recipa:temp = ya + recipa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ret = a * b:ret = a * b
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - e = e.shiftRight(1):e = e.shiftRight(1)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hPrev = hN:hPrev = hN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = (aa - ya) + ab:yb = (aa - ya) + ab
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = est * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = est * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL:this.states[index] = org.apache.commons.math3.util.OpenIntToDoubleHashMap.FULL
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - d2p = d2pHigh + d2pLow:d2p = d2pHigh + d2pLow
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - keys[index] = 0:this.keys[index] = 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - temp = cosa * org.apache.commons.math3.util.FastMath.HEX_40000000:temp = cosa * org.apache.commons.math3.util.FastMath.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - est = (est * mant) + 0.7249995199969751:est = (est * mant) + 0.7249995199969751
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hashData[0] = java.lang.Double.valueOf(expansionFactor).hashCode():hashData[0] = java.lang.Double.valueOf(this.expansionFactor).hashCode()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - SINE_TABLE_B[i] = result[1]:SINE_TABLE_B[i] = result[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - x = -x:x = -x
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[2] = sumB * 2.0:result[2] = sumB * 2.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - c = shpi0 >>> 32:c = shpi0 >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[0] = intPart:result[0] = intPart
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - size = source.size:this.size = source.size
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dPrev = dN:dPrev = dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - s3 = 1 + ((s3 * r) * r):s3 = 1 + ((s3 * r) * r)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - y[1] = a[1]:y[1] = a[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - EPSILON = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 53L) << 52):org.apache.commons.math3.util.Precision.EPSILON = java.lang.Double.longBitsToDouble((org.apache.commons.math3.util.Precision.EXPONENT_OFFSET - 53L) << 52)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - k2p = k2p.multiply(k2p):k2p = k2p.multiply(k2p)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - TANGENT_TABLE_A[i] = as[0]:TANGENT_TABLE_A[i] = as[0]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - map = new java.util.HashMap<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer>():this.map = new java.util.HashMap<java.lang.Class<?>, org.apache.commons.math3.util.NumberTransformer>()
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = (-k) * 6.123233995736766E-17:a = (-k) * 6.123233995736766E-17
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - na = temp:na = temp
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - bitb = (ac & 0x8000000000000000L) != 0:bitb = (ac & 0x8000000000000000L) != 0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = prodA >>> 32:a = prodA >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - norm = x3max * java.lang.Math.sqrt(s3):norm = x3max * java.lang.Math.sqrt(s3)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1] << shift:shpi0 = (idx == 0) ? 0 : org.apache.commons.math3.util.FastMath.RECIP_2PI[idx - 1] << shift
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - indices[i] = idx:indices[i] = idx
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dimension = size.length:this.dimension = size.length
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - index = org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index):index = org.apache.commons.math3.util.OpenIntToFieldHashMap.changeIndexSign(index)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = result && (other.startIndex == startIndex):result = result && (other.startIndex == this.startIndex)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB:hiPrec[1] = ((((tempC * extra) * z) + (tempC * extra)) + (tempC * z)) + tempB
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - stirlingS2[i][i] = 1:stirlingS2[i][i] = 1
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1]:stirlingS2[i][j] = (j * stirlingS2[i - 1][j]) + stirlingS2[i - 1][j - 1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - dN = 1 / dN:dN = 1 / dN
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - this.scale = scale:this.scale = scale
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - zb = (zb * epsilon) + 0.041666663879186654:zb = (zb * epsilon) + 0.041666663879186654
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - newValues[index] = oldValues[i]:newValues[index] = oldValues[i]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = prodB >>> 32:a = prodB >>> 32
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - aa = (numer - (xa * denom)) - (xb * denom):aa = (numer - (xa * denom)) - (xb * denom)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - zb = -((za - pia) + result):zb = -((za - pia) + result)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - previous = values[index]:previous = this.values[index]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB)):b = b - (((sintB * sinEpsA) + (sintA * sinEpsB)) + (sintB * sinEpsB))
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a[0] = ((c + z) - c) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000:a[0] = ((c + z) - c) * org.apache.commons.math3.util.FastMathCalc.HEX_40000000
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result[1] = result[1] - ((tmp - result[0]) - zs[1]):result[1] = result[1] - ((tmp - result[0]) - zs[1])
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - p = (p * x2) + (-0.0013888888689039883):p = (p * x2) + (-0.0013888888689039883)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - aa = ya * xa:aa = ya * xa
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - a = b = c = d = 0.0:a = b = c = d = 0.0
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - ab = ((ya * xb) + (yb * xa)) + (yb * xb):ab = ((ya * xb) + (yb * xa)) + (yb * xb)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - tempB = -((temp - tempA) - tempB):tempB = -((temp - tempA) - tempB)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - maxCountCallback = cb:this.maxCountCallback = cb
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false):result = org.apache.commons.math3.util.FastMath.tanQ(xa, xb, false)
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - yb = (yb * epsA2) + 0.19999999999923582:yb = (yb * epsA2) + 0.19999999999923582
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1]:org.apache.commons.math3.util.FastMath.ExpIntTable.EXP_INT_TABLE_B[org.apache.commons.math3.util.FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1]
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - v = -v:v = -v
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.core.validation.junit.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:179) - The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
[INFO ] fr.inria.astor.core.validation.junit.LaucherJUnitProcess.killProcess(LaucherJUnitProcess.java:181) - Killed the Process that runs JUnit test cases 607


Node: 72e3d7cd2794



Date: Tue Nov 12 04:13:38 EST 2019

cd /script/jGenProg_Defects4J_Math_15;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-15 \
	-failing org.apache.commons.math3.util.FastMathTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_15/target/classes/:/script/jGenProg_Defects4J_Math_15/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

