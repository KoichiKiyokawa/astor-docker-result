Determine revision date.................................................... OK
Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en
[INFO] 04:44:17,325 fr.inria.astor.core.setup.ProjectConfiguration:282 - Version of the JVM used: 1.7.0_181
[INFO] 04:44:17,332 main:381 - Java version of the JDK used to run tests: 1.7.0_181
[INFO] 04:44:17,332 main:382 - The compliance of the JVM is:  7
[INFO] 04:44:17,334 main:660 - command line arguments: [-mode  jgenprog  -location  .  -id  Math-25  -failing  org.apache.commons.math3.optimization.fitting.HarmonicFitterTest  -jvm4testexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -jvm4evosuitetestexecution  /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/  -maxgen  1000000  -maxtime  120  -stopfirst  true  -seed  0  -scope  package  -population  1  -javacompliancelevel  5  -srcjavafolder  src/main/java/  -srctestfolder  src/test/java/  -binjavafolder  target/classes/  -bintestfolder  target/test-classes/  -parameters  mode:leven  -dependencies  /script/jGenProg_Defects4J_Math_25/target/classes/:/script/jGenProg_Defects4J_Math_25/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar]
[INFO] 04:44:17,339 fr.inria.main.evolution.AstorMain:224 - Running Astor on a JDK at /usr/lib/jvm/java-8-openjdk-amd64/jre
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:975) - Source folders: [/script/jGenProg_Defects4J_Math_25/./src/main/java]
[INFO ] fr.inria.main.AbstractMain.determineSourceFolders(AbstractMain.java:994) - Source Test folders: [/script/jGenProg_Defects4J_Math_25/./src/test/java]
[INFO ] fr.inria.main.evolution.AstorMain.createEngine(AstorMain.java:104) - mode is Leven
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.resolveTestsToRun(AstorCoreEngine.java:1311) - Test retrieved from classes: 662
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.calculateSuspicious(GZoltarFaultLocalization.java:74) - -Executing Gzoltar classpath: /script/jGenProg_Defects4J_Math_25/./output_astor/AstorMain-Math-25//bin//default from 662 classes with test cases
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:154) - Gzoltar fault localization: min susp value parameter: 0.1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:174) - -gz-Adding classpath: [/script/jGenProg_Defects4J_Math_25/./output_astor/AstorMain-Math-25//bin//default, /script/jGenProg_Defects4J_Math_25/target/classes/, /script/jGenProg_Defects4J_Math_25/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.differentiation.DerivativeStructureTest#testAtan2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testParaboloid
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testSplinePartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunctionTest#testMatchingPartialDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.JacobianMatricesTest#testParameterizable
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testWikipedia
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testOnePointParabola
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSine
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testQuadratic
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testEmptySample
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testMixedDerivatives
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testSquareRoot
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.HermiteInterpolatorTest#testRandomPolynomialsFirstDerivative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTest#testGetSigma
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.MersenneTwisterTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.descriptive.rank.PercentileTest#testSpecialValues
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.ode.events.EventStateTest#closeEvents
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[21]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[22]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[23]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[24]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[25]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[26]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[47]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[48]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[49]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[50]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.FastMathStrictComparisonTest#test1[51]
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.exception.util.LocalizedFormatsTest#testMessageNumber
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalReal
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testReciprocalZero
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.complex.ComplexTest#testMath221
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloParameters
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizerTestValidation#testParametersErrorMonteCarloObservations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testDerivativeShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.SincTest#testShortcut
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testSampling
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.MultivariateNormalDistributionTest#testGetCovarianceMatrix
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatorTest#testWave
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongNegativeRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.ISAACTest#testNextLongPositiveRange
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatorTest#testPlane
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.RotationTest#testVectorOnePair
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testRank
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.random.CorrelatedRandomVectorGeneratorTest#testMath226
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testCross
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testBuildBox
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testTetrahedron
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.threed.PolyhedronsSetTest#testIsometry
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testUnsupportedBoundaries2
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaNegative
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testInputSigmaDimensionMismatch
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiagonalRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testAckley
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.CMAESOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testDefault
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testInterval
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testMultiple
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.geometry.euclidean.oned.IntervalsSetTest#testSinglePoint
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testElliRotated
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testEllipse
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTwoAxes
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testProblemDimensionTooSmall
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigar
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRosen
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testRastrigin
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSsDiffPow
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaximize
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testCigTab
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testSphere
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testTablet
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.direct.BOBYQAOptimizerTest#testMaxEvaluations
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.optimization.DifferentiableMultivariateMultiStartOptimizerTest#testCircleFitting
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.analysis.function.LogitTest#testDerivativeLargeArguments
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.distribution.GammaDistributionTest#testMath753Shape1
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.dfp.DfpTest#testMultiply
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:214) - Test failt: org.apache.commons.math3.stat.correlation.CovarianceTest#testInsufficientData
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:226) - Gzoltar Test Result Total:4074, fails: 109, GZoltar suspicious 28602, with positive susp 4498
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:234) - nr test results 4074
[INFO ] fr.inria.astor.core.faultlocalization.gzoltar.GZoltarFaultLocalization.searchSuspicious(GZoltarFaultLocalization.java:289) - Gzoltar found: 811 with susp > 0.1, we consider: 811
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.calculateSuspicious(AstorCoreEngine.java:898) - Setting up the max to 5121800 milliseconds (5121 sec)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:709) - 
---- Creating spoon model
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildSpoonModel(MutationSupporter.java:240) - Creating model,  Code location from working folder: /script/jGenProg_Defects4J_Math_25/./src/main/java
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:68) - building model: /script/jGenProg_Defects4J_Math_25/./src/main/java, compliance level: 5
[INFO ] fr.inria.astor.core.manipulation.MutationSupporter.buildModel(MutationSupporter.java:82) - Classpath (Dependencies) for building SpoonModel: [/script/jGenProg_Defects4J_Math_25/target/classes/, /script/jGenProg_Defects4J_Math_25/target/test-classes/, /defects4j/framework/projects/lib/junit-4.11.jar]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initModel(AstorCoreEngine.java:779) - Number of CtTypes created: 596
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.initPopulation(AstorCoreEngine.java:713) - 
---- Initial suspicious size: 811
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=105, susp=0.1436739427831727]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=108, susp=0.1436739427831727]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=111, susp=0.1436739427831727]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.InsideFinder, methodName=recurseSides(Lorg/apache/commons/math3/geometry/partitioning/BSPTree;Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;)V, lineNumber=112, susp=0.1436739427831727]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem$Model, methodName=value(D)D, lineNumber=158, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=79, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=80, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=81, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=generate(I)[Ljava/awt/geom/Point2D$Double;, lineNumber=83, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=92, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=93, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=94, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.RandomStraightLinePointGenerator, methodName=create()Ljava/awt/geom/Point2D$Double;, lineNumber=96, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=53, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=addPoint(DD)V, lineNumber=54, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=73, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=74, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=75, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=76, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=y()[D, lineNumber=79, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=target()[D, lineNumber=83, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=87, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=88, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=89, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=90, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=weight()[D, lineNumber=93, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=97, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=99, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=100, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=101, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=102, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=value([D)[D, lineNumber=105, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=121, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=122, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=123, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=124, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=126, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.StraightLineProblem, methodName=solve()[D, lineNumber=127, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=316, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.optimization.general.DummyOptimizer, methodName=doOptimize()Lorg/apache/commons/math3/optimization/PointVectorValuePair;, lineNumber=319, susp=0.13545709229571928]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getPlus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=119, susp=0.11270711351480169]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane, methodName=getMinus()Lorg/apache/commons/math3/geometry/partitioning/SubHyperplane;, lineNumber=126, susp=0.11270711351480169]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createModificationPoints(ProgramVariantFactory.java:223) -  Not ctClass for suspicious code Candidate [className=org.apache.commons.math3.RetryRunner$1, methodName=evaluate()V, lineNumber=77, susp=0.1106002527218662]
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:134) - Total suspicious from FL: 811,  263
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createProgramInstance(ProgramVariantFactory.java:143) - Total ModPoint created: 263
[INFO ] fr.inria.astor.core.solutionsearch.population.ProgramVariantFactory.createInitialPopulation(ProgramVariantFactory.java:82) - Creating program variant #1, [Variant id: 1, #gens: 263, #ops: 0, parent:-]
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.setFitnessOfPopulation(AstorCoreEngine.java:754) - The original fitness is : 1.0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:66) - ----------------------------
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:67) - ---Configuration properties:---Execution values
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:alternativecompliancelevel= 8
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoredTestCases= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:workingDirectory= /script/jGenProg_Defects4J_Math_25/./output_astor
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:manipulatesuper= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:validation= process
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4testexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:operatorspace= irr-statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:disablelog= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:binjavafolder= target/classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:synthesis_depth= 3
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltartestpackagetoexclude= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfitnessinitialpopulation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuiteresultfolder= evosuite
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:flthreshold= 0.1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:regressionforfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:collectonlyusedmethod= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:preservelinenumbers= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax2= 5121800
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:tmax1= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probagenmutation= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nomodificationconvergence= 100
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:diff_type= relative
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:targetelementprocessor= statements
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srctestfolder= src/test/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forceExecuteRegression= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:clusteringfilename= clustering.csv
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:failing= org.apache.commons.math3.optimization.fitting.HarmonicFitterTest
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logtestexecution= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_buggy_class= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:numberExecutions= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumbersolutions= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evo_affected_by_op= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:population= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:considerzerovaluesusp= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxCombinationVariableLimit= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:loglevel= INFO
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savesolution= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:javacompliancelevel= 5
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:uniqueoptogen= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:gzoltarpackagetonotinstrument= junit.framework
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectIdentifier= Math-25
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:modificationpointnavigation= weight
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:stopfirst= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:multipointmodification= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:elementsToMutate= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jsonoutputname= astor_output
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoDSE= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bintestfolder= target/test-classes/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:testbystep= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:version-location= ./math-version/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:reintroduce= PARENTS:ORIGINAL
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:executorjar= ./lib/jtestex7.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxGeneration= 1000000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:max_synthesis_step= 10000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxVarCombination= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtime= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvmversion= 1.7.0_181
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:commandTrunk= 50000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:faultlocalization= gzoltar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetmodel= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxsuspcandidates= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mode= leven
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:learningdir= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:jvm4evosuitetestexecution= /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:filterfaultlocalization= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:mutationrate= 1 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pathToMVNRepository= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resourcesfolder= /src/main/resources:/src/test/resources:
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:timezone= America/Los_Angeles
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:runjava7code= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evoRunOnBuggyClass= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:limitbysuspicious= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logsattemps= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:dependenciespath= /script/jGenProg_Defects4J_Math_25/target/classes/:/script/jGenProg_Defects4J_Math_25/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:logpatternlayout= [%-5p] %l - %m%n
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:packageToInstrument= 
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:skipfaultlocalization= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:scope= package
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:transformingredient= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxnumvariablesperingredient= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:parsesourcefromoriginal= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:pvariantfoldername= variant-
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savespoonmodelondisk= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:srcjavafolder= src/main/java/
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:ignoreflakyinfl= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:cleantemplates= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:applyCrossover= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxmodificationpoints= 1000
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:duplicateingredientsinspace= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:metid= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:continuewhenmodelfail= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:saveall= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:seed= 0
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:savecompletepatched= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:resetoperations= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:processoutputinfile= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:location= .
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:probabilistictransformation= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:overridemaxtime= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:outputjsonresult= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:allpoints= false
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:bugId= 280
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:evosuitetimeout= 120
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:maxtimefactor= 10
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:nrPlaceholders= 1
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:69) - p:forcesubprocesskilling= true
[INFO ] fr.inria.astor.core.setup.ConfigurationProperties.print(ConfigurationProperties.java:71) - ----------------------------
[INFO ] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:40) - 
----Starting Solution Search
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#apply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#apply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#apply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#apply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#searchIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#searchIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DividedDifferenceInterpolator#computeDividedDifference
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DividedDifferenceInterpolator#computeDividedDifference
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DividedDifferenceInterpolator#computeDividedDifference
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DividedDifferenceInterpolator#computeDividedDifference
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#derivative
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#derivative
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#derivative
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#derivative
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LinearInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LinearInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LinearInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LinearInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#checkAllFiniteReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#checkAllFiniteReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MicrosphereInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MicrosphereInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MicrosphereInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MicrosphereInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnivariatePeriodicInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnivariatePeriodicInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnivariatePeriodicInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnivariatePeriodicInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	final double c = a[i][j];
	aX[i][j] = i * c;
	aY[i][j] = j * c;
	aXX[i][j] = (i - 1) * aX[i][j];
	aYY[i][j] = (j - 1) * aY[i][j];
	aXY[i][j] = j * aX[i][j];
}:for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	final double $1 = this.a[i][$0];
	aX[i][$0] = i * $1;
	aY[i][$0] = $0 * $1;
	aXX[i][$0] = (i - 1) * aX[i][$0];
	aYY[i][$0] = ($0 - 1) * aY[i][$0];
	aXY[i][$0] = $0 * aX[i][$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
}:for (int $1 = 0; $1 < value.length; ++$1) {
	value[$1] += dividedDifference[$1] * valueCoeff;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final double x = xval[i];
	d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
}:for (int $36 = 0; $36 < xLen; $36++) {
	final double $37 = xval[$36];
	d2FdZdX[$36][j][k] = f.partialDerivativeXY(z, $37);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);
}:for (int $8 = 0; $8 < yLen; $8++) {
	this.yFitter.addObservedPoint(1, yval[$8], fval_1[i][$8]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = xSplineYZ[i];
	for (int j = 0; j < yLen; j++) {
		final double y = yval[j];
		for (int k = 0; k < zLen; k++) {
			final double z = zval[k];
			dFdZ[i][j][k] = f.partialDerivativeY(y, z);
			d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
		}
	}
}:for (int $30 = 0; $30 < xLen; $30++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $31 = xSplineYZ[$30];
	for (int $32 = 0; $32 < yLen; $32++) {
		final double $33 = yval[$32];
		for (int $34 = 0; $34 < zLen; $34++) {
			final double $35 = zval[$34];
			dFdZ[$30][$32][$34] = $31.partialDerivativeY($33, $35);
			d2FdYdZ[$30][$32][$34] = $31.partialDerivativeXY($33, $35);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < sz; j++) {
	result += row[j] * beta[j];
}:for (int $0 = 0; $0 < sz; $0++) {
	result += row[$0] * beta[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < 16; i++) {
	double result = 0;
	final double[] row = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[i];
	for (int j = 0; j < 16; j++) {
		result += row[j] * beta[j];
	}
	a[i] = result;
}:for (int $1 = 0; $1 < 16; $1++) {
	double $2 = 0;
	final double[] $3 = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[$1];
	for (int $4 = 0; $4 < 16; $4++) {
		$2 += $3[$4] * beta[$4];
	}
	a[$1] = $2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final int nJ = nextIndex(j, yLen);
	final int pJ = previousIndex(j);
	for (int k = 0; k < zLen; k++) {
		final int nK = nextIndex(k, zLen);
		final int pK = previousIndex(k);


		d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
		fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
		fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
		fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
		(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
	}
}:for (int $51 = 0; $51 < yLen; $51++) {
	final int $52 = nextIndex($51, yLen);
	final int $53 = previousIndex($51);
	for (int $54 = 0; $54 < zLen; $54++) {
		final int $55 = nextIndex($54, zLen);
		final int $56 = previousIndex($54);


		d3FdXdYdZ[i][$51][$54] = (((((((fval[nI][$52][$55] - fval[nI][$53][$55]) - 
		fval[pI][$52][$55]) + fval[pI][$53][$55]) - 
		fval[nI][$52][$56]) + fval[nI][$53][$56]) + 
		fval[pI][$52][$56]) - fval[pI][$53][$56]) / 
		(((xval[nI] - xval[pI]) * (yval[$52] - yval[$53])) * (zval[$55] - zval[$56]));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	xFitter.clearObservations();
	for (int i = 0; i < xLen; i++) {
		xFitter.addObservedPoint(1, xval[i], fval[i][j]);
	}

	yPolyX[j] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(xFitter.fit());
}:for (int $2 = 0; $2 < yLen; $2++) {
	this.xFitter.clearObservations();
	for (int $3 = 0; $3 < xLen; $3++) {
		this.xFitter.addObservedPoint(1, xval[$3], fval[$3][$2]);
	}

	yPolyX[$2] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(this.xFitter.fit());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	dFdY[i][j] = f.value(yval[j]);
}:for (int $9 = 0; $9 < yLen; $9++) {
	dFdY[i][$9] = f.value(yval[$9]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = ileft; k <= iright; ++k) {
	final double xk = xval[k];
	final double yk = yval[k];
	final double dist = (k < i) ? x - xk : xk - x;
	final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
	final double xkw = xk * w;
	sumWeights += w;
	sumX += xkw;
	sumXSquared += xk * xkw;
	sumY += yk * w;
	sumXY += yk * xkw;
}:for (int $0 = ileft; $0 <= iright; ++$0) {
	final double $1 = xval[$0];
	final double $2 = yval[$0];
	final double $3 = ($0 < i) ? x - $1 : $1 - x;
	final double $4 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($3 * denom) * robustnessWeights[$0]) * weights[$0];
	final double $5 = $1 * $4;
	sumWeights += $4;
	sumX += $5;
	sumXSquared += $1 * $5;
	sumY += $2 * $4;
	sumXY += $2 * $5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xval.length; ++i) {
	final double[] xvalI = xval[i];
	if (xvalI == null) {
		throw new org.apache.commons.math3.exception.NullArgumentException();
	}
	if (xvalI.length != dimension) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension);
	}

	samples.put(new org.apache.commons.math3.linear.ArrayRealVector(xvalI), yval[i]);
}:for (int $0 = 0; $0 < xval.length; ++$0) {
	final double[] $1 = xval[$0];
	if ($1 == null) {
		throw new org.apache.commons.math3.exception.NullArgumentException();
	}
	if ($1.length != this.dimension) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException($1.length, this.dimension);
	}

	this.samples.put(new org.apache.commons.math3.linear.ArrayRealVector($1), yval[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
	for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
		result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
	}
}:for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $1++) {
	for (int $2 = 0; $2 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $2++) {
		result += ((this.a[i][$1][$2] * pX[i]) * pY[$1]) * pZ[$2];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[i].derivative();
	for (int j = 0; j < yLen; j++) {
		dFdY[i][j] = f.value(yval[j]);
	}
}:for (int $10 = 0; $10 < xLen; $10++) {
	final org.apache.commons.math3.analysis.UnivariateFunction $11 = xSplineY[$10].derivative();
	for (int $12 = 0; $12 < yLen; $12++) {
		dFdY[$10][$12] = $11.value(yval[$12]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	xSplineY[i] = spInterpolator.interpolate(yval, fval[i]);
}:for (int $4 = 0; $4 < xLen; $4++) {
	xSplineY[$4] = spInterpolator.interpolate(yval, fval[$4]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
}:for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	this.a[i][$0] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * $0)];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
}:for (int $1 = 0; $1 < y.length; ++$1) {
	bottom1[$1] = inv * (bottom0[$1] - bottom1[$1]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; i++) {
	m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);
}:for (int $0 = 0; $0 < n; $0++) {
	m[$0] = (y[$0 + 1] - y[$0]) / (x[$0 + 1] - x[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	if (fval[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
	}

	for (int k = 0; k < zLen; k++) {
		final double v = fval[i][j][k];
		fvalXY[k][i][j] = v;
		fvalZX[j][k][i] = v;
	}
}:for (int $2 = 0; $2 < yLen; $2++) {
	if (fval[i][$2].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][$2].length, zLen);
	}

	for (int $3 = 0; $3 < zLen; $3++) {
		final double $4 = fval[i][$2][$3];
		fvalXY[$3][i][$2] = $4;
		fvalZX[$2][$3][i] = $4;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 1; i < n; i++) {
	g = (2.0 * (x[i + 1] - x[i - 1])) - (h[i - 1] * mu[i - 1]);
	mu[i] = h[i] / g;
	z[i] = (((3.0 * (((y[i + 1] * h[i - 1]) - (y[i] * (x[i + 1] - x[i - 1]))) + (y[i - 1] * h[i]))) / 
	(h[i - 1] * h[i])) - (h[i - 1] * z[i - 1])) / g;
}:for (int $1 = 1; $1 < n; $1++) {
	g = (2.0 * (x[$1 + 1] - x[$1 - 1])) - (h[$1 - 1] * mu[$1 - 1]);
	mu[$1] = h[$1] / g;
	z[$1] = (((3.0 * (((y[$1 + 1] * h[$1 - 1]) - (y[$1] * (x[$1 + 1] - x[$1 - 1]))) + (y[$1 - 1] * h[$1]))) / 
	(h[$1 - 1] * h[$1])) - (h[$1 - 1] * z[$1 - 1])) / g;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
		for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
			a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
		}
	}
}:for (int $3 = 0; $3 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $3++) {
	for (int $4 = 0; $4 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $4++) {
		for (int $5 = 0; $5 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $5++) {
			this.a[$3][$4][$5] = aV[$3 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * ($4 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $5)))];
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < polynomials.length; ++k) {
	polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
}:for (int $1 = 0; $1 < polynomials.length; ++$1) {
	polynomials[$1] = polynomials[$1].add(coeff.multiply(polynomial(tdi[$1])));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < values.length; i++) {
	org.apache.commons.math3.util.MathUtils.checkFinite(values[i]);
}:for (int $0 = 0; $0 < values.length; $0++) {
	org.apache.commons.math3.util.MathUtils.checkFinite(values[$0]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j]);
}:for (int $10 = 0; $10 < yLen; $10++) {
	ySplineZX[$10] = bsi.interpolate(zval, xval, fvalZX[$10]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final int nI = nextIndex(i, xLen);
	final int pI = previousIndex(i);
	for (int j = 0; j < yLen; j++) {
		final int nJ = nextIndex(j, yLen);
		final int pJ = previousIndex(j);
		d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
		fval[pI][nJ]) + fval[pI][pJ]) / 
		((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
	}
}:for (int $16 = 0; $16 < xLen; $16++) {
	final int $17 = nextIndex($16, xLen);
	final int $18 = previousIndex($16);
	for (int $19 = 0; $19 < yLen; $19++) {
		final int $20 = nextIndex($19, yLen);
		final int $21 = previousIndex($19);
		d2FdXdY[$16][$19] = (((fval[$17][$20] - fval[$17][$21]) - 
		fval[$18][$20]) + fval[$18][$21]) / 
		((xval[$17] - xval[$18]) * (yval[$20] - yval[$21]));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
		x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
}:for (int $2 = i; $2 < n; ++$2) {
	final double[] $3 = this.bottomDiagonal.get(n - ($2 + 1));
	final double $4 = 1.0 / (x - this.abscissae.get(n - ($2 + 1)));
	if (java.lang.Double.isInfinite($4)) {
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
		x);
	}
	for (int $5 = 0; $5 < y.length; ++$5) {
		$3[$5] = $4 * (bottom0[$5] - $3[$5]);
	}
	bottom0 = $3;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < lastJ; j++) {
	if (f[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
	}
	if (dFdX[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
	}
	if (dFdY[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
	}
	if (dFdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
	}
	if (d2FdXdY[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
	}
	if (d2FdXdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
	}
	if (d2FdYdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
	}
	if (d3FdXdYdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
	}

	final int jp1 = j + 1;
	for (int k = 0; k < lastK; k++) {
		final int kp1 = k + 1;

		final double[] beta = new double[]{ 
		f[i][j][k], f[ip1][j][k], 
		f[i][jp1][k], f[ip1][jp1][k], 
		f[i][j][kp1], f[ip1][j][kp1], 
		f[i][jp1][kp1], f[ip1][jp1][kp1], 

		dFdX[i][j][k], dFdX[ip1][j][k], 
		dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
		dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
		dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

		dFdY[i][j][k], dFdY[ip1][j][k], 
		dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
		dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
		dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

		dFdZ[i][j][k], dFdZ[ip1][j][k], 
		dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
		dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
		dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

		d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
		d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
		d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
		d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

		d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
		d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
		d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
		d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

		d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
		d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
		d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
		d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

		d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
		d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
		d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
		d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


		splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
	}
}:for (int $3 = 0; $3 < lastJ; $3++) {
	if (f[i][$3].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][$3].length, zLen);
	}
	if (dFdX[i][$3].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][$3].length, zLen);
	}
	if (dFdY[i][$3].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][$3].length, zLen);
	}
	if (dFdZ[i][$3].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][$3].length, zLen);
	}
	if (d2FdXdY[i][$3].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][$3].length, zLen);
	}
	if (d2FdXdZ[i][$3].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][$3].length, zLen);
	}
	if (d2FdYdZ[i][$3].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][$3].length, zLen);
	}
	if (d3FdXdYdZ[i][$3].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][$3].length, zLen);
	}

	final int $4 = $3 + 1;
	for (int $5 = 0; $5 < lastK; $5++) {
		final int $6 = $5 + 1;

		final double[] $7 = new double[]{ 
		f[i][$3][$5], f[ip1][$3][$5], 
		f[i][$4][$5], f[ip1][$4][$5], 
		f[i][$3][$6], f[ip1][$3][$6], 
		f[i][$4][$6], f[ip1][$4][$6], 

		dFdX[i][$3][$5], dFdX[ip1][$3][$5], 
		dFdX[i][$4][$5], dFdX[ip1][$4][$5], 
		dFdX[i][$3][$6], dFdX[ip1][$3][$6], 
		dFdX[i][$4][$6], dFdX[ip1][$4][$6], 

		dFdY[i][$3][$5], dFdY[ip1][$3][$5], 
		dFdY[i][$4][$5], dFdY[ip1][$4][$5], 
		dFdY[i][$3][$6], dFdY[ip1][$3][$6], 
		dFdY[i][$4][$6], dFdY[ip1][$4][$6], 

		dFdZ[i][$3][$5], dFdZ[ip1][$3][$5], 
		dFdZ[i][$4][$5], dFdZ[ip1][$4][$5], 
		dFdZ[i][$3][$6], dFdZ[ip1][$3][$6], 
		dFdZ[i][$4][$6], dFdZ[ip1][$4][$6], 

		d2FdXdY[i][$3][$5], d2FdXdY[ip1][$3][$5], 
		d2FdXdY[i][$4][$5], d2FdXdY[ip1][$4][$5], 
		d2FdXdY[i][$3][$6], d2FdXdY[ip1][$3][$6], 
		d2FdXdY[i][$4][$6], d2FdXdY[ip1][$4][$6], 

		d2FdXdZ[i][$3][$5], d2FdXdZ[ip1][$3][$5], 
		d2FdXdZ[i][$4][$5], d2FdXdZ[ip1][$4][$5], 
		d2FdXdZ[i][$3][$6], d2FdXdZ[ip1][$3][$6], 
		d2FdXdZ[i][$4][$6], d2FdXdZ[ip1][$4][$6], 

		d2FdYdZ[i][$3][$5], d2FdYdZ[ip1][$3][$5], 
		d2FdYdZ[i][$4][$5], d2FdYdZ[ip1][$4][$5], 
		d2FdYdZ[i][$3][$6], d2FdYdZ[ip1][$3][$6], 
		d2FdYdZ[i][$4][$6], d2FdYdZ[ip1][$4][$6], 

		d3FdXdYdZ[i][$3][$5], d3FdXdYdZ[ip1][$3][$5], 
		d3FdXdYdZ[i][$4][$5], d3FdXdYdZ[ip1][$4][$5], 
		d3FdXdYdZ[i][$3][$6], d3FdXdYdZ[ip1][$3][$6], 
		d3FdXdYdZ[i][$4][$6], d3FdXdYdZ[ip1][$4][$6] };


		this.splines[i][$3][$5] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($7));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 1; i < max; i++) {
	if (c <= val[i]) {
		return i - 1;
	}
}:for (int $0 = 1; $0 < max; $0++) {
	if (c <= val[$0]) {
		return $0 - 1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}

	for (int j = 0; j < yLen; j++) {
		fX[j][i] = fval[i][j];
	}
}:for (int $1 = 0; $1 < xLen; $1++) {
	if (fval[$1].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$1].length, yLen);
	}

	for (int $2 = 0; $2 < yLen; $2++) {
		fX[$2][$1] = fval[$1][$2];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = xPolyY[i];
	for (int j = 0; j < yLen; j++) {
		fval_2[i][j] = f.value(yval[j]);
	}
}:for (int $12 = 0; $12 < xLen; $12++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $13 = xPolyY[$12];
	for (int $14 = 0; $14 < yLen; $14++) {
		fval_2[$12][$14] = $13.value(yval[$14]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	fval_1[i][j] = f.value(xval[i]);
}:for (int $4 = 0; $4 < xLen; $4++) {
	fval_1[$4][j] = f.value(xval[$4]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < sz; i++) {
	double result = 0;
	final double[] row = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[i];
	for (int j = 0; j < sz; j++) {
		result += row[j] * beta[j];
	}
	a[i] = result;
}:for (int $1 = 0; $1 < sz; $1++) {
	double $2 = 0;
	final double[] $3 = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[$1];
	for (int $4 = 0; $4 < sz; $4++) {
		$2 += $3[$4] * beta[$4];
	}
	a[$1] = $2;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final double y = yval[j];
	dFdX[i][j][k] = f.partialDerivativeX(x, y);
	dFdY[i][j][k] = f.partialDerivativeY(x, y);
	d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
}:for (int $12 = 0; $12 < yLen; $12++) {
	final double $13 = yval[$12];
	dFdX[i][$12][k] = f.partialDerivativeX(x, $13);
	dFdY[i][$12][k] = f.partialDerivativeY(x, $13);
	d2FdXdY[i][$12][k] = f.partialDerivativeXY(x, $13);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; i++) {
	h[i] = x[i + 1] - x[i];
}:for (int $0 = 0; $0 < n; $0++) {
	h[$0] = x[$0 + 1] - x[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
	a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
}:for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $0++) {
	this.a[i][j][$0] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $0)))];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
		for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
			result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
		}
	}
}:for (int $3 = 0; $3 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $3++) {
	for (int $4 = 0; $4 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $4++) {
		for (int $5 = 0; $5 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $5++) {
			result += ((this.a[$3][$4][$5] * pX[$3]) * pY[$4]) * pZ[$5];
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final double z = zval[k];
	for (int i = 0; i < xLen; i++) {
		final double x = xval[i];
		d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
	}
}:for (int $38 = 0; $38 < zLen; $38++) {
	final double $39 = zval[$38];
	for (int $40 = 0; $40 < xLen; $40++) {
		final double $41 = xval[$40];
		d2FdZdX[$40][j][$38] = f.partialDerivativeXY($39, $41);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
	}
}:for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $1++) {
	for (int $2 = 0; $2 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $2++) {
		this.a[$1][$2] = a[$1 + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * $2)];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	result += (coeff[i][j] * pX[i]) * pY[j];
}:for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $0++) {
	result += (coeff[i][$0] * pX[i]) * pY[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		result += (coeff[i][j] * pX[i]) * pY[j];
	}
}:for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $1++) {
	for (int $2 = 0; $2 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $2++) {
		result += (coeff[$1][$2] * pX[$1]) * pY[$2];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		final double c = a[i][j];
		aX[i][j] = i * c;
		aY[i][j] = j * c;
		aXX[i][j] = (i - 1) * aX[i][j];
		aYY[i][j] = (j - 1) * aY[i][j];
		aXY[i][j] = j * aX[i][j];
	}
}:for (int $2 = 0; $2 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $2++) {
	for (int $3 = 0; $3 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $3++) {
		final double $4 = this.a[$2][$3];
		aX[$2][$3] = $2 * $4;
		aY[$2][$3] = $3 * $4;
		aXX[$2][$3] = ($2 - 1) * aX[$2][$3];
		aYY[$2][$3] = ($3 - 1) * aY[$2][$3];
		aXY[$2][$3] = $3 * aX[$2][$3];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[j].derivative();
	for (int i = 0; i < xLen; i++) {
		dFdX[i][j] = f.value(xval[i]);
	}
}:for (int $6 = 0; $6 < yLen; $6++) {
	final org.apache.commons.math3.analysis.UnivariateFunction $7 = ySplineX[$6].derivative();
	for (int $8 = 0; $8 < xLen; $8++) {
		dFdX[$8][$6] = $7.value(xval[$8]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < microsphereElements; i++) {
	microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector()));
}:for (int $2 = 0; $2 < microsphereElements; $2++) {
	this.microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final double v = fval[i][j][k];
	fvalXY[k][i][j] = v;
	fvalZX[j][k][i] = v;
}:for (int $0 = 0; $0 < zLen; $0++) {
	final double $1 = fval[i][j][$0];
	fvalXY[$0][i][j] = $1;
	fvalZX[j][$0][i] = $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final double z = zval[k];
	dFdZ[i][j][k] = f.partialDerivativeY(y, z);
	d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
}:for (int $24 = 0; $24 < zLen; $24++) {
	final double $25 = zval[$24];
	dFdZ[i][j][$24] = f.partialDerivativeY(y, $25);
	d2FdYdZ[i][j][$24] = f.partialDerivativeXY(y, $25);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int iter = 0; iter <= robustnessIters; ++iter) {
	final int[] bandwidthInterval = new int[]{ 0, bandwidthInPoints - 1 };

	for (int i = 0; i < n; ++i) {
		final double x = xval[i];



		if (i > 0) {
			org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
		}

		final int ileft = bandwidthInterval[0];
		final int iright = bandwidthInterval[1];



		final int edge;
		if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
			edge = ileft;
		} else {
			edge = iright;
		}








		double sumWeights = 0;
		double sumX = 0;
		double sumXSquared = 0;
		double sumY = 0;
		double sumXY = 0;
		double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x));
		for (int k = ileft; k <= iright; ++k) {
			final double xk = xval[k];
			final double yk = yval[k];
			final double dist = (k < i) ? x - xk : xk - x;
			final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
			final double xkw = xk * w;
			sumWeights += w;
			sumX += xkw;
			sumXSquared += xk * xkw;
			sumY += yk * w;
			sumXY += yk * xkw;
		}

		final double meanX = sumX / sumWeights;
		final double meanY = sumY / sumWeights;
		final double meanXY = sumXY / sumWeights;
		final double meanXSquared = sumXSquared / sumWeights;

		final double beta;
		if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
			beta = 0;
		} else {
			beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
		}

		final double alpha = meanY - (beta * meanX);

		res[i] = (beta * x) + alpha;
		residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]);
	}



	if (iter == robustnessIters) {
		break;
	}






	java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n);
	java.util.Arrays.sort(sortedResiduals);
	final double medianResidual = sortedResiduals[n / 2];

	if (org.apache.commons.math3.util.FastMath.abs(medianResidual) < accuracy) {
		break;
	}

	for (int i = 0; i < n; ++i) {
		final double arg = residuals[i] / (6 * medianResidual);
		if (arg >= 1) {
			robustnessWeights[i] = 0;
		} else {
			final double w = 1 - (arg * arg);
			robustnessWeights[i] = w * w;
		}
	}
}:for (int $32 = 0; $32 <= this.robustnessIters; ++$32) {
	final int[] $33 = new int[]{ 0, bandwidthInPoints - 1 };

	for (int $34 = 0; $34 < n; ++$34) {
		final double $35 = xval[$34];



		if ($34 > 0) {
			org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, $34, $33);
		}

		final int $36 = $33[0];
		final int $37 = $33[1];



		final int $38;
		if ((xval[$34] - xval[$36]) > (xval[$37] - xval[$34])) {
			$38 = $36;
		} else {
			$38 = $37;
		}








		double $39 = 0;
		double $40 = 0;
		double $41 = 0;
		double $42 = 0;
		double $43 = 0;
		double $44 = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[$38] - $35));
		for (int $45 = $36; $45 <= $37; ++$45) {
			final double $46 = xval[$45];
			final double $47 = yval[$45];
			final double $48 = ($45 < $34) ? $35 - $46 : $46 - $35;
			final double $49 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($48 * $44) * robustnessWeights[$45]) * weights[$45];
			final double $50 = $46 * $49;
			$39 += $49;
			$40 += $50;
			$41 += $46 * $50;
			$42 += $47 * $49;
			$43 += $47 * $50;
		}

		final double $51 = $40 / $39;
		final double $52 = $42 / $39;
		final double $53 = $43 / $39;
		final double $54 = $41 / $39;

		final double $55;
		if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs($54 - ($51 * $51))) < this.accuracy) {
			$55 = 0;
		} else {
			$55 = ($53 - ($51 * $52)) / ($54 - ($51 * $51));
		}

		final double $56 = $52 - ($55 * $51);

		res[$34] = ($55 * $35) + $56;
		residuals[$34] = org.apache.commons.math3.util.FastMath.abs(yval[$34] - res[$34]);
	}



	if ($32 == this.robustnessIters) {
		break;
	}






	java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n);
	java.util.Arrays.sort(sortedResiduals);
	final double $57 = sortedResiduals[n / 2];

	if (org.apache.commons.math3.util.FastMath.abs($57) < this.accuracy) {
		break;
	}

	for (int $58 = 0; $58 < n; ++$58) {
		final double $59 = residuals[$58] / (6 * $57);
		if ($59 >= 1) {
			robustnessWeights[$58] = 0;
		} else {
			final double $60 = 1 - ($59 * $59);
			robustnessWeights[$58] = $60 * $60;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final double y = yval[j];
	for (int k = 0; k < zLen; k++) {
		final double z = zval[k];
		dFdZ[i][j][k] = f.partialDerivativeY(y, z);
		d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
	}
}:for (int $26 = 0; $26 < yLen; $26++) {
	final double $27 = yval[$26];
	for (int $28 = 0; $28 < zLen; $28++) {
		final double $29 = zval[$28];
		dFdZ[i][$26][$28] = f.partialDerivativeY($27, $29);
		d2FdYdZ[i][$26][$28] = f.partialDerivativeXY($27, $29);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < extend; i++) {
	int index = (xval.length - extend) + i;
	x[i] = org.apache.commons.math3.util.MathUtils.reduce(xval[index], period, offset) - period;
	y[i] = yval[index];

	index = (len - extend) + i;
	x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset) + period;
	y[index] = yval[i];
}:for (int $2 = 0; $2 < this.extend; $2++) {
	int $3 = (xval.length - this.extend) + $2;
	x[$2] = org.apache.commons.math3.util.MathUtils.reduce(xval[$3], this.period, offset) - this.period;
	y[$2] = yval[$3];

	$3 = (len - this.extend) + $2;
	x[$3] = org.apache.commons.math3.util.MathUtils.reduce(xval[$2], this.period, offset) + this.period;
	y[$3] = yval[$2];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] tdi = topDiagonal.get(i);
	for (int k = 0; k < polynomials.length; ++k) {
		polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));
}:for (int $2 = 0; $2 < this.topDiagonal.size(); ++$2) {
	double[] $3 = this.topDiagonal.get($2);
	for (int $4 = 0; $4 < polynomials.length; ++$4) {
		polynomials[$4] = polynomials[$4].add(coeff.multiply(polynomial($3[$4])));
	}
	coeff = coeff.multiply(polynomial(-this.abscissae.get($2), 1.0));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < lastJ; j++) {
	final int jp1 = j + 1;
	final double[] beta = new double[]{ 
	f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
	dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
	dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
	d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] };


	splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta));
}:for (int $0 = 0; $0 < lastJ; $0++) {
	final int $1 = $0 + 1;
	final double[] $2 = new double[]{ 
	f[i][$0], f[ip1][$0], f[i][$1], f[ip1][$1], 
	dFdX[i][$0], dFdX[ip1][$0], dFdX[i][$1], dFdX[ip1][$1], 
	dFdY[i][$0], dFdY[ip1][$0], dFdY[i][$1], dFdY[ip1][$1], 
	d2FdXdY[i][$0], d2FdXdY[ip1][$0], d2FdXdY[i][$1], d2FdXdY[ip1][$1] };


	this.splines[i][$0] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients($2));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final int nJ = nextIndex(j, yLen);
	final int pJ = previousIndex(j);
	d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
	fval[pI][nJ]) + fval[pI][pJ]) / 
	((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
}:for (int $13 = 0; $13 < yLen; $13++) {
	final int $14 = nextIndex($13, yLen);
	final int $15 = previousIndex($13);
	d2FdXdY[i][$13] = (((fval[nI][$14] - fval[nI][$15]) - 
	fval[pI][$14]) + fval[pI][$15]) / 
	((xval[nI] - xval[pI]) * (yval[$14] - yval[$15]));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 1; i < n; i++) {
	for (int j = 0; j < (n - i); j++) {
		final double denominator = x[j + i] - x[j];
		divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
	}
	a[i] = divdiff[0];
}:for (int $2 = 1; $2 < n; $2++) {
	for (int $3 = 0; $3 < (n - $2); $3++) {
		final double $4 = x[$3 + $2] - x[$3];
		divdiff[$3] = (divdiff[$3 + 1] - divdiff[$3]) / $4;
	}
	a[$2] = divdiff[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < derivative.length; ++k) {
		derivative[k] += dividedDifference[k] * derivativeCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	derivativeCoeff = valueCoeff + (derivativeCoeff * deltaX);
	valueCoeff *= deltaX;
}:for (int $1 = 0; $1 < this.topDiagonal.size(); ++$1) {
	double[] $2 = this.topDiagonal.get($1);
	for (int $3 = 0; $3 < derivative.length; ++$3) {
		derivative[$3] += $2[$3] * derivativeCoeff;
	}
	final double $4 = x - this.abscissae.get($1);
	derivativeCoeff = valueCoeff + (derivativeCoeff * $4);
	valueCoeff *= $4;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < lastI; i++) {
	if (f[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
	}
	if (dFdX[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
	}
	if (dFdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
	}
	if (dFdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen);
	}
	if (d2FdXdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
	}
	if (d2FdXdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen);
	}
	if (d2FdYdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen);
	}
	if (d3FdXdYdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
	}

	final int ip1 = i + 1;
	for (int j = 0; j < lastJ; j++) {
		if (f[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
		}
		if (dFdX[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
		}
		if (dFdY[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
		}
		if (dFdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
		}
		if (d2FdXdY[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
		}
		if (d2FdXdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
		}
		if (d2FdYdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
		}
		if (d3FdXdYdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
		}

		final int jp1 = j + 1;
		for (int k = 0; k < lastK; k++) {
			final int kp1 = k + 1;

			final double[] beta = new double[]{ 
			f[i][j][k], f[ip1][j][k], 
			f[i][jp1][k], f[ip1][jp1][k], 
			f[i][j][kp1], f[ip1][j][kp1], 
			f[i][jp1][kp1], f[ip1][jp1][kp1], 

			dFdX[i][j][k], dFdX[ip1][j][k], 
			dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
			dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
			dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

			dFdY[i][j][k], dFdY[ip1][j][k], 
			dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
			dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
			dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

			dFdZ[i][j][k], dFdZ[ip1][j][k], 
			dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
			dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
			dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

			d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
			d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
			d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
			d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

			d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
			d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
			d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
			d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

			d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
			d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
			d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
			d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

			d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
			d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
			d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
			d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


			splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
		}
	}
}:for (int $8 = 0; $8 < lastI; $8++) {
	if (f[$8].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$8].length, yLen);
	}
	if (dFdX[$8].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$8].length, yLen);
	}
	if (dFdY[$8].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$8].length, yLen);
	}
	if (dFdZ[$8].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[$8].length, yLen);
	}
	if (d2FdXdY[$8].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$8].length, yLen);
	}
	if (d2FdXdZ[$8].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[$8].length, yLen);
	}
	if (d2FdYdZ[$8].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[$8].length, yLen);
	}
	if (d3FdXdYdZ[$8].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[$8].length, yLen);
	}

	final int $9 = $8 + 1;
	for (int $10 = 0; $10 < lastJ; $10++) {
		if (f[$8][$10].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$8][$10].length, zLen);
		}
		if (dFdX[$8][$10].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$8][$10].length, zLen);
		}
		if (dFdY[$8][$10].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$8][$10].length, zLen);
		}
		if (dFdZ[$8][$10].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[$8][$10].length, zLen);
		}
		if (d2FdXdY[$8][$10].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$8][$10].length, zLen);
		}
		if (d2FdXdZ[$8][$10].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[$8][$10].length, zLen);
		}
		if (d2FdYdZ[$8][$10].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[$8][$10].length, zLen);
		}
		if (d3FdXdYdZ[$8][$10].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[$8][$10].length, zLen);
		}

		final int $11 = $10 + 1;
		for (int $12 = 0; $12 < lastK; $12++) {
			final int $13 = $12 + 1;

			final double[] $14 = new double[]{ 
			f[$8][$10][$12], f[$9][$10][$12], 
			f[$8][$11][$12], f[$9][$11][$12], 
			f[$8][$10][$13], f[$9][$10][$13], 
			f[$8][$11][$13], f[$9][$11][$13], 

			dFdX[$8][$10][$12], dFdX[$9][$10][$12], 
			dFdX[$8][$11][$12], dFdX[$9][$11][$12], 
			dFdX[$8][$10][$13], dFdX[$9][$10][$13], 
			dFdX[$8][$11][$13], dFdX[$9][$11][$13], 

			dFdY[$8][$10][$12], dFdY[$9][$10][$12], 
			dFdY[$8][$11][$12], dFdY[$9][$11][$12], 
			dFdY[$8][$10][$13], dFdY[$9][$10][$13], 
			dFdY[$8][$11][$13], dFdY[$9][$11][$13], 

			dFdZ[$8][$10][$12], dFdZ[$9][$10][$12], 
			dFdZ[$8][$11][$12], dFdZ[$9][$11][$12], 
			dFdZ[$8][$10][$13], dFdZ[$9][$10][$13], 
			dFdZ[$8][$11][$13], dFdZ[$9][$11][$13], 

			d2FdXdY[$8][$10][$12], d2FdXdY[$9][$10][$12], 
			d2FdXdY[$8][$11][$12], d2FdXdY[$9][$11][$12], 
			d2FdXdY[$8][$10][$13], d2FdXdY[$9][$10][$13], 
			d2FdXdY[$8][$11][$13], d2FdXdY[$9][$11][$13], 

			d2FdXdZ[$8][$10][$12], d2FdXdZ[$9][$10][$12], 
			d2FdXdZ[$8][$11][$12], d2FdXdZ[$9][$11][$12], 
			d2FdXdZ[$8][$10][$13], d2FdXdZ[$9][$10][$13], 
			d2FdXdZ[$8][$11][$13], d2FdXdZ[$9][$11][$13], 

			d2FdYdZ[$8][$10][$12], d2FdYdZ[$9][$10][$12], 
			d2FdYdZ[$8][$11][$12], d2FdYdZ[$9][$11][$12], 
			d2FdYdZ[$8][$10][$13], d2FdYdZ[$9][$10][$13], 
			d2FdYdZ[$8][$11][$13], d2FdYdZ[$9][$11][$13], 

			d3FdXdYdZ[$8][$10][$12], d3FdXdYdZ[$9][$10][$12], 
			d3FdXdYdZ[$8][$11][$12], d3FdXdYdZ[$9][$11][$12], 
			d3FdXdYdZ[$8][$10][$13], d3FdXdYdZ[$9][$10][$13], 
			d3FdXdYdZ[$8][$11][$13], d3FdXdYdZ[$9][$11][$13] };


			this.splines[$8][$10][$12] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($14));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = yPolyX[j];
	for (int i = 0; i < xLen; i++) {
		fval_1[i][j] = f.value(xval[i]);
	}
}:for (int $5 = 0; $5 < yLen; $5++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $6 = yPolyX[$5];
	for (int $7 = 0; $7 < xLen; $7++) {
		fval_1[$7][$5] = $6.value(xval[$7]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
}:for (int $0 = 0; $0 < y.length; ++$0) {
	y[$0] *= inv;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
}:for (int $2 = 0; $2 < this.topDiagonal.size(); ++$2) {
	double[] $3 = this.topDiagonal.get($2);
	for (int $4 = 0; $4 < value.length; ++$4) {
		value[$4] += $3[$4] * valueCoeff;
	}
	final double $5 = x - this.abscissae.get($2);
	valueCoeff *= $5;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; i++) {
	coefficients[0] = y[i];
	coefficients[1] = b[i];
	coefficients[2] = c[i];
	coefficients[3] = d[i];
	polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}:for (int $3 = 0; $3 < n; $3++) {
	coefficients[0] = y[$3];
	coefficients[1] = b[$3];
	coefficients[2] = c[$3];
	coefficients[3] = d[$3];
	polynomials[$3] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
	for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
		a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
	}
}:for (int $1 = 0; $1 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $1++) {
	for (int $2 = 0; $2 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $2++) {
		this.a[i][$1][$2] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * ($1 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $2)))];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < (n - i); j++) {
	final double denominator = x[j + i] - x[j];
	divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
}:for (int $0 = 0; $0 < (n - i); $0++) {
	final double $1 = x[$0 + i] - x[$0];
	divdiff[$0] = (divdiff[$0 + 1] - divdiff[$0]) / $1;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final int nK = nextIndex(k, zLen);
	final int pK = previousIndex(k);


	d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
	fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
	fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
	fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
	(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
}:for (int $48 = 0; $48 < zLen; $48++) {
	final int $49 = nextIndex($48, zLen);
	final int $50 = previousIndex($48);


	d3FdXdYdZ[i][j][$48] = (((((((fval[nI][nJ][$49] - fval[nI][pJ][$49]) - 
	fval[pI][nJ][$49]) + fval[pI][pJ][$49]) - 
	fval[nI][nJ][$50]) + fval[nI][pJ][$50]) + 
	fval[pI][nJ][$50]) - fval[pI][pJ][$50]) / 
	(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[$49] - zval[$50]));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
			x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

}:for (int $6 = 0; $6 < value.length; ++$6) {

	final double[] $7 = value[$6].clone();
	if ($6 > 1) {
		double $8 = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial($6);
		for (int $9 = 0; $9 < $7.length; ++$9) {
			$7[$9] *= $8;
		}
	}


	final int $10 = this.abscissae.size();
	this.bottomDiagonal.add($10 - $6, $7);
	double[] $11 = $7;
	for (int $12 = $6; $12 < $10; ++$12) {
		final double[] $13 = this.bottomDiagonal.get($10 - ($12 + 1));
		final double $14 = 1.0 / (x - this.abscissae.get($10 - ($12 + 1)));
		if (java.lang.Double.isInfinite($14)) {
			throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
			x);
		}
		for (int $15 = 0; $15 < $7.length; ++$15) {
			$13[$15] = $14 * ($11[$15] - $13[$15]);
		}
		$11 = $13;
	}


	this.topDiagonal.add($11.clone());


	this.abscissae.add(x);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < 16; j++) {
	result += row[j] * beta[j];
}:for (int $0 = 0; $0 < 16; $0++) {
	result += row[$0] * beta[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; ++i) {
	final double x = xval[i];



	if (i > 0) {
		org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
	}

	final int ileft = bandwidthInterval[0];
	final int iright = bandwidthInterval[1];



	final int edge;
	if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
		edge = ileft;
	} else {
		edge = iright;
	}








	double sumWeights = 0;
	double sumX = 0;
	double sumXSquared = 0;
	double sumY = 0;
	double sumXY = 0;
	double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x));
	for (int k = ileft; k <= iright; ++k) {
		final double xk = xval[k];
		final double yk = yval[k];
		final double dist = (k < i) ? x - xk : xk - x;
		final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
		final double xkw = xk * w;
		sumWeights += w;
		sumX += xkw;
		sumXSquared += xk * xkw;
		sumY += yk * w;
		sumXY += yk * xkw;
	}

	final double meanX = sumX / sumWeights;
	final double meanY = sumY / sumWeights;
	final double meanXY = sumXY / sumWeights;
	final double meanXSquared = sumXSquared / sumWeights;

	final double beta;
	if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
		beta = 0;
	} else {
		beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
	}

	final double alpha = meanY - (beta * meanX);

	res[i] = (beta * x) + alpha;
	residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]);
}:for (int $6 = 0; $6 < n; ++$6) {
	final double $7 = xval[$6];



	if ($6 > 0) {
		org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, $6, bandwidthInterval);
	}

	final int $8 = bandwidthInterval[0];
	final int $9 = bandwidthInterval[1];



	final int $10;
	if ((xval[$6] - xval[$8]) > (xval[$9] - xval[$6])) {
		$10 = $8;
	} else {
		$10 = $9;
	}








	double $11 = 0;
	double $12 = 0;
	double $13 = 0;
	double $14 = 0;
	double $15 = 0;
	double $16 = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[$10] - $7));
	for (int $17 = $8; $17 <= $9; ++$17) {
		final double $18 = xval[$17];
		final double $19 = yval[$17];
		final double $20 = ($17 < $6) ? $7 - $18 : $18 - $7;
		final double $21 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($20 * $16) * robustnessWeights[$17]) * weights[$17];
		final double $22 = $18 * $21;
		$11 += $21;
		$12 += $22;
		$13 += $18 * $22;
		$14 += $19 * $21;
		$15 += $19 * $22;
	}

	final double $23 = $12 / $11;
	final double $24 = $14 / $11;
	final double $25 = $15 / $11;
	final double $26 = $13 / $11;

	final double $27;
	if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs($26 - ($23 * $23))) < this.accuracy) {
		$27 = 0;
	} else {
		$27 = ($25 - ($23 * $24)) / ($26 - ($23 * $23));
	}

	final double $28 = $24 - ($27 * $23);

	res[$6] = ($27 * $7) + $28;
	residuals[$6] = org.apache.commons.math3.util.FastMath.abs(yval[$6] - res[$6]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
	result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
}:for (int $0 = 0; $0 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $0++) {
	result += ((this.a[i][j][$0] * pX[i]) * pY[j]) * pZ[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < polynomials.length; ++i) {
	polynomials[i] = zero;
}:for (int $0 = 0; $0 < polynomials.length; ++$0) {
	polynomials[$0] = zero;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	fval_2[i][j] = f.value(yval[j]);
}:for (int $11 = 0; $11 < yLen; $11++) {
	fval_2[i][$11] = f.value(yval[$11]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}
}:for (int $0 = 0; $0 < xLen; $0++) {
	if (fval[$0].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$0].length, yLen);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k]);
}:for (int $11 = 0; $11 < zLen; $11++) {
	zSplineXY[$11] = bsi.interpolate(xval, yval, fvalXY[$11]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i]);
}:for (int $9 = 0; $9 < xLen; $9++) {
	xSplineYZ[$9] = bsi.interpolate(yval, zval, fval[$9]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xval.length; i++) {
	final int index = i + extend;
	x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset);
	y[index] = yval[i];
}:for (int $0 = 0; $0 < xval.length; $0++) {
	final int $1 = $0 + this.extend;
	x[$1] = org.apache.commons.math3.util.MathUtils.reduce(xval[$0], this.period, offset);
	y[$1] = yval[$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < lastI; i++) {
	if (f[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
	}
	if (dFdX[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
	}
	if (dFdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
	}
	if (d2FdXdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
	}
	final int ip1 = i + 1;
	for (int j = 0; j < lastJ; j++) {
		final int jp1 = j + 1;
		final double[] beta = new double[]{ 
		f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
		dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
		dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
		d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] };


		splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta));
	}
}:for (int $3 = 0; $3 < lastI; $3++) {
	if (f[$3].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$3].length, yLen);
	}
	if (dFdX[$3].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$3].length, yLen);
	}
	if (dFdY[$3].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$3].length, yLen);
	}
	if (d2FdXdY[$3].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$3].length, yLen);
	}
	final int $4 = $3 + 1;
	for (int $5 = 0; $5 < lastJ; $5++) {
		final int $6 = $5 + 1;
		final double[] $7 = new double[]{ 
		f[$3][$5], f[$4][$5], f[$3][$6], f[$4][$6], 
		dFdX[$3][$5], dFdX[$4][$5], dFdX[$3][$6], dFdX[$4][$6], 
		dFdY[$3][$5], dFdY[$4][$5], dFdY[$3][$6], dFdY[$4][$6], 
		d2FdXdY[$3][$5], d2FdXdY[$4][$5], d2FdXdY[$3][$6], d2FdXdY[$4][$6] };


		this.splines[$3][$5] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients($7));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < lastJ; j++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j];
	partialDerivatives[0][i][j] = f.partialDerivativeX();
	partialDerivatives[1][i][j] = f.partialDerivativeY();
	partialDerivatives[2][i][j] = f.partialDerivativeXX();
	partialDerivatives[3][i][j] = f.partialDerivativeYY();
	partialDerivatives[4][i][j] = f.partialDerivativeXY();
}:for (int $0 = 0; $0 < lastJ; $0++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction $1 = this.splines[i][$0];
	this.partialDerivatives[0][i][$0] = $1.partialDerivativeX();
	this.partialDerivatives[1][i][$0] = $1.partialDerivativeY();
	this.partialDerivatives[2][i][$0] = $1.partialDerivativeXX();
	this.partialDerivatives[3][i][$0] = $1.partialDerivativeYY();
	this.partialDerivatives[4][i][$0] = $1.partialDerivativeXY();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = zSplineXY[k];
	for (int i = 0; i < xLen; i++) {
		final double x = xval[i];
		for (int j = 0; j < yLen; j++) {
			final double y = yval[j];
			dFdX[i][j][k] = f.partialDerivativeX(x, y);
			dFdY[i][j][k] = f.partialDerivativeY(x, y);
			d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
		}
	}
}:for (int $18 = 0; $18 < zLen; $18++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $19 = zSplineXY[$18];
	for (int $20 = 0; $20 < xLen; $20++) {
		final double $21 = xval[$20];
		for (int $22 = 0; $22 < yLen; $22++) {
			final double $23 = yval[$22];
			dFdX[$20][$22][$18] = $19.partialDerivativeX($21, $23);
			dFdY[$20][$22][$18] = $19.partialDerivativeY($21, $23);
			d2FdXdY[$20][$22][$18] = $19.partialDerivativeXY($21, $23);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	fX[j][i] = fval[i][j];
}:for (int $0 = 0; $0 < yLen; $0++) {
	fX[$0][i] = fval[i][$0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; ++i) {
	final double arg = residuals[i] / (6 * medianResidual);
	if (arg >= 1) {
		robustnessWeights[i] = 0;
	} else {
		final double w = 1 - (arg * arg);
		robustnessWeights[i] = w * w;
	}
}:for (int $29 = 0; $29 < n; ++$29) {
	final double $30 = residuals[$29] / (6 * medianResidual);
	if ($30 >= 1) {
		robustnessWeights[$29] = 0;
	} else {
		final double $31 = 1 - ($30 * $30);
		robustnessWeights[$29] = $31 * $31;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final int nI = nextIndex(i, xLen);
	final int pI = previousIndex(i);
	for (int j = 0; j < yLen; j++) {
		final int nJ = nextIndex(j, yLen);
		final int pJ = previousIndex(j);
		for (int k = 0; k < zLen; k++) {
			final int nK = nextIndex(k, zLen);
			final int pK = previousIndex(k);


			d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
			fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
			fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
			fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
			(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
		}
	}
}:for (int $57 = 0; $57 < xLen; $57++) {
	final int $58 = nextIndex($57, xLen);
	final int $59 = previousIndex($57);
	for (int $60 = 0; $60 < yLen; $60++) {
		final int $61 = nextIndex($60, yLen);
		final int $62 = previousIndex($60);
		for (int $63 = 0; $63 < zLen; $63++) {
			final int $64 = nextIndex($63, zLen);
			final int $65 = previousIndex($63);


			d3FdXdYdZ[$57][$60][$63] = (((((((fval[$58][$61][$64] - fval[$58][$62][$64]) - 
			fval[$59][$61][$64]) + fval[$59][$62][$64]) - 
			fval[$58][$61][$65]) + fval[$58][$62][$65]) + 
			fval[$59][$61][$65]) - fval[$59][$62][$65]) / 
			(((xval[$58] - xval[$59]) * (yval[$61] - yval[$62])) * (zval[$64] - zval[$65]));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < lastI; i++) {
	for (int j = 0; j < lastJ; j++) {
		final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j];
		partialDerivatives[0][i][j] = f.partialDerivativeX();
		partialDerivatives[1][i][j] = f.partialDerivativeY();
		partialDerivatives[2][i][j] = f.partialDerivativeXX();
		partialDerivatives[3][i][j] = f.partialDerivativeYY();
		partialDerivatives[4][i][j] = f.partialDerivativeXY();
	}
}:for (int $2 = 0; $2 < lastI; $2++) {
	for (int $3 = 0; $3 < lastJ; $3++) {
		final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction $4 = this.splines[$2][$3];
		this.partialDerivatives[0][$2][$3] = $4.partialDerivativeX();
		this.partialDerivatives[1][$2][$3] = $4.partialDerivativeY();
		this.partialDerivatives[2][$2][$3] = $4.partialDerivativeXX();
		this.partialDerivatives[3][$2][$3] = $4.partialDerivativeYY();
		this.partialDerivatives[4][$2][$3] = $4.partialDerivativeXY();
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; i++) {
	coefficients[0] = y[i];
	coefficients[1] = m[i];
	polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}:for (int $1 = 0; $1 < n; $1++) {
	coefficients[0] = y[$1];
	coefficients[1] = m[$1];
	polynomials[$1] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	xFitter.addObservedPoint(1, xval[i], fval[i][j]);
}:for (int $1 = 0; $1 < xLen; $1++) {
	this.xFitter.addObservedPoint(1, xval[$1], fval[$1][j]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	ySplineX[j] = spInterpolator.interpolate(xval, fX[j]);
}:for (int $3 = 0; $3 < yLen; $3++) {
	ySplineX[$3] = spInterpolator.interpolate(xval, fX[$3]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = n - 1; j >= 0; j--) {
	c[j] = z[j] - (mu[j] * c[j + 1]);
	b[j] = ((y[j + 1] - y[j]) / h[j]) - ((h[j] * (c[j + 1] + (2.0 * c[j]))) / 3.0);
	d[j] = (c[j + 1] - c[j]) / (3.0 * h[j]);
}:for (int $2 = n - 1; $2 >= 0; $2--) {
	c[$2] = z[$2] - (mu[$2] * c[$2 + 1]);
	b[$2] = ((y[$2 + 1] - y[$2]) / h[$2]) - ((h[$2] * (c[$2 + 1] + (2.0 * c[$2]))) / 3.0);
	d[$2] = (c[$2 + 1] - c[$2]) / (3.0 * h[$2]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final double x = xval[i];
	for (int j = 0; j < yLen; j++) {
		final double y = yval[j];
		dFdX[i][j][k] = f.partialDerivativeX(x, y);
		dFdY[i][j][k] = f.partialDerivativeY(x, y);
		d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
	}
}:for (int $14 = 0; $14 < xLen; $14++) {
	final double $15 = xval[$14];
	for (int $16 = 0; $16 < yLen; $16++) {
		final double $17 = yval[$16];
		dFdX[$14][$16][k] = f.partialDerivativeX($15, $17);
		dFdY[$14][$16][k] = f.partialDerivativeY($15, $17);
		d2FdXdY[$14][$16][k] = f.partialDerivativeXY($15, $17);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < lastK; k++) {
	final int kp1 = k + 1;

	final double[] beta = new double[]{ 
	f[i][j][k], f[ip1][j][k], 
	f[i][jp1][k], f[ip1][jp1][k], 
	f[i][j][kp1], f[ip1][j][kp1], 
	f[i][jp1][kp1], f[ip1][jp1][kp1], 

	dFdX[i][j][k], dFdX[ip1][j][k], 
	dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
	dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
	dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

	dFdY[i][j][k], dFdY[ip1][j][k], 
	dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
	dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
	dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

	dFdZ[i][j][k], dFdZ[ip1][j][k], 
	dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
	dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
	dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

	d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
	d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
	d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
	d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

	d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
	d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
	d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
	d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

	d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
	d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
	d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
	d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

	d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
	d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
	d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
	d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


	splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
}:for (int $0 = 0; $0 < lastK; $0++) {
	final int $1 = $0 + 1;

	final double[] $2 = new double[]{ 
	f[i][j][$0], f[ip1][j][$0], 
	f[i][jp1][$0], f[ip1][jp1][$0], 
	f[i][j][$1], f[ip1][j][$1], 
	f[i][jp1][$1], f[ip1][jp1][$1], 

	dFdX[i][j][$0], dFdX[ip1][j][$0], 
	dFdX[i][jp1][$0], dFdX[ip1][jp1][$0], 
	dFdX[i][j][$1], dFdX[ip1][j][$1], 
	dFdX[i][jp1][$1], dFdX[ip1][jp1][$1], 

	dFdY[i][j][$0], dFdY[ip1][j][$0], 
	dFdY[i][jp1][$0], dFdY[ip1][jp1][$0], 
	dFdY[i][j][$1], dFdY[ip1][j][$1], 
	dFdY[i][jp1][$1], dFdY[ip1][jp1][$1], 

	dFdZ[i][j][$0], dFdZ[ip1][j][$0], 
	dFdZ[i][jp1][$0], dFdZ[ip1][jp1][$0], 
	dFdZ[i][j][$1], dFdZ[ip1][j][$1], 
	dFdZ[i][jp1][$1], dFdZ[ip1][jp1][$1], 

	d2FdXdY[i][j][$0], d2FdXdY[ip1][j][$0], 
	d2FdXdY[i][jp1][$0], d2FdXdY[ip1][jp1][$0], 
	d2FdXdY[i][j][$1], d2FdXdY[ip1][j][$1], 
	d2FdXdY[i][jp1][$1], d2FdXdY[ip1][jp1][$1], 

	d2FdXdZ[i][j][$0], d2FdXdZ[ip1][j][$0], 
	d2FdXdZ[i][jp1][$0], d2FdXdZ[ip1][jp1][$0], 
	d2FdXdZ[i][j][$1], d2FdXdZ[ip1][j][$1], 
	d2FdXdZ[i][jp1][$1], d2FdXdZ[ip1][jp1][$1], 

	d2FdYdZ[i][j][$0], d2FdYdZ[ip1][j][$0], 
	d2FdYdZ[i][jp1][$0], d2FdYdZ[ip1][jp1][$0], 
	d2FdYdZ[i][j][$1], d2FdYdZ[ip1][j][$1], 
	d2FdYdZ[i][jp1][$1], d2FdYdZ[ip1][jp1][$1], 

	d3FdXdYdZ[i][j][$0], d3FdXdYdZ[ip1][j][$0], 
	d3FdXdYdZ[i][jp1][$0], d3FdXdYdZ[ip1][jp1][$0], 
	d3FdXdYdZ[i][j][$1], d3FdXdYdZ[ip1][j][$1], 
	d3FdXdYdZ[i][jp1][$1], d3FdXdYdZ[ip1][jp1][$1] };


	this.splines[i][j][$0] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($2));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < derivative.length; ++k) {
	derivative[k] += dividedDifference[k] * derivativeCoeff;
}:for (int $0 = 0; $0 < derivative.length; ++$0) {
	derivative[$0] += dividedDifference[$0] * derivativeCoeff;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = ySplineZX[j];
	for (int k = 0; k < zLen; k++) {
		final double z = zval[k];
		for (int i = 0; i < xLen; i++) {
			final double x = xval[i];
			d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
		}
	}
}:for (int $42 = 0; $42 < yLen; $42++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $43 = ySplineZX[$42];
	for (int $44 = 0; $44 < zLen; $44++) {
		final double $45 = zval[$44];
		for (int $46 = 0; $46 < xLen; $46++) {
			final double $47 = xval[$46];
			d2FdZdX[$46][$42][$44] = $43.partialDerivativeXY($45, $47);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}

	for (int j = 0; j < yLen; j++) {
		if (fval[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
		}

		for (int k = 0; k < zLen; k++) {
			final double v = fval[i][j][k];
			fvalXY[k][i][j] = v;
			fvalZX[j][k][i] = v;
		}
	}
}:for (int $5 = 0; $5 < xLen; $5++) {
	if (fval[$5].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$5].length, yLen);
	}

	for (int $6 = 0; $6 < yLen; $6++) {
		if (fval[$5][$6].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$5][$6].length, zLen);
		}

		for (int $7 = 0; $7 < zLen; $7++) {
			final double $8 = fval[$5][$6][$7];
			fvalXY[$7][$5][$6] = $8;
			fvalZX[$6][$7][$5] = $8;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	yFitter.clearObservations();
	for (int j = 0; j < yLen; j++) {
		yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);
	}

	xPolyY[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(yFitter.fit());
}:for (int $9 = 0; $9 < xLen; $9++) {
	this.yFitter.clearObservations();
	for (int $10 = 0; $10 < yLen; $10++) {
		this.yFitter.addObservedPoint(1, yval[$10], fval_1[$9][$10]);
	}

	xPolyY[$9] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(this.yFitter.fit());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	dFdX[i][j] = f.value(xval[i]);
}:for (int $5 = 0; $5 < xLen; $5++) {
	dFdX[$5][j] = f.value(xval[$5]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#derivative
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#derivative
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#checkAllFiniteReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#checkAllFiniteReal
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#searchIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#searchIndex
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DividedDifferenceInterpolator#computeDividedDifference
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DividedDifferenceInterpolator#computeDividedDifference
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LinearInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LinearInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnivariatePeriodicInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnivariatePeriodicInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#apply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#apply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DividedDifferenceInterpolator#computeDividedDifference
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: DividedDifferenceInterpolator#computeDividedDifference
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#derivative
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#derivative
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MicrosphereInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MicrosphereInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LinearInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LinearInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#apply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#apply
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#getPolynomials
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction#computeSplineCoefficients
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SmoothingPolynomialBicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnivariatePeriodicInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: UnivariatePeriodicInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MicrosphereInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: MicrosphereInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction#value
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction#computePartialDerivatives
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolator#interpolate
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: HermiteInterpolator#addSamplePoint
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: BicubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: LoessInterpolator#smooth
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: TricubicSplineInterpolatingFunction
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	final double c = a[i][j];
	aX[i][j] = i * c;
	aY[i][j] = j * c;
	aXX[i][j] = (i - 1) * aX[i][j];
	aYY[i][j] = (j - 1) * aY[i][j];
	aXY[i][j] = j * aX[i][j];
}:for (int $5 = 0; $5 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $5++) {
	final double $6 = this.a[i][$5];
	aX[i][$5] = i * $6;
	aY[i][$5] = $5 * $6;
	aXX[i][$5] = (i - 1) * aX[i][$5];
	aYY[i][$5] = ($5 - 1) * aY[i][$5];
	aXY[i][$5] = $5 * aX[i][$5];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < value.length; ++k) {
	value[k] += dividedDifference[k] * valueCoeff;
}:for (int $6 = 0; $6 < value.length; ++$6) {
	value[$6] += dividedDifference[$6] * valueCoeff;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final double x = xval[i];
	d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
}:for (int $71 = 0; $71 < xLen; $71++) {
	final double $72 = xval[$71];
	d2FdZdX[$71][j][k] = f.partialDerivativeXY(z, $72);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);
}:for (int $18 = 0; $18 < yLen; $18++) {
	this.yFitter.addObservedPoint(1, yval[$18], fval_1[i][$18]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = xSplineYZ[i];
	for (int j = 0; j < yLen; j++) {
		final double y = yval[j];
		for (int k = 0; k < zLen; k++) {
			final double z = zval[k];
			dFdZ[i][j][k] = f.partialDerivativeY(y, z);
			d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
		}
	}
}:for (int $100 = 0; $100 < xLen; $100++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $101 = xSplineYZ[$100];
	for (int $102 = 0; $102 < yLen; $102++) {
		final double $103 = yval[$102];
		for (int $104 = 0; $104 < zLen; $104++) {
			final double $105 = zval[$104];
			dFdZ[$100][$102][$104] = $101.partialDerivativeY($103, $105);
			d2FdYdZ[$100][$102][$104] = $101.partialDerivativeXY($103, $105);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < sz; j++) {
	result += row[j] * beta[j];
}:for (int $5 = 0; $5 < sz; $5++) {
	result += row[$5] * beta[$5];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < 16; i++) {
	double result = 0;
	final double[] row = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[i];
	for (int j = 0; j < 16; j++) {
		result += row[j] * beta[j];
	}
	a[i] = result;
}:for (int $6 = 0; $6 < 16; $6++) {
	double $7 = 0;
	final double[] $8 = org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction.AINV[$6];
	for (int $9 = 0; $9 < 16; $9++) {
		$7 += $8[$9] * beta[$9];
	}
	a[$6] = $7;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final int nJ = nextIndex(j, yLen);
	final int pJ = previousIndex(j);
	for (int k = 0; k < zLen; k++) {
		final int nK = nextIndex(k, zLen);
		final int pK = previousIndex(k);


		d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
		fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
		fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
		fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
		(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
	}
}:for (int $119 = 0; $119 < yLen; $119++) {
	final int $120 = nextIndex($119, yLen);
	final int $121 = previousIndex($119);
	for (int $122 = 0; $122 < zLen; $122++) {
		final int $123 = nextIndex($122, zLen);
		final int $124 = previousIndex($122);


		d3FdXdYdZ[i][$119][$122] = (((((((fval[nI][$120][$123] - fval[nI][$121][$123]) - 
		fval[pI][$120][$123]) + fval[pI][$121][$123]) - 
		fval[nI][$120][$124]) + fval[nI][$121][$124]) + 
		fval[pI][$120][$124]) - fval[pI][$121][$124]) / 
		(((xval[nI] - xval[pI]) * (yval[$120] - yval[$121])) * (zval[$123] - zval[$124]));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	xFitter.clearObservations();
	for (int i = 0; i < xLen; i++) {
		xFitter.addObservedPoint(1, xval[i], fval[i][j]);
	}

	yPolyX[j] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(xFitter.fit());
}:for (int $26 = 0; $26 < yLen; $26++) {
	this.xFitter.clearObservations();
	for (int $27 = 0; $27 < xLen; $27++) {
		this.xFitter.addObservedPoint(1, xval[$27], fval[$27][$26]);
	}

	yPolyX[$26] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(this.xFitter.fit());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	dFdY[i][j] = f.value(yval[j]);
}:for (int $24 = 0; $24 < yLen; $24++) {
	dFdY[i][$24] = f.value(yval[$24]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = ileft; k <= iright; ++k) {
	final double xk = xval[k];
	final double yk = yval[k];
	final double dist = (k < i) ? x - xk : xk - x;
	final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
	final double xkw = xk * w;
	sumWeights += w;
	sumX += xkw;
	sumXSquared += xk * xkw;
	sumY += yk * w;
	sumXY += yk * xkw;
}:for (int $64 = ileft; $64 <= iright; ++$64) {
	final double $65 = xval[$64];
	final double $66 = yval[$64];
	final double $67 = ($64 < i) ? x - $65 : $65 - x;
	final double $68 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($67 * denom) * robustnessWeights[$64]) * weights[$64];
	final double $69 = $65 * $68;
	sumWeights += $68;
	sumX += $69;
	sumXSquared += $65 * $69;
	sumY += $66 * $68;
	sumXY += $66 * $69;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xval.length; ++i) {
	final double[] xvalI = xval[i];
	if (xvalI == null) {
		throw new org.apache.commons.math3.exception.NullArgumentException();
	}
	if (xvalI.length != dimension) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(xvalI.length, dimension);
	}

	samples.put(new org.apache.commons.math3.linear.ArrayRealVector(xvalI), yval[i]);
}:for (int $4 = 0; $4 < xval.length; ++$4) {
	final double[] $5 = xval[$4];
	if ($5 == null) {
		throw new org.apache.commons.math3.exception.NullArgumentException();
	}
	if ($5.length != this.dimension) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException($5.length, this.dimension);
	}

	this.samples.put(new org.apache.commons.math3.linear.ArrayRealVector($5), yval[$4]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
	for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
		result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
	}
}:for (int $7 = 0; $7 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $7++) {
	for (int $8 = 0; $8 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $8++) {
		result += ((this.a[i][$7][$8] * pX[i]) * pY[$7]) * pZ[$8];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.UnivariateFunction f = xSplineY[i].derivative();
	for (int j = 0; j < yLen; j++) {
		dFdY[i][j] = f.value(yval[j]);
	}
}:for (int $30 = 0; $30 < xLen; $30++) {
	final org.apache.commons.math3.analysis.UnivariateFunction $31 = xSplineY[$30].derivative();
	for (int $32 = 0; $32 < yLen; $32++) {
		dFdY[$30][$32] = $31.value(yval[$32]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	xSplineY[i] = spInterpolator.interpolate(yval, fval[i]);
}:for (int $26 = 0; $26 < xLen; $26++) {
	xSplineY[$26] = spInterpolator.interpolate(yval, fval[$26]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
}:for (int $3 = 0; $3 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $3++) {
	this.a[i][$3] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * $3)];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < y.length; ++k) {
	bottom1[k] = inv * (bottom0[k] - bottom1[k]);
}:for (int $17 = 0; $17 < y.length; ++$17) {
	bottom1[$17] = inv * (bottom0[$17] - bottom1[$17]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; i++) {
	m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);
}:for (int $2 = 0; $2 < n; $2++) {
	m[$2] = (y[$2 + 1] - y[$2]) / (x[$2 + 1] - x[$2]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	if (fval[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
	}

	for (int k = 0; k < zLen; k++) {
		final double v = fval[i][j][k];
		fvalXY[k][i][j] = v;
		fvalZX[j][k][i] = v;
	}
}:for (int $91 = 0; $91 < yLen; $91++) {
	if (fval[i][$91].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][$91].length, zLen);
	}

	for (int $92 = 0; $92 < zLen; $92++) {
		final double $93 = fval[i][$91][$92];
		fvalXY[$92][i][$91] = $93;
		fvalZX[$91][$92][i] = $93;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 1; i < n; i++) {
	g = (2.0 * (x[i + 1] - x[i - 1])) - (h[i - 1] * mu[i - 1]);
	mu[i] = h[i] / g;
	z[i] = (((3.0 * (((y[i + 1] * h[i - 1]) - (y[i] * (x[i + 1] - x[i - 1]))) + (y[i - 1] * h[i]))) / 
	(h[i - 1] * h[i])) - (h[i - 1] * z[i - 1])) / g;
}:for (int $7 = 1; $7 < n; $7++) {
	g = (2.0 * (x[$7 + 1] - x[$7 - 1])) - (h[$7 - 1] * mu[$7 - 1]);
	mu[$7] = h[$7] / g;
	z[$7] = (((3.0 * (((y[$7 + 1] * h[$7 - 1]) - (y[$7] * (x[$7 + 1] - x[$7 - 1]))) + (y[$7 - 1] * h[$7]))) / 
	(h[$7 - 1] * h[$7])) - (h[$7 - 1] * z[$7 - 1])) / g;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
		for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
			a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
		}
	}
}:for (int $9 = 0; $9 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $9++) {
	for (int $10 = 0; $10 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $10++) {
		for (int $11 = 0; $11 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $11++) {
			this.a[$9][$10][$11] = aV[$9 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * ($10 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $11)))];
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < polynomials.length; ++k) {
	polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
}:for (int $6 = 0; $6 < polynomials.length; ++$6) {
	polynomials[$6] = polynomials[$6].add(coeff.multiply(polynomial(tdi[$6])));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < values.length; i++) {
	org.apache.commons.math3.util.MathUtils.checkFinite(values[i]);
}:for (int $1 = 0; $1 < values.length; $1++) {
	org.apache.commons.math3.util.MathUtils.checkFinite(values[$1]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	ySplineZX[j] = bsi.interpolate(zval, xval, fvalZX[j]);
}:for (int $68 = 0; $68 < yLen; $68++) {
	ySplineZX[$68] = bsi.interpolate(zval, xval, fvalZX[$68]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final int nI = nextIndex(i, xLen);
	final int pI = previousIndex(i);
	for (int j = 0; j < yLen; j++) {
		final int nJ = nextIndex(j, yLen);
		final int pJ = previousIndex(j);
		d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
		fval[pI][nJ]) + fval[pI][pJ]) / 
		((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
	}
}:for (int $38 = 0; $38 < xLen; $38++) {
	final int $39 = nextIndex($38, xLen);
	final int $40 = previousIndex($38);
	for (int $41 = 0; $41 < yLen; $41++) {
		final int $42 = nextIndex($41, yLen);
		final int $43 = previousIndex($41);
		d2FdXdY[$38][$41] = (((fval[$39][$42] - fval[$39][$43]) - 
		fval[$40][$42]) + fval[$40][$43]) / 
		((xval[$39] - xval[$40]) * (yval[$42] - yval[$43]));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = i; j < n; ++j) {
	final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
	final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
	if (java.lang.Double.isInfinite(inv)) {
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
		x);
	}
	for (int k = 0; k < y.length; ++k) {
		bottom1[k] = inv * (bottom0[k] - bottom1[k]);
	}
	bottom0 = bottom1;
}:for (int $18 = i; $18 < n; ++$18) {
	final double[] $19 = this.bottomDiagonal.get(n - ($18 + 1));
	final double $20 = 1.0 / (x - this.abscissae.get(n - ($18 + 1)));
	if (java.lang.Double.isInfinite($20)) {
		throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
		x);
	}
	for (int $21 = 0; $21 < y.length; ++$21) {
		$19[$21] = $20 * (bottom0[$21] - $19[$21]);
	}
	bottom0 = $19;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < lastJ; j++) {
	if (f[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
	}
	if (dFdX[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
	}
	if (dFdY[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
	}
	if (dFdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
	}
	if (d2FdXdY[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
	}
	if (d2FdXdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
	}
	if (d2FdYdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
	}
	if (d3FdXdYdZ[i][j].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
	}

	final int jp1 = j + 1;
	for (int k = 0; k < lastK; k++) {
		final int kp1 = k + 1;

		final double[] beta = new double[]{ 
		f[i][j][k], f[ip1][j][k], 
		f[i][jp1][k], f[ip1][jp1][k], 
		f[i][j][kp1], f[ip1][j][kp1], 
		f[i][jp1][kp1], f[ip1][jp1][kp1], 

		dFdX[i][j][k], dFdX[ip1][j][k], 
		dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
		dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
		dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

		dFdY[i][j][k], dFdY[ip1][j][k], 
		dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
		dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
		dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

		dFdZ[i][j][k], dFdZ[ip1][j][k], 
		dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
		dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
		dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

		d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
		d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
		d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
		d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

		d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
		d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
		d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
		d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

		d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
		d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
		d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
		d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

		d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
		d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
		d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
		d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


		splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
	}
}:for (int $18 = 0; $18 < lastJ; $18++) {
	if (f[i][$18].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][$18].length, zLen);
	}
	if (dFdX[i][$18].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][$18].length, zLen);
	}
	if (dFdY[i][$18].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][$18].length, zLen);
	}
	if (dFdZ[i][$18].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][$18].length, zLen);
	}
	if (d2FdXdY[i][$18].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][$18].length, zLen);
	}
	if (d2FdXdZ[i][$18].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][$18].length, zLen);
	}
	if (d2FdYdZ[i][$18].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][$18].length, zLen);
	}
	if (d3FdXdYdZ[i][$18].length != zLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][$18].length, zLen);
	}

	final int $19 = $18 + 1;
	for (int $20 = 0; $20 < lastK; $20++) {
		final int $21 = $20 + 1;

		final double[] $22 = new double[]{ 
		f[i][$18][$20], f[ip1][$18][$20], 
		f[i][$19][$20], f[ip1][$19][$20], 
		f[i][$18][$21], f[ip1][$18][$21], 
		f[i][$19][$21], f[ip1][$19][$21], 

		dFdX[i][$18][$20], dFdX[ip1][$18][$20], 
		dFdX[i][$19][$20], dFdX[ip1][$19][$20], 
		dFdX[i][$18][$21], dFdX[ip1][$18][$21], 
		dFdX[i][$19][$21], dFdX[ip1][$19][$21], 

		dFdY[i][$18][$20], dFdY[ip1][$18][$20], 
		dFdY[i][$19][$20], dFdY[ip1][$19][$20], 
		dFdY[i][$18][$21], dFdY[ip1][$18][$21], 
		dFdY[i][$19][$21], dFdY[ip1][$19][$21], 

		dFdZ[i][$18][$20], dFdZ[ip1][$18][$20], 
		dFdZ[i][$19][$20], dFdZ[ip1][$19][$20], 
		dFdZ[i][$18][$21], dFdZ[ip1][$18][$21], 
		dFdZ[i][$19][$21], dFdZ[ip1][$19][$21], 

		d2FdXdY[i][$18][$20], d2FdXdY[ip1][$18][$20], 
		d2FdXdY[i][$19][$20], d2FdXdY[ip1][$19][$20], 
		d2FdXdY[i][$18][$21], d2FdXdY[ip1][$18][$21], 
		d2FdXdY[i][$19][$21], d2FdXdY[ip1][$19][$21], 

		d2FdXdZ[i][$18][$20], d2FdXdZ[ip1][$18][$20], 
		d2FdXdZ[i][$19][$20], d2FdXdZ[ip1][$19][$20], 
		d2FdXdZ[i][$18][$21], d2FdXdZ[ip1][$18][$21], 
		d2FdXdZ[i][$19][$21], d2FdXdZ[ip1][$19][$21], 

		d2FdYdZ[i][$18][$20], d2FdYdZ[ip1][$18][$20], 
		d2FdYdZ[i][$19][$20], d2FdYdZ[ip1][$19][$20], 
		d2FdYdZ[i][$18][$21], d2FdYdZ[ip1][$18][$21], 
		d2FdYdZ[i][$19][$21], d2FdYdZ[ip1][$19][$21], 

		d3FdXdYdZ[i][$18][$20], d3FdXdYdZ[ip1][$18][$20], 
		d3FdXdYdZ[i][$19][$20], d3FdXdYdZ[ip1][$19][$20], 
		d3FdXdYdZ[i][$18][$21], d3FdXdYdZ[ip1][$18][$21], 
		d3FdXdYdZ[i][$19][$21], d3FdXdYdZ[ip1][$19][$21] };


		this.splines[i][$18][$20] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($22));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 1; i < max; i++) {
	if (c <= val[i]) {
		return i - 1;
	}
}:for (int $1 = 1; $1 < max; $1++) {
	if (c <= val[$1]) {
		return $1 - 1;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}

	for (int j = 0; j < yLen; j++) {
		fX[j][i] = fval[i][j];
	}
}:for (int $33 = 0; $33 < xLen; $33++) {
	if (fval[$33].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$33].length, yLen);
	}

	for (int $34 = 0; $34 < yLen; $34++) {
		fX[$34][$33] = fval[$33][$34];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = xPolyY[i];
	for (int j = 0; j < yLen; j++) {
		fval_2[i][j] = f.value(yval[j]);
	}
}:for (int $23 = 0; $23 < xLen; $23++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $24 = xPolyY[$23];
	for (int $25 = 0; $25 < yLen; $25++) {
		fval_2[$23][$25] = $24.value(yval[$25]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	fval_1[i][j] = f.value(xval[i]);
}:for (int $15 = 0; $15 < xLen; $15++) {
	fval_1[$15][j] = f.value(xval[$15]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < sz; i++) {
	double result = 0;
	final double[] row = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[i];
	for (int j = 0; j < sz; j++) {
		result += row[j] * beta[j];
	}
	a[i] = result;
}:for (int $6 = 0; $6 < sz; $6++) {
	double $7 = 0;
	final double[] $8 = org.apache.commons.math3.analysis.interpolation.TricubicSplineInterpolatingFunction.AINV[$6];
	for (int $9 = 0; $9 < sz; $9++) {
		$7 += $8[$9] * beta[$9];
	}
	a[$6] = $7;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final double y = yval[j];
	dFdX[i][j][k] = f.partialDerivativeX(x, y);
	dFdY[i][j][k] = f.partialDerivativeY(x, y);
	d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
}:for (int $81 = 0; $81 < yLen; $81++) {
	final double $82 = yval[$81];
	dFdX[i][$81][k] = f.partialDerivativeX(x, $82);
	dFdY[i][$81][k] = f.partialDerivativeY(x, $82);
	d2FdXdY[i][$81][k] = f.partialDerivativeXY(x, $82);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; i++) {
	h[i] = x[i + 1] - x[i];
}:for (int $4 = 0; $4 < n; $4++) {
	h[$4] = x[$4 + 1] - x[$4];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
	a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
}:for (int $6 = 0; $6 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $6++) {
	this.a[i][j][$6] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $6)))];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
		for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
			result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
		}
	}
}:for (int $9 = 0; $9 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $9++) {
	for (int $10 = 0; $10 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $10++) {
		for (int $11 = 0; $11 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $11++) {
			result += ((this.a[$9][$10][$11] * pX[$9]) * pY[$10]) * pZ[$11];
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final double z = zval[k];
	for (int i = 0; i < xLen; i++) {
		final double x = xval[i];
		d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
	}
}:for (int $77 = 0; $77 < zLen; $77++) {
	final double $78 = zval[$77];
	for (int $79 = 0; $79 < xLen; $79++) {
		final double $80 = xval[$79];
		d2FdZdX[$79][j][$77] = f.partialDerivativeXY($78, $80);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		this.a[i][j] = a[i + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * j)];
	}
}:for (int $4 = 0; $4 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $4++) {
	for (int $5 = 0; $5 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $5++) {
		this.a[$4][$5] = a[$4 + (org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N * $5)];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
	result += (coeff[i][j] * pX[i]) * pY[j];
}:for (int $3 = 0; $3 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $3++) {
	result += (coeff[i][$3] * pX[i]) * pY[$3];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		result += (coeff[i][j] * pX[i]) * pY[j];
	}
}:for (int $4 = 0; $4 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $4++) {
	for (int $5 = 0; $5 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $5++) {
		result += (coeff[$4][$5] * pX[$4]) * pY[$5];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; i++) {
	for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; j++) {
		final double c = a[i][j];
		aX[i][j] = i * c;
		aY[i][j] = j * c;
		aXX[i][j] = (i - 1) * aX[i][j];
		aYY[i][j] = (j - 1) * aY[i][j];
		aXY[i][j] = j * aX[i][j];
	}
}:for (int $7 = 0; $7 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $7++) {
	for (int $8 = 0; $8 < org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction.N; $8++) {
		final double $9 = this.a[$7][$8];
		aX[$7][$8] = $7 * $9;
		aY[$7][$8] = $8 * $9;
		aXX[$7][$8] = ($7 - 1) * aX[$7][$8];
		aYY[$7][$8] = ($8 - 1) * aY[$7][$8];
		aXY[$7][$8] = $8 * aX[$7][$8];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.UnivariateFunction f = ySplineX[j].derivative();
	for (int i = 0; i < xLen; i++) {
		dFdX[i][j] = f.value(xval[i]);
	}
}:for (int $27 = 0; $27 < yLen; $27++) {
	final org.apache.commons.math3.analysis.UnivariateFunction $28 = ySplineX[$27].derivative();
	for (int $29 = 0; $29 < xLen; $29++) {
		dFdX[$29][$27] = $28.value(xval[$29]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < microsphereElements; i++) {
	microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector()));
}:for (int $3 = 0; $3 < microsphereElements; $3++) {
	this.microsphere.add(new org.apache.commons.math3.analysis.interpolation.MicrosphereInterpolatingFunction.MicrosphereSurfaceElement(rand.nextVector()));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final double v = fval[i][j][k];
	fvalXY[k][i][j] = v;
	fvalZX[j][k][i] = v;
}:for (int $73 = 0; $73 < zLen; $73++) {
	final double $74 = fval[i][j][$73];
	fvalXY[$73][i][j] = $74;
	fvalZX[j][$73][i] = $74;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final double z = zval[k];
	dFdZ[i][j][k] = f.partialDerivativeY(y, z);
	d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
}:for (int $75 = 0; $75 < zLen; $75++) {
	final double $76 = zval[$75];
	dFdZ[i][j][$75] = f.partialDerivativeY(y, $76);
	d2FdYdZ[i][j][$75] = f.partialDerivativeXY(y, $76);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int iter = 0; iter <= robustnessIters; ++iter) {
	final int[] bandwidthInterval = new int[]{ 0, bandwidthInPoints - 1 };

	for (int i = 0; i < n; ++i) {
		final double x = xval[i];



		if (i > 0) {
			org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
		}

		final int ileft = bandwidthInterval[0];
		final int iright = bandwidthInterval[1];



		final int edge;
		if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
			edge = ileft;
		} else {
			edge = iright;
		}








		double sumWeights = 0;
		double sumX = 0;
		double sumXSquared = 0;
		double sumY = 0;
		double sumXY = 0;
		double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x));
		for (int k = ileft; k <= iright; ++k) {
			final double xk = xval[k];
			final double yk = yval[k];
			final double dist = (k < i) ? x - xk : xk - x;
			final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
			final double xkw = xk * w;
			sumWeights += w;
			sumX += xkw;
			sumXSquared += xk * xkw;
			sumY += yk * w;
			sumXY += yk * xkw;
		}

		final double meanX = sumX / sumWeights;
		final double meanY = sumY / sumWeights;
		final double meanXY = sumXY / sumWeights;
		final double meanXSquared = sumXSquared / sumWeights;

		final double beta;
		if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
			beta = 0;
		} else {
			beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
		}

		final double alpha = meanY - (beta * meanX);

		res[i] = (beta * x) + alpha;
		residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]);
	}



	if (iter == robustnessIters) {
		break;
	}






	java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n);
	java.util.Arrays.sort(sortedResiduals);
	final double medianResidual = sortedResiduals[n / 2];

	if (org.apache.commons.math3.util.FastMath.abs(medianResidual) < accuracy) {
		break;
	}

	for (int i = 0; i < n; ++i) {
		final double arg = residuals[i] / (6 * medianResidual);
		if (arg >= 1) {
			robustnessWeights[i] = 0;
		} else {
			final double w = 1 - (arg * arg);
			robustnessWeights[i] = w * w;
		}
	}
}:for (int $93 = 0; $93 <= this.robustnessIters; ++$93) {
	final int[] $94 = new int[]{ 0, bandwidthInPoints - 1 };

	for (int $95 = 0; $95 < n; ++$95) {
		final double $96 = xval[$95];



		if ($95 > 0) {
			org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, $95, $94);
		}

		final int $97 = $94[0];
		final int $98 = $94[1];



		final int $99;
		if ((xval[$95] - xval[$97]) > (xval[$98] - xval[$95])) {
			$99 = $97;
		} else {
			$99 = $98;
		}








		double $100 = 0;
		double $101 = 0;
		double $102 = 0;
		double $103 = 0;
		double $104 = 0;
		double $105 = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[$99] - $96));
		for (int $106 = $97; $106 <= $98; ++$106) {
			final double $107 = xval[$106];
			final double $108 = yval[$106];
			final double $109 = ($106 < $95) ? $96 - $107 : $107 - $96;
			final double $110 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($109 * $105) * robustnessWeights[$106]) * weights[$106];
			final double $111 = $107 * $110;
			$100 += $110;
			$101 += $111;
			$102 += $107 * $111;
			$103 += $108 * $110;
			$104 += $108 * $111;
		}

		final double $112 = $101 / $100;
		final double $113 = $103 / $100;
		final double $114 = $104 / $100;
		final double $115 = $102 / $100;

		final double $116;
		if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs($115 - ($112 * $112))) < this.accuracy) {
			$116 = 0;
		} else {
			$116 = ($114 - ($112 * $113)) / ($115 - ($112 * $112));
		}

		final double $117 = $113 - ($116 * $112);

		res[$95] = ($116 * $96) + $117;
		residuals[$95] = org.apache.commons.math3.util.FastMath.abs(yval[$95] - res[$95]);
	}



	if ($93 == this.robustnessIters) {
		break;
	}






	java.lang.System.arraycopy(residuals, 0, sortedResiduals, 0, n);
	java.util.Arrays.sort(sortedResiduals);
	final double $118 = sortedResiduals[n / 2];

	if (org.apache.commons.math3.util.FastMath.abs($118) < this.accuracy) {
		break;
	}

	for (int $119 = 0; $119 < n; ++$119) {
		final double $120 = residuals[$119] / (6 * $118);
		if ($120 >= 1) {
			robustnessWeights[$119] = 0;
		} else {
			final double $121 = 1 - ($120 * $120);
			robustnessWeights[$119] = $121 * $121;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final double y = yval[j];
	for (int k = 0; k < zLen; k++) {
		final double z = zval[k];
		dFdZ[i][j][k] = f.partialDerivativeY(y, z);
		d2FdYdZ[i][j][k] = f.partialDerivativeXY(y, z);
	}
}:for (int $83 = 0; $83 < yLen; $83++) {
	final double $84 = yval[$83];
	for (int $85 = 0; $85 < zLen; $85++) {
		final double $86 = zval[$85];
		dFdZ[i][$83][$85] = f.partialDerivativeY($84, $86);
		d2FdYdZ[i][$83][$85] = f.partialDerivativeXY($84, $86);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < extend; i++) {
	int index = (xval.length - extend) + i;
	x[i] = org.apache.commons.math3.util.MathUtils.reduce(xval[index], period, offset) - period;
	y[i] = yval[index];

	index = (len - extend) + i;
	x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset) + period;
	y[index] = yval[i];
}:for (int $6 = 0; $6 < this.extend; $6++) {
	int $7 = (xval.length - this.extend) + $6;
	x[$6] = org.apache.commons.math3.util.MathUtils.reduce(xval[$7], this.period, offset) - this.period;
	y[$6] = yval[$7];

	$7 = (len - this.extend) + $6;
	x[$7] = org.apache.commons.math3.util.MathUtils.reduce(xval[$6], this.period, offset) + this.period;
	y[$7] = yval[$6];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] tdi = topDiagonal.get(i);
	for (int k = 0; k < polynomials.length; ++k) {
		polynomials[k] = polynomials[k].add(coeff.multiply(polynomial(tdi[k])));
	}
	coeff = coeff.multiply(polynomial(-abscissae.get(i), 1.0));
}:for (int $7 = 0; $7 < this.topDiagonal.size(); ++$7) {
	double[] $8 = this.topDiagonal.get($7);
	for (int $9 = 0; $9 < polynomials.length; ++$9) {
		polynomials[$9] = polynomials[$9].add(coeff.multiply(polynomial($8[$9])));
	}
	coeff = coeff.multiply(polynomial(-this.abscissae.get($7), 1.0));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < lastJ; j++) {
	final int jp1 = j + 1;
	final double[] beta = new double[]{ 
	f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
	dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
	dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
	d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] };


	splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta));
}:for (int $8 = 0; $8 < lastJ; $8++) {
	final int $9 = $8 + 1;
	final double[] $10 = new double[]{ 
	f[i][$8], f[ip1][$8], f[i][$9], f[ip1][$9], 
	dFdX[i][$8], dFdX[ip1][$8], dFdX[i][$9], dFdX[ip1][$9], 
	dFdY[i][$8], dFdY[ip1][$8], dFdY[i][$9], dFdY[ip1][$9], 
	d2FdXdY[i][$8], d2FdXdY[ip1][$8], d2FdXdY[i][$9], d2FdXdY[ip1][$9] };


	this.splines[i][$8] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients($10));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final int nJ = nextIndex(j, yLen);
	final int pJ = previousIndex(j);
	d2FdXdY[i][j] = (((fval[nI][nJ] - fval[nI][pJ]) - 
	fval[pI][nJ]) + fval[pI][pJ]) / 
	((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ]));
}:for (int $35 = 0; $35 < yLen; $35++) {
	final int $36 = nextIndex($35, yLen);
	final int $37 = previousIndex($35);
	d2FdXdY[i][$35] = (((fval[nI][$36] - fval[nI][$37]) - 
	fval[pI][$36]) + fval[pI][$37]) / 
	((xval[nI] - xval[pI]) * (yval[$36] - yval[$37]));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 1; i < n; i++) {
	for (int j = 0; j < (n - i); j++) {
		final double denominator = x[j + i] - x[j];
		divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
	}
	a[i] = divdiff[0];
}:for (int $7 = 1; $7 < n; $7++) {
	for (int $8 = 0; $8 < (n - $7); $8++) {
		final double $9 = x[$8 + $7] - x[$8];
		divdiff[$8] = (divdiff[$8 + 1] - divdiff[$8]) / $9;
	}
	a[$7] = divdiff[0];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < derivative.length; ++k) {
		derivative[k] += dividedDifference[k] * derivativeCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	derivativeCoeff = valueCoeff + (derivativeCoeff * deltaX);
	valueCoeff *= deltaX;
}:for (int $6 = 0; $6 < this.topDiagonal.size(); ++$6) {
	double[] $7 = this.topDiagonal.get($6);
	for (int $8 = 0; $8 < derivative.length; ++$8) {
		derivative[$8] += $7[$8] * derivativeCoeff;
	}
	final double $9 = x - this.abscissae.get($6);
	derivativeCoeff = valueCoeff + (derivativeCoeff * $9);
	valueCoeff *= $9;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < lastI; i++) {
	if (f[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
	}
	if (dFdX[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
	}
	if (dFdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
	}
	if (dFdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i].length, yLen);
	}
	if (d2FdXdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
	}
	if (d2FdXdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i].length, yLen);
	}
	if (d2FdYdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i].length, yLen);
	}
	if (d3FdXdYdZ[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
	}

	final int ip1 = i + 1;
	for (int j = 0; j < lastJ; j++) {
		if (f[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i][j].length, zLen);
		}
		if (dFdX[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i][j].length, zLen);
		}
		if (dFdY[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i][j].length, zLen);
		}
		if (dFdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[i][j].length, zLen);
		}
		if (d2FdXdY[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i][j].length, zLen);
		}
		if (d2FdXdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
		}
		if (d2FdYdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
		}
		if (d3FdXdYdZ[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
		}

		final int jp1 = j + 1;
		for (int k = 0; k < lastK; k++) {
			final int kp1 = k + 1;

			final double[] beta = new double[]{ 
			f[i][j][k], f[ip1][j][k], 
			f[i][jp1][k], f[ip1][jp1][k], 
			f[i][j][kp1], f[ip1][j][kp1], 
			f[i][jp1][kp1], f[ip1][jp1][kp1], 

			dFdX[i][j][k], dFdX[ip1][j][k], 
			dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
			dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
			dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

			dFdY[i][j][k], dFdY[ip1][j][k], 
			dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
			dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
			dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

			dFdZ[i][j][k], dFdZ[ip1][j][k], 
			dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
			dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
			dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

			d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
			d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
			d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
			d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

			d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
			d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
			d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
			d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

			d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
			d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
			d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
			d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

			d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
			d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
			d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
			d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


			splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
		}
	}
}:for (int $23 = 0; $23 < lastI; $23++) {
	if (f[$23].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$23].length, yLen);
	}
	if (dFdX[$23].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$23].length, yLen);
	}
	if (dFdY[$23].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$23].length, yLen);
	}
	if (dFdZ[$23].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[$23].length, yLen);
	}
	if (d2FdXdY[$23].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$23].length, yLen);
	}
	if (d2FdXdZ[$23].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[$23].length, yLen);
	}
	if (d2FdYdZ[$23].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[$23].length, yLen);
	}
	if (d3FdXdYdZ[$23].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[$23].length, yLen);
	}

	final int $24 = $23 + 1;
	for (int $25 = 0; $25 < lastJ; $25++) {
		if (f[$23][$25].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$23][$25].length, zLen);
		}
		if (dFdX[$23][$25].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$23][$25].length, zLen);
		}
		if (dFdY[$23][$25].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$23][$25].length, zLen);
		}
		if (dFdZ[$23][$25].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdZ[$23][$25].length, zLen);
		}
		if (d2FdXdY[$23][$25].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$23][$25].length, zLen);
		}
		if (d2FdXdZ[$23][$25].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdZ[$23][$25].length, zLen);
		}
		if (d2FdYdZ[$23][$25].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdYdZ[$23][$25].length, zLen);
		}
		if (d3FdXdYdZ[$23][$25].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(d3FdXdYdZ[$23][$25].length, zLen);
		}

		final int $26 = $25 + 1;
		for (int $27 = 0; $27 < lastK; $27++) {
			final int $28 = $27 + 1;

			final double[] $29 = new double[]{ 
			f[$23][$25][$27], f[$24][$25][$27], 
			f[$23][$26][$27], f[$24][$26][$27], 
			f[$23][$25][$28], f[$24][$25][$28], 
			f[$23][$26][$28], f[$24][$26][$28], 

			dFdX[$23][$25][$27], dFdX[$24][$25][$27], 
			dFdX[$23][$26][$27], dFdX[$24][$26][$27], 
			dFdX[$23][$25][$28], dFdX[$24][$25][$28], 
			dFdX[$23][$26][$28], dFdX[$24][$26][$28], 

			dFdY[$23][$25][$27], dFdY[$24][$25][$27], 
			dFdY[$23][$26][$27], dFdY[$24][$26][$27], 
			dFdY[$23][$25][$28], dFdY[$24][$25][$28], 
			dFdY[$23][$26][$28], dFdY[$24][$26][$28], 

			dFdZ[$23][$25][$27], dFdZ[$24][$25][$27], 
			dFdZ[$23][$26][$27], dFdZ[$24][$26][$27], 
			dFdZ[$23][$25][$28], dFdZ[$24][$25][$28], 
			dFdZ[$23][$26][$28], dFdZ[$24][$26][$28], 

			d2FdXdY[$23][$25][$27], d2FdXdY[$24][$25][$27], 
			d2FdXdY[$23][$26][$27], d2FdXdY[$24][$26][$27], 
			d2FdXdY[$23][$25][$28], d2FdXdY[$24][$25][$28], 
			d2FdXdY[$23][$26][$28], d2FdXdY[$24][$26][$28], 

			d2FdXdZ[$23][$25][$27], d2FdXdZ[$24][$25][$27], 
			d2FdXdZ[$23][$26][$27], d2FdXdZ[$24][$26][$27], 
			d2FdXdZ[$23][$25][$28], d2FdXdZ[$24][$25][$28], 
			d2FdXdZ[$23][$26][$28], d2FdXdZ[$24][$26][$28], 

			d2FdYdZ[$23][$25][$27], d2FdYdZ[$24][$25][$27], 
			d2FdYdZ[$23][$26][$27], d2FdYdZ[$24][$26][$27], 
			d2FdYdZ[$23][$25][$28], d2FdYdZ[$24][$25][$28], 
			d2FdYdZ[$23][$26][$28], d2FdYdZ[$24][$26][$28], 

			d3FdXdYdZ[$23][$25][$27], d3FdXdYdZ[$24][$25][$27], 
			d3FdXdYdZ[$23][$26][$27], d3FdXdYdZ[$24][$26][$27], 
			d3FdXdYdZ[$23][$25][$28], d3FdXdYdZ[$24][$25][$28], 
			d3FdXdYdZ[$23][$26][$28], d3FdXdYdZ[$24][$26][$28] };


			this.splines[$23][$25][$27] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($29));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction f = yPolyX[j];
	for (int i = 0; i < xLen; i++) {
		fval_1[i][j] = f.value(xval[i]);
	}
}:for (int $20 = 0; $20 < yLen; $20++) {
	final org.apache.commons.math3.analysis.polynomials.PolynomialFunction $21 = yPolyX[$20];
	for (int $22 = 0; $22 < xLen; $22++) {
		fval_1[$22][$20] = $21.value(xval[$22]);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < y.length; ++j) {
	y[j] *= inv;
}:for (int $16 = 0; $16 < y.length; ++$16) {
	y[$16] *= inv;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < topDiagonal.size(); ++i) {
	double[] dividedDifference = topDiagonal.get(i);
	for (int k = 0; k < value.length; ++k) {
		value[k] += dividedDifference[k] * valueCoeff;
	}
	final double deltaX = x - abscissae.get(i);
	valueCoeff *= deltaX;
}:for (int $7 = 0; $7 < this.topDiagonal.size(); ++$7) {
	double[] $8 = this.topDiagonal.get($7);
	for (int $9 = 0; $9 < value.length; ++$9) {
		value[$9] += $8[$9] * valueCoeff;
	}
	final double $10 = x - this.abscissae.get($7);
	valueCoeff *= $10;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; i++) {
	coefficients[0] = y[i];
	coefficients[1] = b[i];
	coefficients[2] = c[i];
	coefficients[3] = d[i];
	polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}:for (int $5 = 0; $5 < n; $5++) {
	coefficients[0] = y[$5];
	coefficients[1] = b[$5];
	coefficients[2] = c[$5];
	coefficients[3] = d[$5];
	polynomials[$5] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; j++) {
	for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
		a[i][j][k] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * (j + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * k)))];
	}
}:for (int $7 = 0; $7 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $7++) {
	for (int $8 = 0; $8 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $8++) {
		this.a[i][$7][$8] = aV[i + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * ($7 + (org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N * $8)))];
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < (n - i); j++) {
	final double denominator = x[j + i] - x[j];
	divdiff[j] = (divdiff[j + 1] - divdiff[j]) / denominator;
}:for (int $5 = 0; $5 < (n - i); $5++) {
	final double $6 = x[$5 + i] - x[$5];
	divdiff[$5] = (divdiff[$5 + 1] - divdiff[$5]) / $6;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final int nK = nextIndex(k, zLen);
	final int pK = previousIndex(k);


	d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
	fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
	fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
	fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
	(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
}:for (int $112 = 0; $112 < zLen; $112++) {
	final int $113 = nextIndex($112, zLen);
	final int $114 = previousIndex($112);


	d3FdXdYdZ[i][j][$112] = (((((((fval[nI][nJ][$113] - fval[nI][pJ][$113]) - 
	fval[pI][nJ][$113]) + fval[pI][pJ][$113]) - 
	fval[nI][nJ][$114]) + fval[nI][pJ][$114]) + 
	fval[pI][nJ][$114]) - fval[pI][pJ][$114]) / 
	(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[$113] - zval[$114]));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < value.length; ++i) {

	final double[] y = value[i].clone();
	if (i > 1) {
		double inv = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial(i);
		for (int j = 0; j < y.length; ++j) {
			y[j] *= inv;
		}
	}


	final int n = abscissae.size();
	bottomDiagonal.add(n - i, y);
	double[] bottom0 = y;
	for (int j = i; j < n; ++j) {
		final double[] bottom1 = bottomDiagonal.get(n - (j + 1));
		final double inv = 1.0 / (x - abscissae.get(n - (j + 1)));
		if (java.lang.Double.isInfinite(inv)) {
			throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
			x);
		}
		for (int k = 0; k < y.length; ++k) {
			bottom1[k] = inv * (bottom0[k] - bottom1[k]);
		}
		bottom0 = bottom1;
	}


	topDiagonal.add(bottom0.clone());


	abscissae.add(x);

}:for (int $22 = 0; $22 < value.length; ++$22) {

	final double[] $23 = value[$22].clone();
	if ($22 > 1) {
		double $24 = 1.0 / org.apache.commons.math3.util.ArithmeticUtils.factorial($22);
		for (int $25 = 0; $25 < $23.length; ++$25) {
			$23[$25] *= $24;
		}
	}


	final int $26 = this.abscissae.size();
	this.bottomDiagonal.add($26 - $22, $23);
	double[] $27 = $23;
	for (int $28 = $22; $28 < $26; ++$28) {
		final double[] $29 = this.bottomDiagonal.get($26 - ($28 + 1));
		final double $30 = 1.0 / (x - this.abscissae.get($26 - ($28 + 1)));
		if (java.lang.Double.isInfinite($30)) {
			throw new org.apache.commons.math3.exception.MathIllegalArgumentException(org.apache.commons.math3.exception.util.LocalizedFormats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, 
			x);
		}
		for (int $31 = 0; $31 < $23.length; ++$31) {
			$29[$31] = $30 * ($27[$31] - $29[$31]);
		}
		$27 = $29;
	}


	this.topDiagonal.add($27.clone());


	this.abscissae.add(x);

}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < 16; j++) {
	result += row[j] * beta[j];
}:for (int $5 = 0; $5 < 16; $5++) {
	result += row[$5] * beta[$5];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; ++i) {
	final double x = xval[i];



	if (i > 0) {
		org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, i, bandwidthInterval);
	}

	final int ileft = bandwidthInterval[0];
	final int iright = bandwidthInterval[1];



	final int edge;
	if ((xval[i] - xval[ileft]) > (xval[iright] - xval[i])) {
		edge = ileft;
	} else {
		edge = iright;
	}








	double sumWeights = 0;
	double sumX = 0;
	double sumXSquared = 0;
	double sumY = 0;
	double sumXY = 0;
	double denom = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[edge] - x));
	for (int k = ileft; k <= iright; ++k) {
		final double xk = xval[k];
		final double yk = yval[k];
		final double dist = (k < i) ? x - xk : xk - x;
		final double w = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube(dist * denom) * robustnessWeights[k]) * weights[k];
		final double xkw = xk * w;
		sumWeights += w;
		sumX += xkw;
		sumXSquared += xk * xkw;
		sumY += yk * w;
		sumXY += yk * xkw;
	}

	final double meanX = sumX / sumWeights;
	final double meanY = sumY / sumWeights;
	final double meanXY = sumXY / sumWeights;
	final double meanXSquared = sumXSquared / sumWeights;

	final double beta;
	if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs(meanXSquared - (meanX * meanX))) < accuracy) {
		beta = 0;
	} else {
		beta = (meanXY - (meanX * meanY)) / (meanXSquared - (meanX * meanX));
	}

	final double alpha = meanY - (beta * meanX);

	res[i] = (beta * x) + alpha;
	residuals[i] = org.apache.commons.math3.util.FastMath.abs(yval[i] - res[i]);
}:for (int $70 = 0; $70 < n; ++$70) {
	final double $71 = xval[$70];



	if ($70 > 0) {
		org.apache.commons.math3.analysis.interpolation.LoessInterpolator.updateBandwidthInterval(xval, weights, $70, bandwidthInterval);
	}

	final int $72 = bandwidthInterval[0];
	final int $73 = bandwidthInterval[1];



	final int $74;
	if ((xval[$70] - xval[$72]) > (xval[$73] - xval[$70])) {
		$74 = $72;
	} else {
		$74 = $73;
	}








	double $75 = 0;
	double $76 = 0;
	double $77 = 0;
	double $78 = 0;
	double $79 = 0;
	double $80 = org.apache.commons.math3.util.FastMath.abs(1.0 / (xval[$74] - $71));
	for (int $81 = $72; $81 <= $73; ++$81) {
		final double $82 = xval[$81];
		final double $83 = yval[$81];
		final double $84 = ($81 < $70) ? $71 - $82 : $82 - $71;
		final double $85 = (org.apache.commons.math3.analysis.interpolation.LoessInterpolator.tricube($84 * $80) * robustnessWeights[$81]) * weights[$81];
		final double $86 = $82 * $85;
		$75 += $85;
		$76 += $86;
		$77 += $82 * $86;
		$78 += $83 * $85;
		$79 += $83 * $86;
	}

	final double $87 = $76 / $75;
	final double $88 = $78 / $75;
	final double $89 = $79 / $75;
	final double $90 = $77 / $75;

	final double $91;
	if (org.apache.commons.math3.util.FastMath.sqrt(org.apache.commons.math3.util.FastMath.abs($90 - ($87 * $87))) < this.accuracy) {
		$91 = 0;
	} else {
		$91 = ($89 - ($87 * $88)) / ($90 - ($87 * $87));
	}

	final double $92 = $88 - ($91 * $87);

	res[$70] = ($91 * $71) + $92;
	residuals[$70] = org.apache.commons.math3.util.FastMath.abs(yval[$70] - res[$70]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; k++) {
	result += ((a[i][j][k] * pX[i]) * pY[j]) * pZ[k];
}:for (int $6 = 0; $6 < org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction.N; $6++) {
	result += ((this.a[i][j][$6] * pX[i]) * pY[j]) * pZ[$6];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < polynomials.length; ++i) {
	polynomials[i] = zero;
}:for (int $5 = 0; $5 < polynomials.length; ++$5) {
	polynomials[$5] = zero;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	fval_2[i][j] = f.value(yval[j]);
}:for (int $16 = 0; $16 < yLen; $16++) {
	fval_2[i][$16] = f.value(yval[$16]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}
}:for (int $19 = 0; $19 < xLen; $19++) {
	if (fval[$19].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$19].length, yLen);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	zSplineXY[k] = bsi.interpolate(xval, yval, fvalXY[k]);
}:for (int $69 = 0; $69 < zLen; $69++) {
	zSplineXY[$69] = bsi.interpolate(xval, yval, fvalXY[$69]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	xSplineYZ[i] = bsi.interpolate(yval, zval, fval[i]);
}:for (int $70 = 0; $70 < xLen; $70++) {
	xSplineYZ[$70] = bsi.interpolate(yval, zval, fval[$70]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xval.length; i++) {
	final int index = i + extend;
	x[index] = org.apache.commons.math3.util.MathUtils.reduce(xval[i], period, offset);
	y[index] = yval[i];
}:for (int $4 = 0; $4 < xval.length; $4++) {
	final int $5 = $4 + this.extend;
	x[$5] = org.apache.commons.math3.util.MathUtils.reduce(xval[$4], this.period, offset);
	y[$5] = yval[$4];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < lastI; i++) {
	if (f[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[i].length, yLen);
	}
	if (dFdX[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[i].length, yLen);
	}
	if (dFdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[i].length, yLen);
	}
	if (d2FdXdY[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[i].length, yLen);
	}
	final int ip1 = i + 1;
	for (int j = 0; j < lastJ; j++) {
		final int jp1 = j + 1;
		final double[] beta = new double[]{ 
		f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], 
		dFdX[i][j], dFdX[ip1][j], dFdX[i][jp1], dFdX[ip1][jp1], 
		dFdY[i][j], dFdY[ip1][j], dFdY[i][jp1], dFdY[ip1][jp1], 
		d2FdXdY[i][j], d2FdXdY[ip1][j], d2FdXdY[i][jp1], d2FdXdY[ip1][jp1] };


		splines[i][j] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients(beta));
	}
}:for (int $11 = 0; $11 < lastI; $11++) {
	if (f[$11].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(f[$11].length, yLen);
	}
	if (dFdX[$11].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdX[$11].length, yLen);
	}
	if (dFdY[$11].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(dFdY[$11].length, yLen);
	}
	if (d2FdXdY[$11].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(d2FdXdY[$11].length, yLen);
	}
	final int $12 = $11 + 1;
	for (int $13 = 0; $13 < lastJ; $13++) {
		final int $14 = $13 + 1;
		final double[] $15 = new double[]{ 
		f[$11][$13], f[$12][$13], f[$11][$14], f[$12][$14], 
		dFdX[$11][$13], dFdX[$12][$13], dFdX[$11][$14], dFdX[$12][$14], 
		dFdY[$11][$13], dFdY[$12][$13], dFdY[$11][$14], dFdY[$12][$14], 
		d2FdXdY[$11][$13], d2FdXdY[$12][$13], d2FdXdY[$11][$14], d2FdXdY[$12][$14] };


		this.splines[$11][$13] = new org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction(computeSplineCoefficients($15));
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < lastJ; j++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j];
	partialDerivatives[0][i][j] = f.partialDerivativeX();
	partialDerivatives[1][i][j] = f.partialDerivativeY();
	partialDerivatives[2][i][j] = f.partialDerivativeXX();
	partialDerivatives[3][i][j] = f.partialDerivativeYY();
	partialDerivatives[4][i][j] = f.partialDerivativeXY();
}:for (int $5 = 0; $5 < lastJ; $5++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction $6 = this.splines[i][$5];
	this.partialDerivatives[0][i][$5] = $6.partialDerivativeX();
	this.partialDerivatives[1][i][$5] = $6.partialDerivativeY();
	this.partialDerivatives[2][i][$5] = $6.partialDerivativeXX();
	this.partialDerivatives[3][i][$5] = $6.partialDerivativeYY();
	this.partialDerivatives[4][i][$5] = $6.partialDerivativeXY();
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < zLen; k++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = zSplineXY[k];
	for (int i = 0; i < xLen; i++) {
		final double x = xval[i];
		for (int j = 0; j < yLen; j++) {
			final double y = yval[j];
			dFdX[i][j][k] = f.partialDerivativeX(x, y);
			dFdY[i][j][k] = f.partialDerivativeY(x, y);
			d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
		}
	}
}:for (int $106 = 0; $106 < zLen; $106++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $107 = zSplineXY[$106];
	for (int $108 = 0; $108 < xLen; $108++) {
		final double $109 = xval[$108];
		for (int $110 = 0; $110 < yLen; $110++) {
			final double $111 = yval[$110];
			dFdX[$108][$110][$106] = $107.partialDerivativeX($109, $111);
			dFdY[$108][$110][$106] = $107.partialDerivativeY($109, $111);
			d2FdXdY[$108][$110][$106] = $107.partialDerivativeXY($109, $111);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	fX[j][i] = fval[i][j];
}:for (int $22 = 0; $22 < yLen; $22++) {
	fX[$22][i] = fval[i][$22];
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; ++i) {
	final double arg = residuals[i] / (6 * medianResidual);
	if (arg >= 1) {
		robustnessWeights[i] = 0;
	} else {
		final double w = 1 - (arg * arg);
		robustnessWeights[i] = w * w;
	}
}:for (int $61 = 0; $61 < n; ++$61) {
	final double $62 = residuals[$61] / (6 * medianResidual);
	if ($62 >= 1) {
		robustnessWeights[$61] = 0;
	} else {
		final double $63 = 1 - ($62 * $62);
		robustnessWeights[$61] = $63 * $63;
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final int nI = nextIndex(i, xLen);
	final int pI = previousIndex(i);
	for (int j = 0; j < yLen; j++) {
		final int nJ = nextIndex(j, yLen);
		final int pJ = previousIndex(j);
		for (int k = 0; k < zLen; k++) {
			final int nK = nextIndex(k, zLen);
			final int pK = previousIndex(k);


			d3FdXdYdZ[i][j][k] = (((((((fval[nI][nJ][nK] - fval[nI][pJ][nK]) - 
			fval[pI][nJ][nK]) + fval[pI][pJ][nK]) - 
			fval[nI][nJ][pK]) + fval[nI][pJ][pK]) + 
			fval[pI][nJ][pK]) - fval[pI][pJ][pK]) / 
			(((xval[nI] - xval[pI]) * (yval[nJ] - yval[pJ])) * (zval[nK] - zval[pK]));
		}
	}
}:for (int $125 = 0; $125 < xLen; $125++) {
	final int $126 = nextIndex($125, xLen);
	final int $127 = previousIndex($125);
	for (int $128 = 0; $128 < yLen; $128++) {
		final int $129 = nextIndex($128, yLen);
		final int $130 = previousIndex($128);
		for (int $131 = 0; $131 < zLen; $131++) {
			final int $132 = nextIndex($131, zLen);
			final int $133 = previousIndex($131);


			d3FdXdYdZ[$125][$128][$131] = (((((((fval[$126][$129][$132] - fval[$126][$130][$132]) - 
			fval[$127][$129][$132]) + fval[$127][$130][$132]) - 
			fval[$126][$129][$133]) + fval[$126][$130][$133]) + 
			fval[$127][$129][$133]) - fval[$127][$130][$133]) / 
			(((xval[$126] - xval[$127]) * (yval[$129] - yval[$130])) * (zval[$132] - zval[$133]));
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < lastI; i++) {
	for (int j = 0; j < lastJ; j++) {
		final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction f = splines[i][j];
		partialDerivatives[0][i][j] = f.partialDerivativeX();
		partialDerivatives[1][i][j] = f.partialDerivativeY();
		partialDerivatives[2][i][j] = f.partialDerivativeXX();
		partialDerivatives[3][i][j] = f.partialDerivativeYY();
		partialDerivatives[4][i][j] = f.partialDerivativeXY();
	}
}:for (int $7 = 0; $7 < lastI; $7++) {
	for (int $8 = 0; $8 < lastJ; $8++) {
		final org.apache.commons.math3.analysis.interpolation.BicubicSplineFunction $9 = this.splines[$7][$8];
		this.partialDerivatives[0][$7][$8] = $9.partialDerivativeX();
		this.partialDerivatives[1][$7][$8] = $9.partialDerivativeY();
		this.partialDerivatives[2][$7][$8] = $9.partialDerivativeXX();
		this.partialDerivatives[3][$7][$8] = $9.partialDerivativeYY();
		this.partialDerivatives[4][$7][$8] = $9.partialDerivativeXY();
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < n; i++) {
	coefficients[0] = y[i];
	coefficients[1] = m[i];
	polynomials[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}:for (int $3 = 0; $3 < n; $3++) {
	coefficients[0] = y[$3];
	coefficients[1] = m[$3];
	polynomials[$3] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(coefficients);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	xFitter.addObservedPoint(1, xval[i], fval[i][j]);
}:for (int $17 = 0; $17 < xLen; $17++) {
	this.xFitter.addObservedPoint(1, xval[$17], fval[$17][j]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	ySplineX[j] = spInterpolator.interpolate(xval, fX[j]);
}:for (int $25 = 0; $25 < yLen; $25++) {
	ySplineX[$25] = spInterpolator.interpolate(xval, fX[$25]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = n - 1; j >= 0; j--) {
	c[j] = z[j] - (mu[j] * c[j + 1]);
	b[j] = ((y[j + 1] - y[j]) / h[j]) - ((h[j] * (c[j + 1] + (2.0 * c[j]))) / 3.0);
	d[j] = (c[j + 1] - c[j]) / (3.0 * h[j]);
}:for (int $6 = n - 1; $6 >= 0; $6--) {
	c[$6] = z[$6] - (mu[$6] * c[$6 + 1]);
	b[$6] = ((y[$6 + 1] - y[$6]) / h[$6]) - ((h[$6] * (c[$6 + 1] + (2.0 * c[$6]))) / 3.0);
	d[$6] = (c[$6 + 1] - c[$6]) / (3.0 * h[$6]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	final double x = xval[i];
	for (int j = 0; j < yLen; j++) {
		final double y = yval[j];
		dFdX[i][j][k] = f.partialDerivativeX(x, y);
		dFdY[i][j][k] = f.partialDerivativeY(x, y);
		d2FdXdY[i][j][k] = f.partialDerivativeXY(x, y);
	}
}:for (int $87 = 0; $87 < xLen; $87++) {
	final double $88 = xval[$87];
	for (int $89 = 0; $89 < yLen; $89++) {
		final double $90 = yval[$89];
		dFdX[$87][$89][k] = f.partialDerivativeX($88, $90);
		dFdY[$87][$89][k] = f.partialDerivativeY($88, $90);
		d2FdXdY[$87][$89][k] = f.partialDerivativeXY($88, $90);
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < lastK; k++) {
	final int kp1 = k + 1;

	final double[] beta = new double[]{ 
	f[i][j][k], f[ip1][j][k], 
	f[i][jp1][k], f[ip1][jp1][k], 
	f[i][j][kp1], f[ip1][j][kp1], 
	f[i][jp1][kp1], f[ip1][jp1][kp1], 

	dFdX[i][j][k], dFdX[ip1][j][k], 
	dFdX[i][jp1][k], dFdX[ip1][jp1][k], 
	dFdX[i][j][kp1], dFdX[ip1][j][kp1], 
	dFdX[i][jp1][kp1], dFdX[ip1][jp1][kp1], 

	dFdY[i][j][k], dFdY[ip1][j][k], 
	dFdY[i][jp1][k], dFdY[ip1][jp1][k], 
	dFdY[i][j][kp1], dFdY[ip1][j][kp1], 
	dFdY[i][jp1][kp1], dFdY[ip1][jp1][kp1], 

	dFdZ[i][j][k], dFdZ[ip1][j][k], 
	dFdZ[i][jp1][k], dFdZ[ip1][jp1][k], 
	dFdZ[i][j][kp1], dFdZ[ip1][j][kp1], 
	dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1], 

	d2FdXdY[i][j][k], d2FdXdY[ip1][j][k], 
	d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k], 
	d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1], 
	d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1], 

	d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k], 
	d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k], 
	d2FdXdZ[i][j][kp1], d2FdXdZ[ip1][j][kp1], 
	d2FdXdZ[i][jp1][kp1], d2FdXdZ[ip1][jp1][kp1], 

	d2FdYdZ[i][j][k], d2FdYdZ[ip1][j][k], 
	d2FdYdZ[i][jp1][k], d2FdYdZ[ip1][jp1][k], 
	d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1], 
	d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1], 

	d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k], 
	d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k], 
	d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1], 
	d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1] };


	splines[i][j][k] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients(beta));
}:for (int $15 = 0; $15 < lastK; $15++) {
	final int $16 = $15 + 1;

	final double[] $17 = new double[]{ 
	f[i][j][$15], f[ip1][j][$15], 
	f[i][jp1][$15], f[ip1][jp1][$15], 
	f[i][j][$16], f[ip1][j][$16], 
	f[i][jp1][$16], f[ip1][jp1][$16], 

	dFdX[i][j][$15], dFdX[ip1][j][$15], 
	dFdX[i][jp1][$15], dFdX[ip1][jp1][$15], 
	dFdX[i][j][$16], dFdX[ip1][j][$16], 
	dFdX[i][jp1][$16], dFdX[ip1][jp1][$16], 

	dFdY[i][j][$15], dFdY[ip1][j][$15], 
	dFdY[i][jp1][$15], dFdY[ip1][jp1][$15], 
	dFdY[i][j][$16], dFdY[ip1][j][$16], 
	dFdY[i][jp1][$16], dFdY[ip1][jp1][$16], 

	dFdZ[i][j][$15], dFdZ[ip1][j][$15], 
	dFdZ[i][jp1][$15], dFdZ[ip1][jp1][$15], 
	dFdZ[i][j][$16], dFdZ[ip1][j][$16], 
	dFdZ[i][jp1][$16], dFdZ[ip1][jp1][$16], 

	d2FdXdY[i][j][$15], d2FdXdY[ip1][j][$15], 
	d2FdXdY[i][jp1][$15], d2FdXdY[ip1][jp1][$15], 
	d2FdXdY[i][j][$16], d2FdXdY[ip1][j][$16], 
	d2FdXdY[i][jp1][$16], d2FdXdY[ip1][jp1][$16], 

	d2FdXdZ[i][j][$15], d2FdXdZ[ip1][j][$15], 
	d2FdXdZ[i][jp1][$15], d2FdXdZ[ip1][jp1][$15], 
	d2FdXdZ[i][j][$16], d2FdXdZ[ip1][j][$16], 
	d2FdXdZ[i][jp1][$16], d2FdXdZ[ip1][jp1][$16], 

	d2FdYdZ[i][j][$15], d2FdYdZ[ip1][j][$15], 
	d2FdYdZ[i][jp1][$15], d2FdYdZ[ip1][jp1][$15], 
	d2FdYdZ[i][j][$16], d2FdYdZ[ip1][j][$16], 
	d2FdYdZ[i][jp1][$16], d2FdYdZ[ip1][jp1][$16], 

	d3FdXdYdZ[i][j][$15], d3FdXdYdZ[ip1][j][$15], 
	d3FdXdYdZ[i][jp1][$15], d3FdXdYdZ[ip1][jp1][$15], 
	d3FdXdYdZ[i][j][$16], d3FdXdYdZ[ip1][j][$16], 
	d3FdXdYdZ[i][jp1][$16], d3FdXdYdZ[ip1][jp1][$16] };


	this.splines[i][j][$15] = new org.apache.commons.math3.analysis.interpolation.TricubicSplineFunction(computeSplineCoefficients($17));
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int k = 0; k < derivative.length; ++k) {
	derivative[k] += dividedDifference[k] * derivativeCoeff;
}:for (int $5 = 0; $5 < derivative.length; ++$5) {
	derivative[$5] += dividedDifference[$5] * derivativeCoeff;
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int j = 0; j < yLen; j++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction f = ySplineZX[j];
	for (int k = 0; k < zLen; k++) {
		final double z = zval[k];
		for (int i = 0; i < xLen; i++) {
			final double x = xval[i];
			d2FdZdX[i][j][k] = f.partialDerivativeXY(z, x);
		}
	}
}:for (int $94 = 0; $94 < yLen; $94++) {
	final org.apache.commons.math3.analysis.interpolation.BicubicSplineInterpolatingFunction $95 = ySplineZX[$94];
	for (int $96 = 0; $96 < zLen; $96++) {
		final double $97 = zval[$96];
		for (int $98 = 0; $98 < xLen; $98++) {
			final double $99 = xval[$98];
			d2FdZdX[$98][$94][$96] = $95.partialDerivativeXY($97, $99);
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	if (fval[i].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i].length, yLen);
	}

	for (int j = 0; j < yLen; j++) {
		if (fval[i][j].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[i][j].length, zLen);
		}

		for (int k = 0; k < zLen; k++) {
			final double v = fval[i][j][k];
			fvalXY[k][i][j] = v;
			fvalZX[j][k][i] = v;
		}
	}
}:for (int $115 = 0; $115 < xLen; $115++) {
	if (fval[$115].length != yLen) {
		throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$115].length, yLen);
	}

	for (int $116 = 0; $116 < yLen; $116++) {
		if (fval[$115][$116].length != zLen) {
			throw new org.apache.commons.math3.exception.DimensionMismatchException(fval[$115][$116].length, zLen);
		}

		for (int $117 = 0; $117 < zLen; $117++) {
			final double $118 = fval[$115][$116][$117];
			fvalXY[$117][$115][$116] = $118;
			fvalZX[$116][$117][$115] = $118;
		}
	}
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	yFitter.clearObservations();
	for (int j = 0; j < yLen; j++) {
		yFitter.addObservedPoint(1, yval[j], fval_1[i][j]);
	}

	xPolyY[i] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(yFitter.fit());
}:for (int $28 = 0; $28 < xLen; $28++) {
	this.yFitter.clearObservations();
	for (int $29 = 0; $29 < yLen; $29++) {
		this.yFitter.addObservedPoint(1, yval[$29], fval_1[$28][$29]);
	}

	xPolyY[$28] = new org.apache.commons.math3.analysis.polynomials.PolynomialFunction(this.yFitter.fit());
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:67) - for (int i = 0; i < xLen; i++) {
	dFdX[i][j] = f.value(xval[i]);
}:for (int $23 = 0; $23 < xLen; $23++) {
	dFdX[$23][j] = f.value(xval[$23]);
}
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:68) - ----------------------
[INFO ] fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getScopeID(LevenSearchStrategy.java:140) - scopeID: SubPlane#split
[ERROR] fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:84) - Error at generation 4
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for l2DMinus(class spoon.support.reflect.code.CtLocalVariableImpl) (/script/jGenProg_Defects4J_Math_25/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubPlane.java:120)
spoon.reflect.declaration.ParentNotInitializedException: parent not initialized for l2DMinus(class spoon.support.reflect.code.CtLocalVariableImpl) (/script/jGenProg_Defects4J_Math_25/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubPlane.java:120)
	at spoon.support.reflect.declaration.CtElementImpl.getParent(CtElementImpl.java:363)
	at spoon.reflect.visitor.filter.SiblingsFunction.apply(SiblingsFunction.java:58)
	at spoon.reflect.visitor.filter.SiblingsFunction.apply(SiblingsFunction.java:23)
	at spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper._accept(CtQueryImpl.java:492)
	at spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep.accept(CtQueryImpl.java:307)
	at spoon.reflect.visitor.chain.CtQueryImpl.forEach(CtQueryImpl.java:93)
	at spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(LocalVariableScopeFunction.java:55)
	at spoon.reflect.visitor.filter.LocalVariableScopeFunction.apply(LocalVariableScopeFunction.java:32)
	at spoon.reflect.visitor.chain.CtQueryImpl$LazyFunctionWrapper._accept(CtQueryImpl.java:492)
	at spoon.reflect.visitor.chain.CtQueryImpl$AbstractStep.accept(CtQueryImpl.java:307)
	at spoon.reflect.visitor.chain.CtQueryImpl.first(CtQueryImpl.java:136)
	at spoon.reflect.visitor.chain.CtQueryImpl.first(CtQueryImpl.java:119)
	at spoon.refactoring.CtRenameLocalVariableRefactoring.detectNameConflicts(CtRenameLocalVariableRefactoring.java:235)
	at spoon.refactoring.AbstractRenameRefactoring.detectIssues(AbstractRenameRefactoring.java:45)
	at spoon.refactoring.AbstractRenameRefactoring.refactor(AbstractRenameRefactoring.java:37)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getNormalizedElement(LevenSearchStrategy.java:166)
	at fr.inria.astor.approaches.levenshtein.LevenSearchStrategy.getFixIngredient(LevenSearchStrategy.java:60)
	at fr.inria.astor.core.ingredientbased.IngredientBasedEvolutionaryRepairApproachImpl.createOperatorInstanceForPoint(IngredientBasedEvolutionaryRepairApproachImpl.java:95)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.modifyProgramVariant(EvolutionarySearchEngine.java:264)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.createNewProgramVariant(EvolutionarySearchEngine.java:198)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.processGenerations(EvolutionarySearchEngine.java:146)
	at fr.inria.astor.core.solutionsearch.EvolutionarySearchEngine.startEvolution(EvolutionarySearchEngine.java:68)
	at fr.inria.main.evolution.AstorMain.run(AstorMain.java:203)
	at fr.inria.main.evolution.AstorMain.execute(AstorMain.java:247)
	at fr.inria.main.evolution.AstorMain.main(AstorMain.java:218)
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:170) - Time Repair Loop (s): 24.06
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.atEnd(AstorCoreEngine.java:172) - generationsexecuted: 4
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:247) - 
----SUMMARY_EXECUTION---
[INFO ] fr.inria.astor.core.solutionsearch.AstorCoreEngine.printFinalStatus(AstorCoreEngine.java:257) - End Repair Search: NOT Found solution
[INFO ] fr.inria.main.evolution.AstorMain.run(AstorMain.java:208) - Time Total(s): 3699.165


Node: 4f2a9fe7e40b



Date: Tue Nov 12 05:45:57 EST 2019

cd /script/jGenProg_Defects4J_Math_25;
export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF8 -Duser.language=en-US -Duser.country=US -Duser.language=en";
TZ="America/New_York"; export TZ;
export PATH="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/:$PATH";
export JAVA_HOME="/usr/lib/jvm/java-1.8.0-openjdk-amd64/bin/";
java -Xmx4048m -cp /script/libs/jtestex7.jar:/astor/target/astor-0.0.2-SNAPSHOT-jar-with-dependencies.jar fr.inria.main.evolution.AstorMain \
	-mode jgenprog \
	-location . \
	-id Math-25 \
	-failing org.apache.commons.math3.optimization.fitting.HarmonicFitterTest \
	-jvm4testexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-jvm4evosuitetestexecution /usr/lib/jvm/java-1.7.0-openjdk-amd64/bin/ \
	-maxgen 1000000 \
	-maxtime 120 \
	-stopfirst true \
	-seed 0 \
	-scope package \
	-population 1 \
	-javacompliancelevel 5 \
	-srcjavafolder src/main/java/ \
	-srctestfolder src/test/java/ \
	-binjavafolder target/classes/ \
	-bintestfolder target/test-classes/ \
	-parameters mode:leven \
	-dependencies /script/jGenProg_Defects4J_Math_25/target/classes/:/script/jGenProg_Defects4J_Math_25/target/test-classes/:/defects4j/framework/projects/lib/junit-4.11.jar;
	echo "\n\nNode: `hostname`\n";
	echo "\n\nDate: `date`\n";

